// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'rekordbox_database.dart';

// ignore_for_file: type=lint
class AgentNotification extends Table
    with TableInfo<AgentNotification, AgentNotificationData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  AgentNotification(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'ID',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _graphicAreaMeta = const VerificationMeta(
    'graphicArea',
  );
  late final GeneratedColumn<int> graphicArea = GeneratedColumn<int>(
    'graphic_area',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _textAreaMeta = const VerificationMeta(
    'textArea',
  );
  late final GeneratedColumn<int> textArea = GeneratedColumn<int>(
    'text_area',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _osNotificationMeta = const VerificationMeta(
    'osNotification',
  );
  late final GeneratedColumn<int> osNotification = GeneratedColumn<int>(
    'os_notification',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _startTEXTMeta = const VerificationMeta(
    'startTEXT',
  );
  late final GeneratedColumn<String> startTEXT = GeneratedColumn<String>(
    'start_TEXT',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _endTEXTMeta = const VerificationMeta(
    'endTEXT',
  );
  late final GeneratedColumn<String> endTEXT = GeneratedColumn<String>(
    'end_TEXT',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _displayTEXTMeta = const VerificationMeta(
    'displayTEXT',
  );
  late final GeneratedColumn<String> displayTEXT = GeneratedColumn<String>(
    'display_TEXT',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _intervalMeta = const VerificationMeta(
    'interval',
  );
  late final GeneratedColumn<int> interval = GeneratedColumn<int>(
    'interval',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _categoryMeta = const VerificationMeta(
    'category',
  );
  late final GeneratedColumn<String> category = GeneratedColumn<String>(
    'category',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _categoryColorMeta = const VerificationMeta(
    'categoryColor',
  );
  late final GeneratedColumn<String> categoryColor = GeneratedColumn<String>(
    'category_color',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'title',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _descriptionMeta = const VerificationMeta(
    'description',
  );
  late final GeneratedColumn<String> description = GeneratedColumn<String>(
    'description',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _urlMeta = const VerificationMeta('url');
  late final GeneratedColumn<String> url = GeneratedColumn<String>(
    'url',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imageMeta = const VerificationMeta('image');
  late final GeneratedColumn<String> image = GeneratedColumn<String>(
    'image',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imagePathMeta = const VerificationMeta(
    'imagePath',
  );
  late final GeneratedColumn<String> imagePath = GeneratedColumn<String>(
    'image_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _readStatusMeta = const VerificationMeta(
    'readStatus',
  );
  late final GeneratedColumn<int> readStatus = GeneratedColumn<int>(
    'read_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _lastDisplayedTEXTMeta = const VerificationMeta(
    'lastDisplayedTEXT',
  );
  late final GeneratedColumn<String> lastDisplayedTEXT =
      GeneratedColumn<String>(
        'last_displayed_TEXT',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
        $customConstraints: 'DEFAULT NULL',
        defaultValue: const CustomExpression('NULL'),
      );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    graphicArea,
    textArea,
    osNotification,
    startTEXT,
    endTEXT,
    displayTEXT,
    interval,
    category,
    categoryColor,
    title,
    description,
    url,
    image,
    imagePath,
    readStatus,
    lastDisplayedTEXT,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'agentNotification';
  @override
  VerificationContext validateIntegrity(
    Insertable<AgentNotificationData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('graphic_area')) {
      context.handle(
        _graphicAreaMeta,
        graphicArea.isAcceptableOrUnknown(
          data['graphic_area']!,
          _graphicAreaMeta,
        ),
      );
    }
    if (data.containsKey('text_area')) {
      context.handle(
        _textAreaMeta,
        textArea.isAcceptableOrUnknown(data['text_area']!, _textAreaMeta),
      );
    }
    if (data.containsKey('os_notification')) {
      context.handle(
        _osNotificationMeta,
        osNotification.isAcceptableOrUnknown(
          data['os_notification']!,
          _osNotificationMeta,
        ),
      );
    }
    if (data.containsKey('start_TEXT')) {
      context.handle(
        _startTEXTMeta,
        startTEXT.isAcceptableOrUnknown(data['start_TEXT']!, _startTEXTMeta),
      );
    }
    if (data.containsKey('end_TEXT')) {
      context.handle(
        _endTEXTMeta,
        endTEXT.isAcceptableOrUnknown(data['end_TEXT']!, _endTEXTMeta),
      );
    }
    if (data.containsKey('display_TEXT')) {
      context.handle(
        _displayTEXTMeta,
        displayTEXT.isAcceptableOrUnknown(
          data['display_TEXT']!,
          _displayTEXTMeta,
        ),
      );
    }
    if (data.containsKey('interval')) {
      context.handle(
        _intervalMeta,
        interval.isAcceptableOrUnknown(data['interval']!, _intervalMeta),
      );
    }
    if (data.containsKey('category')) {
      context.handle(
        _categoryMeta,
        category.isAcceptableOrUnknown(data['category']!, _categoryMeta),
      );
    }
    if (data.containsKey('category_color')) {
      context.handle(
        _categoryColorMeta,
        categoryColor.isAcceptableOrUnknown(
          data['category_color']!,
          _categoryColorMeta,
        ),
      );
    }
    if (data.containsKey('title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['title']!, _titleMeta),
      );
    }
    if (data.containsKey('description')) {
      context.handle(
        _descriptionMeta,
        description.isAcceptableOrUnknown(
          data['description']!,
          _descriptionMeta,
        ),
      );
    }
    if (data.containsKey('url')) {
      context.handle(
        _urlMeta,
        url.isAcceptableOrUnknown(data['url']!, _urlMeta),
      );
    }
    if (data.containsKey('image')) {
      context.handle(
        _imageMeta,
        image.isAcceptableOrUnknown(data['image']!, _imageMeta),
      );
    }
    if (data.containsKey('image_path')) {
      context.handle(
        _imagePathMeta,
        imagePath.isAcceptableOrUnknown(data['image_path']!, _imagePathMeta),
      );
    }
    if (data.containsKey('read_status')) {
      context.handle(
        _readStatusMeta,
        readStatus.isAcceptableOrUnknown(data['read_status']!, _readStatusMeta),
      );
    }
    if (data.containsKey('last_displayed_TEXT')) {
      context.handle(
        _lastDisplayedTEXTMeta,
        lastDisplayedTEXT.isAcceptableOrUnknown(
          data['last_displayed_TEXT']!,
          _lastDisplayedTEXTMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AgentNotificationData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AgentNotificationData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ID'],
      )!,
      graphicArea: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}graphic_area'],
      ),
      textArea: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}text_area'],
      ),
      osNotification: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}os_notification'],
      ),
      startTEXT: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}start_TEXT'],
      ),
      endTEXT: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}end_TEXT'],
      ),
      displayTEXT: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}display_TEXT'],
      ),
      interval: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}interval'],
      ),
      category: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}category'],
      ),
      categoryColor: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}category_color'],
      ),
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}title'],
      ),
      description: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}description'],
      ),
      url: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}url'],
      ),
      image: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}image'],
      ),
      imagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}image_path'],
      ),
      readStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}read_status'],
      ),
      lastDisplayedTEXT: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}last_displayed_TEXT'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  AgentNotification createAlias(String alias) {
    return AgentNotification(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class AgentNotificationData extends DataClass
    implements Insertable<AgentNotificationData> {
  final int id;
  final int? graphicArea;
  final int? textArea;
  final int? osNotification;
  final String? startTEXT;
  final String? endTEXT;
  final String? displayTEXT;
  final int? interval;
  final String? category;
  final String? categoryColor;
  final String? title;
  final String? description;
  final String? url;
  final String? image;
  final String? imagePath;
  final int? readStatus;
  final String? lastDisplayedTEXT;
  final String createdAt;
  final String updatedAt;
  const AgentNotificationData({
    required this.id,
    this.graphicArea,
    this.textArea,
    this.osNotification,
    this.startTEXT,
    this.endTEXT,
    this.displayTEXT,
    this.interval,
    this.category,
    this.categoryColor,
    this.title,
    this.description,
    this.url,
    this.image,
    this.imagePath,
    this.readStatus,
    this.lastDisplayedTEXT,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['ID'] = Variable<int>(id);
    if (!nullToAbsent || graphicArea != null) {
      map['graphic_area'] = Variable<int>(graphicArea);
    }
    if (!nullToAbsent || textArea != null) {
      map['text_area'] = Variable<int>(textArea);
    }
    if (!nullToAbsent || osNotification != null) {
      map['os_notification'] = Variable<int>(osNotification);
    }
    if (!nullToAbsent || startTEXT != null) {
      map['start_TEXT'] = Variable<String>(startTEXT);
    }
    if (!nullToAbsent || endTEXT != null) {
      map['end_TEXT'] = Variable<String>(endTEXT);
    }
    if (!nullToAbsent || displayTEXT != null) {
      map['display_TEXT'] = Variable<String>(displayTEXT);
    }
    if (!nullToAbsent || interval != null) {
      map['interval'] = Variable<int>(interval);
    }
    if (!nullToAbsent || category != null) {
      map['category'] = Variable<String>(category);
    }
    if (!nullToAbsent || categoryColor != null) {
      map['category_color'] = Variable<String>(categoryColor);
    }
    if (!nullToAbsent || title != null) {
      map['title'] = Variable<String>(title);
    }
    if (!nullToAbsent || description != null) {
      map['description'] = Variable<String>(description);
    }
    if (!nullToAbsent || url != null) {
      map['url'] = Variable<String>(url);
    }
    if (!nullToAbsent || image != null) {
      map['image'] = Variable<String>(image);
    }
    if (!nullToAbsent || imagePath != null) {
      map['image_path'] = Variable<String>(imagePath);
    }
    if (!nullToAbsent || readStatus != null) {
      map['read_status'] = Variable<int>(readStatus);
    }
    if (!nullToAbsent || lastDisplayedTEXT != null) {
      map['last_displayed_TEXT'] = Variable<String>(lastDisplayedTEXT);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  AgentNotificationCompanion toCompanion(bool nullToAbsent) {
    return AgentNotificationCompanion(
      id: Value(id),
      graphicArea: graphicArea == null && nullToAbsent
          ? const Value.absent()
          : Value(graphicArea),
      textArea: textArea == null && nullToAbsent
          ? const Value.absent()
          : Value(textArea),
      osNotification: osNotification == null && nullToAbsent
          ? const Value.absent()
          : Value(osNotification),
      startTEXT: startTEXT == null && nullToAbsent
          ? const Value.absent()
          : Value(startTEXT),
      endTEXT: endTEXT == null && nullToAbsent
          ? const Value.absent()
          : Value(endTEXT),
      displayTEXT: displayTEXT == null && nullToAbsent
          ? const Value.absent()
          : Value(displayTEXT),
      interval: interval == null && nullToAbsent
          ? const Value.absent()
          : Value(interval),
      category: category == null && nullToAbsent
          ? const Value.absent()
          : Value(category),
      categoryColor: categoryColor == null && nullToAbsent
          ? const Value.absent()
          : Value(categoryColor),
      title: title == null && nullToAbsent
          ? const Value.absent()
          : Value(title),
      description: description == null && nullToAbsent
          ? const Value.absent()
          : Value(description),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      image: image == null && nullToAbsent
          ? const Value.absent()
          : Value(image),
      imagePath: imagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(imagePath),
      readStatus: readStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(readStatus),
      lastDisplayedTEXT: lastDisplayedTEXT == null && nullToAbsent
          ? const Value.absent()
          : Value(lastDisplayedTEXT),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory AgentNotificationData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AgentNotificationData(
      id: serializer.fromJson<int>(json['ID']),
      graphicArea: serializer.fromJson<int?>(json['graphic_area']),
      textArea: serializer.fromJson<int?>(json['text_area']),
      osNotification: serializer.fromJson<int?>(json['os_notification']),
      startTEXT: serializer.fromJson<String?>(json['start_TEXT']),
      endTEXT: serializer.fromJson<String?>(json['end_TEXT']),
      displayTEXT: serializer.fromJson<String?>(json['display_TEXT']),
      interval: serializer.fromJson<int?>(json['interval']),
      category: serializer.fromJson<String?>(json['category']),
      categoryColor: serializer.fromJson<String?>(json['category_color']),
      title: serializer.fromJson<String?>(json['title']),
      description: serializer.fromJson<String?>(json['description']),
      url: serializer.fromJson<String?>(json['url']),
      image: serializer.fromJson<String?>(json['image']),
      imagePath: serializer.fromJson<String?>(json['image_path']),
      readStatus: serializer.fromJson<int?>(json['read_status']),
      lastDisplayedTEXT: serializer.fromJson<String?>(
        json['last_displayed_TEXT'],
      ),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<int>(id),
      'graphic_area': serializer.toJson<int?>(graphicArea),
      'text_area': serializer.toJson<int?>(textArea),
      'os_notification': serializer.toJson<int?>(osNotification),
      'start_TEXT': serializer.toJson<String?>(startTEXT),
      'end_TEXT': serializer.toJson<String?>(endTEXT),
      'display_TEXT': serializer.toJson<String?>(displayTEXT),
      'interval': serializer.toJson<int?>(interval),
      'category': serializer.toJson<String?>(category),
      'category_color': serializer.toJson<String?>(categoryColor),
      'title': serializer.toJson<String?>(title),
      'description': serializer.toJson<String?>(description),
      'url': serializer.toJson<String?>(url),
      'image': serializer.toJson<String?>(image),
      'image_path': serializer.toJson<String?>(imagePath),
      'read_status': serializer.toJson<int?>(readStatus),
      'last_displayed_TEXT': serializer.toJson<String?>(lastDisplayedTEXT),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  AgentNotificationData copyWith({
    int? id,
    Value<int?> graphicArea = const Value.absent(),
    Value<int?> textArea = const Value.absent(),
    Value<int?> osNotification = const Value.absent(),
    Value<String?> startTEXT = const Value.absent(),
    Value<String?> endTEXT = const Value.absent(),
    Value<String?> displayTEXT = const Value.absent(),
    Value<int?> interval = const Value.absent(),
    Value<String?> category = const Value.absent(),
    Value<String?> categoryColor = const Value.absent(),
    Value<String?> title = const Value.absent(),
    Value<String?> description = const Value.absent(),
    Value<String?> url = const Value.absent(),
    Value<String?> image = const Value.absent(),
    Value<String?> imagePath = const Value.absent(),
    Value<int?> readStatus = const Value.absent(),
    Value<String?> lastDisplayedTEXT = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => AgentNotificationData(
    id: id ?? this.id,
    graphicArea: graphicArea.present ? graphicArea.value : this.graphicArea,
    textArea: textArea.present ? textArea.value : this.textArea,
    osNotification: osNotification.present
        ? osNotification.value
        : this.osNotification,
    startTEXT: startTEXT.present ? startTEXT.value : this.startTEXT,
    endTEXT: endTEXT.present ? endTEXT.value : this.endTEXT,
    displayTEXT: displayTEXT.present ? displayTEXT.value : this.displayTEXT,
    interval: interval.present ? interval.value : this.interval,
    category: category.present ? category.value : this.category,
    categoryColor: categoryColor.present
        ? categoryColor.value
        : this.categoryColor,
    title: title.present ? title.value : this.title,
    description: description.present ? description.value : this.description,
    url: url.present ? url.value : this.url,
    image: image.present ? image.value : this.image,
    imagePath: imagePath.present ? imagePath.value : this.imagePath,
    readStatus: readStatus.present ? readStatus.value : this.readStatus,
    lastDisplayedTEXT: lastDisplayedTEXT.present
        ? lastDisplayedTEXT.value
        : this.lastDisplayedTEXT,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  AgentNotificationData copyWithCompanion(AgentNotificationCompanion data) {
    return AgentNotificationData(
      id: data.id.present ? data.id.value : this.id,
      graphicArea: data.graphicArea.present
          ? data.graphicArea.value
          : this.graphicArea,
      textArea: data.textArea.present ? data.textArea.value : this.textArea,
      osNotification: data.osNotification.present
          ? data.osNotification.value
          : this.osNotification,
      startTEXT: data.startTEXT.present ? data.startTEXT.value : this.startTEXT,
      endTEXT: data.endTEXT.present ? data.endTEXT.value : this.endTEXT,
      displayTEXT: data.displayTEXT.present
          ? data.displayTEXT.value
          : this.displayTEXT,
      interval: data.interval.present ? data.interval.value : this.interval,
      category: data.category.present ? data.category.value : this.category,
      categoryColor: data.categoryColor.present
          ? data.categoryColor.value
          : this.categoryColor,
      title: data.title.present ? data.title.value : this.title,
      description: data.description.present
          ? data.description.value
          : this.description,
      url: data.url.present ? data.url.value : this.url,
      image: data.image.present ? data.image.value : this.image,
      imagePath: data.imagePath.present ? data.imagePath.value : this.imagePath,
      readStatus: data.readStatus.present
          ? data.readStatus.value
          : this.readStatus,
      lastDisplayedTEXT: data.lastDisplayedTEXT.present
          ? data.lastDisplayedTEXT.value
          : this.lastDisplayedTEXT,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AgentNotificationData(')
          ..write('id: $id, ')
          ..write('graphicArea: $graphicArea, ')
          ..write('textArea: $textArea, ')
          ..write('osNotification: $osNotification, ')
          ..write('startTEXT: $startTEXT, ')
          ..write('endTEXT: $endTEXT, ')
          ..write('displayTEXT: $displayTEXT, ')
          ..write('interval: $interval, ')
          ..write('category: $category, ')
          ..write('categoryColor: $categoryColor, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('url: $url, ')
          ..write('image: $image, ')
          ..write('imagePath: $imagePath, ')
          ..write('readStatus: $readStatus, ')
          ..write('lastDisplayedTEXT: $lastDisplayedTEXT, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    graphicArea,
    textArea,
    osNotification,
    startTEXT,
    endTEXT,
    displayTEXT,
    interval,
    category,
    categoryColor,
    title,
    description,
    url,
    image,
    imagePath,
    readStatus,
    lastDisplayedTEXT,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AgentNotificationData &&
          other.id == this.id &&
          other.graphicArea == this.graphicArea &&
          other.textArea == this.textArea &&
          other.osNotification == this.osNotification &&
          other.startTEXT == this.startTEXT &&
          other.endTEXT == this.endTEXT &&
          other.displayTEXT == this.displayTEXT &&
          other.interval == this.interval &&
          other.category == this.category &&
          other.categoryColor == this.categoryColor &&
          other.title == this.title &&
          other.description == this.description &&
          other.url == this.url &&
          other.image == this.image &&
          other.imagePath == this.imagePath &&
          other.readStatus == this.readStatus &&
          other.lastDisplayedTEXT == this.lastDisplayedTEXT &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class AgentNotificationCompanion
    extends UpdateCompanion<AgentNotificationData> {
  final Value<int> id;
  final Value<int?> graphicArea;
  final Value<int?> textArea;
  final Value<int?> osNotification;
  final Value<String?> startTEXT;
  final Value<String?> endTEXT;
  final Value<String?> displayTEXT;
  final Value<int?> interval;
  final Value<String?> category;
  final Value<String?> categoryColor;
  final Value<String?> title;
  final Value<String?> description;
  final Value<String?> url;
  final Value<String?> image;
  final Value<String?> imagePath;
  final Value<int?> readStatus;
  final Value<String?> lastDisplayedTEXT;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  const AgentNotificationCompanion({
    this.id = const Value.absent(),
    this.graphicArea = const Value.absent(),
    this.textArea = const Value.absent(),
    this.osNotification = const Value.absent(),
    this.startTEXT = const Value.absent(),
    this.endTEXT = const Value.absent(),
    this.displayTEXT = const Value.absent(),
    this.interval = const Value.absent(),
    this.category = const Value.absent(),
    this.categoryColor = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.url = const Value.absent(),
    this.image = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.readStatus = const Value.absent(),
    this.lastDisplayedTEXT = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
  });
  AgentNotificationCompanion.insert({
    this.id = const Value.absent(),
    this.graphicArea = const Value.absent(),
    this.textArea = const Value.absent(),
    this.osNotification = const Value.absent(),
    this.startTEXT = const Value.absent(),
    this.endTEXT = const Value.absent(),
    this.displayTEXT = const Value.absent(),
    this.interval = const Value.absent(),
    this.category = const Value.absent(),
    this.categoryColor = const Value.absent(),
    this.title = const Value.absent(),
    this.description = const Value.absent(),
    this.url = const Value.absent(),
    this.image = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.readStatus = const Value.absent(),
    this.lastDisplayedTEXT = const Value.absent(),
    required String createdAt,
    required String updatedAt,
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<AgentNotificationData> custom({
    Expression<int>? id,
    Expression<int>? graphicArea,
    Expression<int>? textArea,
    Expression<int>? osNotification,
    Expression<String>? startTEXT,
    Expression<String>? endTEXT,
    Expression<String>? displayTEXT,
    Expression<int>? interval,
    Expression<String>? category,
    Expression<String>? categoryColor,
    Expression<String>? title,
    Expression<String>? description,
    Expression<String>? url,
    Expression<String>? image,
    Expression<String>? imagePath,
    Expression<int>? readStatus,
    Expression<String>? lastDisplayedTEXT,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (graphicArea != null) 'graphic_area': graphicArea,
      if (textArea != null) 'text_area': textArea,
      if (osNotification != null) 'os_notification': osNotification,
      if (startTEXT != null) 'start_TEXT': startTEXT,
      if (endTEXT != null) 'end_TEXT': endTEXT,
      if (displayTEXT != null) 'display_TEXT': displayTEXT,
      if (interval != null) 'interval': interval,
      if (category != null) 'category': category,
      if (categoryColor != null) 'category_color': categoryColor,
      if (title != null) 'title': title,
      if (description != null) 'description': description,
      if (url != null) 'url': url,
      if (image != null) 'image': image,
      if (imagePath != null) 'image_path': imagePath,
      if (readStatus != null) 'read_status': readStatus,
      if (lastDisplayedTEXT != null) 'last_displayed_TEXT': lastDisplayedTEXT,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    });
  }

  AgentNotificationCompanion copyWith({
    Value<int>? id,
    Value<int?>? graphicArea,
    Value<int?>? textArea,
    Value<int?>? osNotification,
    Value<String?>? startTEXT,
    Value<String?>? endTEXT,
    Value<String?>? displayTEXT,
    Value<int?>? interval,
    Value<String?>? category,
    Value<String?>? categoryColor,
    Value<String?>? title,
    Value<String?>? description,
    Value<String?>? url,
    Value<String?>? image,
    Value<String?>? imagePath,
    Value<int?>? readStatus,
    Value<String?>? lastDisplayedTEXT,
    Value<String>? createdAt,
    Value<String>? updatedAt,
  }) {
    return AgentNotificationCompanion(
      id: id ?? this.id,
      graphicArea: graphicArea ?? this.graphicArea,
      textArea: textArea ?? this.textArea,
      osNotification: osNotification ?? this.osNotification,
      startTEXT: startTEXT ?? this.startTEXT,
      endTEXT: endTEXT ?? this.endTEXT,
      displayTEXT: displayTEXT ?? this.displayTEXT,
      interval: interval ?? this.interval,
      category: category ?? this.category,
      categoryColor: categoryColor ?? this.categoryColor,
      title: title ?? this.title,
      description: description ?? this.description,
      url: url ?? this.url,
      image: image ?? this.image,
      imagePath: imagePath ?? this.imagePath,
      readStatus: readStatus ?? this.readStatus,
      lastDisplayedTEXT: lastDisplayedTEXT ?? this.lastDisplayedTEXT,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (graphicArea.present) {
      map['graphic_area'] = Variable<int>(graphicArea.value);
    }
    if (textArea.present) {
      map['text_area'] = Variable<int>(textArea.value);
    }
    if (osNotification.present) {
      map['os_notification'] = Variable<int>(osNotification.value);
    }
    if (startTEXT.present) {
      map['start_TEXT'] = Variable<String>(startTEXT.value);
    }
    if (endTEXT.present) {
      map['end_TEXT'] = Variable<String>(endTEXT.value);
    }
    if (displayTEXT.present) {
      map['display_TEXT'] = Variable<String>(displayTEXT.value);
    }
    if (interval.present) {
      map['interval'] = Variable<int>(interval.value);
    }
    if (category.present) {
      map['category'] = Variable<String>(category.value);
    }
    if (categoryColor.present) {
      map['category_color'] = Variable<String>(categoryColor.value);
    }
    if (title.present) {
      map['title'] = Variable<String>(title.value);
    }
    if (description.present) {
      map['description'] = Variable<String>(description.value);
    }
    if (url.present) {
      map['url'] = Variable<String>(url.value);
    }
    if (image.present) {
      map['image'] = Variable<String>(image.value);
    }
    if (imagePath.present) {
      map['image_path'] = Variable<String>(imagePath.value);
    }
    if (readStatus.present) {
      map['read_status'] = Variable<int>(readStatus.value);
    }
    if (lastDisplayedTEXT.present) {
      map['last_displayed_TEXT'] = Variable<String>(lastDisplayedTEXT.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AgentNotificationCompanion(')
          ..write('id: $id, ')
          ..write('graphicArea: $graphicArea, ')
          ..write('textArea: $textArea, ')
          ..write('osNotification: $osNotification, ')
          ..write('startTEXT: $startTEXT, ')
          ..write('endTEXT: $endTEXT, ')
          ..write('displayTEXT: $displayTEXT, ')
          ..write('interval: $interval, ')
          ..write('category: $category, ')
          ..write('categoryColor: $categoryColor, ')
          ..write('title: $title, ')
          ..write('description: $description, ')
          ..write('url: $url, ')
          ..write('image: $image, ')
          ..write('imagePath: $imagePath, ')
          ..write('readStatus: $readStatus, ')
          ..write('lastDisplayedTEXT: $lastDisplayedTEXT, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }
}

class AgentNotificationLog extends Table
    with TableInfo<AgentNotificationLog, AgentNotificationLogData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  AgentNotificationLog(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
    'ID',
    aliasedName,
    false,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _gigyaUidMeta = const VerificationMeta(
    'gigyaUid',
  );
  late final GeneratedColumn<String> gigyaUid = GeneratedColumn<String>(
    'gigya_uid',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _eventDateMeta = const VerificationMeta(
    'eventDate',
  );
  late final GeneratedColumn<int> eventDate = GeneratedColumn<int>(
    'event_date',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reportedTEXTMeta = const VerificationMeta(
    'reportedTEXT',
  );
  late final GeneratedColumn<String> reportedTEXT = GeneratedColumn<String>(
    'reported_TEXT',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _kindMeta = const VerificationMeta('kind');
  late final GeneratedColumn<int> kind = GeneratedColumn<int>(
    'kind',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _valueMeta = const VerificationMeta('value');
  late final GeneratedColumn<int> value = GeneratedColumn<int>(
    'value',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _notificationIdMeta = const VerificationMeta(
    'notificationId',
  );
  late final GeneratedColumn<int> notificationId = GeneratedColumn<int>(
    'notification_id',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _linkMeta = const VerificationMeta('link');
  late final GeneratedColumn<String> link = GeneratedColumn<String>(
    'link',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    gigyaUid,
    eventDate,
    reportedTEXT,
    kind,
    value,
    notificationId,
    link,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'agentNotificationLog';
  @override
  VerificationContext validateIntegrity(
    Insertable<AgentNotificationLogData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('gigya_uid')) {
      context.handle(
        _gigyaUidMeta,
        gigyaUid.isAcceptableOrUnknown(data['gigya_uid']!, _gigyaUidMeta),
      );
    }
    if (data.containsKey('event_date')) {
      context.handle(
        _eventDateMeta,
        eventDate.isAcceptableOrUnknown(data['event_date']!, _eventDateMeta),
      );
    }
    if (data.containsKey('reported_TEXT')) {
      context.handle(
        _reportedTEXTMeta,
        reportedTEXT.isAcceptableOrUnknown(
          data['reported_TEXT']!,
          _reportedTEXTMeta,
        ),
      );
    }
    if (data.containsKey('kind')) {
      context.handle(
        _kindMeta,
        kind.isAcceptableOrUnknown(data['kind']!, _kindMeta),
      );
    }
    if (data.containsKey('value')) {
      context.handle(
        _valueMeta,
        value.isAcceptableOrUnknown(data['value']!, _valueMeta),
      );
    }
    if (data.containsKey('notification_id')) {
      context.handle(
        _notificationIdMeta,
        notificationId.isAcceptableOrUnknown(
          data['notification_id']!,
          _notificationIdMeta,
        ),
      );
    }
    if (data.containsKey('link')) {
      context.handle(
        _linkMeta,
        link.isAcceptableOrUnknown(data['link']!, _linkMeta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  AgentNotificationLogData map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AgentNotificationLogData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ID'],
      )!,
      gigyaUid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}gigya_uid'],
      ),
      eventDate: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}event_date'],
      ),
      reportedTEXT: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}reported_TEXT'],
      ),
      kind: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}kind'],
      ),
      value: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}value'],
      ),
      notificationId: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}notification_id'],
      ),
      link: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}link'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  AgentNotificationLog createAlias(String alias) {
    return AgentNotificationLog(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class AgentNotificationLogData extends DataClass
    implements Insertable<AgentNotificationLogData> {
  final int id;
  final String? gigyaUid;
  final int? eventDate;
  final String? reportedTEXT;
  final int? kind;
  final int? value;
  final int? notificationId;
  final String? link;
  final String createdAt;
  final String updatedAt;
  const AgentNotificationLogData({
    required this.id,
    this.gigyaUid,
    this.eventDate,
    this.reportedTEXT,
    this.kind,
    this.value,
    this.notificationId,
    this.link,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    map['ID'] = Variable<int>(id);
    if (!nullToAbsent || gigyaUid != null) {
      map['gigya_uid'] = Variable<String>(gigyaUid);
    }
    if (!nullToAbsent || eventDate != null) {
      map['event_date'] = Variable<int>(eventDate);
    }
    if (!nullToAbsent || reportedTEXT != null) {
      map['reported_TEXT'] = Variable<String>(reportedTEXT);
    }
    if (!nullToAbsent || kind != null) {
      map['kind'] = Variable<int>(kind);
    }
    if (!nullToAbsent || value != null) {
      map['value'] = Variable<int>(value);
    }
    if (!nullToAbsent || notificationId != null) {
      map['notification_id'] = Variable<int>(notificationId);
    }
    if (!nullToAbsent || link != null) {
      map['link'] = Variable<String>(link);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  AgentNotificationLogCompanion toCompanion(bool nullToAbsent) {
    return AgentNotificationLogCompanion(
      id: Value(id),
      gigyaUid: gigyaUid == null && nullToAbsent
          ? const Value.absent()
          : Value(gigyaUid),
      eventDate: eventDate == null && nullToAbsent
          ? const Value.absent()
          : Value(eventDate),
      reportedTEXT: reportedTEXT == null && nullToAbsent
          ? const Value.absent()
          : Value(reportedTEXT),
      kind: kind == null && nullToAbsent ? const Value.absent() : Value(kind),
      value: value == null && nullToAbsent
          ? const Value.absent()
          : Value(value),
      notificationId: notificationId == null && nullToAbsent
          ? const Value.absent()
          : Value(notificationId),
      link: link == null && nullToAbsent ? const Value.absent() : Value(link),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory AgentNotificationLogData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AgentNotificationLogData(
      id: serializer.fromJson<int>(json['ID']),
      gigyaUid: serializer.fromJson<String?>(json['gigya_uid']),
      eventDate: serializer.fromJson<int?>(json['event_date']),
      reportedTEXT: serializer.fromJson<String?>(json['reported_TEXT']),
      kind: serializer.fromJson<int?>(json['kind']),
      value: serializer.fromJson<int?>(json['value']),
      notificationId: serializer.fromJson<int?>(json['notification_id']),
      link: serializer.fromJson<String?>(json['link']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<int>(id),
      'gigya_uid': serializer.toJson<String?>(gigyaUid),
      'event_date': serializer.toJson<int?>(eventDate),
      'reported_TEXT': serializer.toJson<String?>(reportedTEXT),
      'kind': serializer.toJson<int?>(kind),
      'value': serializer.toJson<int?>(value),
      'notification_id': serializer.toJson<int?>(notificationId),
      'link': serializer.toJson<String?>(link),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  AgentNotificationLogData copyWith({
    int? id,
    Value<String?> gigyaUid = const Value.absent(),
    Value<int?> eventDate = const Value.absent(),
    Value<String?> reportedTEXT = const Value.absent(),
    Value<int?> kind = const Value.absent(),
    Value<int?> value = const Value.absent(),
    Value<int?> notificationId = const Value.absent(),
    Value<String?> link = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => AgentNotificationLogData(
    id: id ?? this.id,
    gigyaUid: gigyaUid.present ? gigyaUid.value : this.gigyaUid,
    eventDate: eventDate.present ? eventDate.value : this.eventDate,
    reportedTEXT: reportedTEXT.present ? reportedTEXT.value : this.reportedTEXT,
    kind: kind.present ? kind.value : this.kind,
    value: value.present ? value.value : this.value,
    notificationId: notificationId.present
        ? notificationId.value
        : this.notificationId,
    link: link.present ? link.value : this.link,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  AgentNotificationLogData copyWithCompanion(
    AgentNotificationLogCompanion data,
  ) {
    return AgentNotificationLogData(
      id: data.id.present ? data.id.value : this.id,
      gigyaUid: data.gigyaUid.present ? data.gigyaUid.value : this.gigyaUid,
      eventDate: data.eventDate.present ? data.eventDate.value : this.eventDate,
      reportedTEXT: data.reportedTEXT.present
          ? data.reportedTEXT.value
          : this.reportedTEXT,
      kind: data.kind.present ? data.kind.value : this.kind,
      value: data.value.present ? data.value.value : this.value,
      notificationId: data.notificationId.present
          ? data.notificationId.value
          : this.notificationId,
      link: data.link.present ? data.link.value : this.link,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AgentNotificationLogData(')
          ..write('id: $id, ')
          ..write('gigyaUid: $gigyaUid, ')
          ..write('eventDate: $eventDate, ')
          ..write('reportedTEXT: $reportedTEXT, ')
          ..write('kind: $kind, ')
          ..write('value: $value, ')
          ..write('notificationId: $notificationId, ')
          ..write('link: $link, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    gigyaUid,
    eventDate,
    reportedTEXT,
    kind,
    value,
    notificationId,
    link,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AgentNotificationLogData &&
          other.id == this.id &&
          other.gigyaUid == this.gigyaUid &&
          other.eventDate == this.eventDate &&
          other.reportedTEXT == this.reportedTEXT &&
          other.kind == this.kind &&
          other.value == this.value &&
          other.notificationId == this.notificationId &&
          other.link == this.link &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class AgentNotificationLogCompanion
    extends UpdateCompanion<AgentNotificationLogData> {
  final Value<int> id;
  final Value<String?> gigyaUid;
  final Value<int?> eventDate;
  final Value<String?> reportedTEXT;
  final Value<int?> kind;
  final Value<int?> value;
  final Value<int?> notificationId;
  final Value<String?> link;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  const AgentNotificationLogCompanion({
    this.id = const Value.absent(),
    this.gigyaUid = const Value.absent(),
    this.eventDate = const Value.absent(),
    this.reportedTEXT = const Value.absent(),
    this.kind = const Value.absent(),
    this.value = const Value.absent(),
    this.notificationId = const Value.absent(),
    this.link = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
  });
  AgentNotificationLogCompanion.insert({
    this.id = const Value.absent(),
    this.gigyaUid = const Value.absent(),
    this.eventDate = const Value.absent(),
    this.reportedTEXT = const Value.absent(),
    this.kind = const Value.absent(),
    this.value = const Value.absent(),
    this.notificationId = const Value.absent(),
    this.link = const Value.absent(),
    required String createdAt,
    required String updatedAt,
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<AgentNotificationLogData> custom({
    Expression<int>? id,
    Expression<String>? gigyaUid,
    Expression<int>? eventDate,
    Expression<String>? reportedTEXT,
    Expression<int>? kind,
    Expression<int>? value,
    Expression<int>? notificationId,
    Expression<String>? link,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (gigyaUid != null) 'gigya_uid': gigyaUid,
      if (eventDate != null) 'event_date': eventDate,
      if (reportedTEXT != null) 'reported_TEXT': reportedTEXT,
      if (kind != null) 'kind': kind,
      if (value != null) 'value': value,
      if (notificationId != null) 'notification_id': notificationId,
      if (link != null) 'link': link,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
    });
  }

  AgentNotificationLogCompanion copyWith({
    Value<int>? id,
    Value<String?>? gigyaUid,
    Value<int?>? eventDate,
    Value<String?>? reportedTEXT,
    Value<int?>? kind,
    Value<int?>? value,
    Value<int?>? notificationId,
    Value<String?>? link,
    Value<String>? createdAt,
    Value<String>? updatedAt,
  }) {
    return AgentNotificationLogCompanion(
      id: id ?? this.id,
      gigyaUid: gigyaUid ?? this.gigyaUid,
      eventDate: eventDate ?? this.eventDate,
      reportedTEXT: reportedTEXT ?? this.reportedTEXT,
      kind: kind ?? this.kind,
      value: value ?? this.value,
      notificationId: notificationId ?? this.notificationId,
      link: link ?? this.link,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (gigyaUid.present) {
      map['gigya_uid'] = Variable<String>(gigyaUid.value);
    }
    if (eventDate.present) {
      map['event_date'] = Variable<int>(eventDate.value);
    }
    if (reportedTEXT.present) {
      map['reported_TEXT'] = Variable<String>(reportedTEXT.value);
    }
    if (kind.present) {
      map['kind'] = Variable<int>(kind.value);
    }
    if (value.present) {
      map['value'] = Variable<int>(value.value);
    }
    if (notificationId.present) {
      map['notification_id'] = Variable<int>(notificationId.value);
    }
    if (link.present) {
      map['link'] = Variable<String>(link.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AgentNotificationLogCompanion(')
          ..write('id: $id, ')
          ..write('gigyaUid: $gigyaUid, ')
          ..write('eventDate: $eventDate, ')
          ..write('reportedTEXT: $reportedTEXT, ')
          ..write('kind: $kind, ')
          ..write('value: $value, ')
          ..write('notificationId: $notificationId, ')
          ..write('link: $link, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }
}

class AgentRegistry extends Table
    with TableInfo<AgentRegistry, AgentRegistryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  AgentRegistry(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _registryIdMeta = const VerificationMeta(
    'registryId',
  );
  late final GeneratedColumn<String> registryId = GeneratedColumn<String>(
    'registry_id',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _id1Meta = const VerificationMeta('id1');
  late final GeneratedColumn<String> id1 = GeneratedColumn<String>(
    'id_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _id2Meta = const VerificationMeta('id2');
  late final GeneratedColumn<String> id2 = GeneratedColumn<String>(
    'id_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _int1Meta = const VerificationMeta('int1');
  late final GeneratedColumn<int> int1 = GeneratedColumn<int>(
    'int_1',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _int2Meta = const VerificationMeta('int2');
  late final GeneratedColumn<int> int2 = GeneratedColumn<int>(
    'int_2',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _str1Meta = const VerificationMeta('str1');
  late final GeneratedColumn<String> str1 = GeneratedColumn<String>(
    'str_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _str2Meta = const VerificationMeta('str2');
  late final GeneratedColumn<String> str2 = GeneratedColumn<String>(
    'str_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _date1Meta = const VerificationMeta('date1');
  late final GeneratedColumn<String> date1 = GeneratedColumn<String>(
    'date_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _date2Meta = const VerificationMeta('date2');
  late final GeneratedColumn<String> date2 = GeneratedColumn<String>(
    'date_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _text1Meta = const VerificationMeta('text1');
  late final GeneratedColumn<String> text1 = GeneratedColumn<String>(
    'text_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _text2Meta = const VerificationMeta('text2');
  late final GeneratedColumn<String> text2 = GeneratedColumn<String>(
    'text_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    registryId,
    id1,
    id2,
    int1,
    int2,
    str1,
    str2,
    date1,
    date2,
    text1,
    text2,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'agentRegistry';
  @override
  VerificationContext validateIntegrity(
    Insertable<AgentRegistryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('registry_id')) {
      context.handle(
        _registryIdMeta,
        registryId.isAcceptableOrUnknown(data['registry_id']!, _registryIdMeta),
      );
    }
    if (data.containsKey('id_1')) {
      context.handle(
        _id1Meta,
        id1.isAcceptableOrUnknown(data['id_1']!, _id1Meta),
      );
    }
    if (data.containsKey('id_2')) {
      context.handle(
        _id2Meta,
        id2.isAcceptableOrUnknown(data['id_2']!, _id2Meta),
      );
    }
    if (data.containsKey('int_1')) {
      context.handle(
        _int1Meta,
        int1.isAcceptableOrUnknown(data['int_1']!, _int1Meta),
      );
    }
    if (data.containsKey('int_2')) {
      context.handle(
        _int2Meta,
        int2.isAcceptableOrUnknown(data['int_2']!, _int2Meta),
      );
    }
    if (data.containsKey('str_1')) {
      context.handle(
        _str1Meta,
        str1.isAcceptableOrUnknown(data['str_1']!, _str1Meta),
      );
    }
    if (data.containsKey('str_2')) {
      context.handle(
        _str2Meta,
        str2.isAcceptableOrUnknown(data['str_2']!, _str2Meta),
      );
    }
    if (data.containsKey('date_1')) {
      context.handle(
        _date1Meta,
        date1.isAcceptableOrUnknown(data['date_1']!, _date1Meta),
      );
    }
    if (data.containsKey('date_2')) {
      context.handle(
        _date2Meta,
        date2.isAcceptableOrUnknown(data['date_2']!, _date2Meta),
      );
    }
    if (data.containsKey('text_1')) {
      context.handle(
        _text1Meta,
        text1.isAcceptableOrUnknown(data['text_1']!, _text1Meta),
      );
    }
    if (data.containsKey('text_2')) {
      context.handle(
        _text2Meta,
        text2.isAcceptableOrUnknown(data['text_2']!, _text2Meta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {registryId};
  @override
  AgentRegistryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return AgentRegistryData(
      registryId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}registry_id'],
      ),
      id1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id_1'],
      ),
      id2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}id_2'],
      ),
      int1: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}int_1'],
      ),
      int2: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}int_2'],
      ),
      str1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}str_1'],
      ),
      str2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}str_2'],
      ),
      date1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}date_1'],
      ),
      date2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}date_2'],
      ),
      text1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}text_1'],
      ),
      text2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}text_2'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  AgentRegistry createAlias(String alias) {
    return AgentRegistry(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class AgentRegistryData extends DataClass
    implements Insertable<AgentRegistryData> {
  final String? registryId;
  final String? id1;
  final String? id2;
  final int? int1;
  final int? int2;
  final String? str1;
  final String? str2;
  final String? date1;
  final String? date2;
  final String? text1;
  final String? text2;
  final String createdAt;
  final String updatedAt;
  const AgentRegistryData({
    this.registryId,
    this.id1,
    this.id2,
    this.int1,
    this.int2,
    this.str1,
    this.str2,
    this.date1,
    this.date2,
    this.text1,
    this.text2,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || registryId != null) {
      map['registry_id'] = Variable<String>(registryId);
    }
    if (!nullToAbsent || id1 != null) {
      map['id_1'] = Variable<String>(id1);
    }
    if (!nullToAbsent || id2 != null) {
      map['id_2'] = Variable<String>(id2);
    }
    if (!nullToAbsent || int1 != null) {
      map['int_1'] = Variable<int>(int1);
    }
    if (!nullToAbsent || int2 != null) {
      map['int_2'] = Variable<int>(int2);
    }
    if (!nullToAbsent || str1 != null) {
      map['str_1'] = Variable<String>(str1);
    }
    if (!nullToAbsent || str2 != null) {
      map['str_2'] = Variable<String>(str2);
    }
    if (!nullToAbsent || date1 != null) {
      map['date_1'] = Variable<String>(date1);
    }
    if (!nullToAbsent || date2 != null) {
      map['date_2'] = Variable<String>(date2);
    }
    if (!nullToAbsent || text1 != null) {
      map['text_1'] = Variable<String>(text1);
    }
    if (!nullToAbsent || text2 != null) {
      map['text_2'] = Variable<String>(text2);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  AgentRegistryCompanion toCompanion(bool nullToAbsent) {
    return AgentRegistryCompanion(
      registryId: registryId == null && nullToAbsent
          ? const Value.absent()
          : Value(registryId),
      id1: id1 == null && nullToAbsent ? const Value.absent() : Value(id1),
      id2: id2 == null && nullToAbsent ? const Value.absent() : Value(id2),
      int1: int1 == null && nullToAbsent ? const Value.absent() : Value(int1),
      int2: int2 == null && nullToAbsent ? const Value.absent() : Value(int2),
      str1: str1 == null && nullToAbsent ? const Value.absent() : Value(str1),
      str2: str2 == null && nullToAbsent ? const Value.absent() : Value(str2),
      date1: date1 == null && nullToAbsent
          ? const Value.absent()
          : Value(date1),
      date2: date2 == null && nullToAbsent
          ? const Value.absent()
          : Value(date2),
      text1: text1 == null && nullToAbsent
          ? const Value.absent()
          : Value(text1),
      text2: text2 == null && nullToAbsent
          ? const Value.absent()
          : Value(text2),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory AgentRegistryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return AgentRegistryData(
      registryId: serializer.fromJson<String?>(json['registry_id']),
      id1: serializer.fromJson<String?>(json['id_1']),
      id2: serializer.fromJson<String?>(json['id_2']),
      int1: serializer.fromJson<int?>(json['int_1']),
      int2: serializer.fromJson<int?>(json['int_2']),
      str1: serializer.fromJson<String?>(json['str_1']),
      str2: serializer.fromJson<String?>(json['str_2']),
      date1: serializer.fromJson<String?>(json['date_1']),
      date2: serializer.fromJson<String?>(json['date_2']),
      text1: serializer.fromJson<String?>(json['text_1']),
      text2: serializer.fromJson<String?>(json['text_2']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'registry_id': serializer.toJson<String?>(registryId),
      'id_1': serializer.toJson<String?>(id1),
      'id_2': serializer.toJson<String?>(id2),
      'int_1': serializer.toJson<int?>(int1),
      'int_2': serializer.toJson<int?>(int2),
      'str_1': serializer.toJson<String?>(str1),
      'str_2': serializer.toJson<String?>(str2),
      'date_1': serializer.toJson<String?>(date1),
      'date_2': serializer.toJson<String?>(date2),
      'text_1': serializer.toJson<String?>(text1),
      'text_2': serializer.toJson<String?>(text2),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  AgentRegistryData copyWith({
    Value<String?> registryId = const Value.absent(),
    Value<String?> id1 = const Value.absent(),
    Value<String?> id2 = const Value.absent(),
    Value<int?> int1 = const Value.absent(),
    Value<int?> int2 = const Value.absent(),
    Value<String?> str1 = const Value.absent(),
    Value<String?> str2 = const Value.absent(),
    Value<String?> date1 = const Value.absent(),
    Value<String?> date2 = const Value.absent(),
    Value<String?> text1 = const Value.absent(),
    Value<String?> text2 = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => AgentRegistryData(
    registryId: registryId.present ? registryId.value : this.registryId,
    id1: id1.present ? id1.value : this.id1,
    id2: id2.present ? id2.value : this.id2,
    int1: int1.present ? int1.value : this.int1,
    int2: int2.present ? int2.value : this.int2,
    str1: str1.present ? str1.value : this.str1,
    str2: str2.present ? str2.value : this.str2,
    date1: date1.present ? date1.value : this.date1,
    date2: date2.present ? date2.value : this.date2,
    text1: text1.present ? text1.value : this.text1,
    text2: text2.present ? text2.value : this.text2,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  AgentRegistryData copyWithCompanion(AgentRegistryCompanion data) {
    return AgentRegistryData(
      registryId: data.registryId.present
          ? data.registryId.value
          : this.registryId,
      id1: data.id1.present ? data.id1.value : this.id1,
      id2: data.id2.present ? data.id2.value : this.id2,
      int1: data.int1.present ? data.int1.value : this.int1,
      int2: data.int2.present ? data.int2.value : this.int2,
      str1: data.str1.present ? data.str1.value : this.str1,
      str2: data.str2.present ? data.str2.value : this.str2,
      date1: data.date1.present ? data.date1.value : this.date1,
      date2: data.date2.present ? data.date2.value : this.date2,
      text1: data.text1.present ? data.text1.value : this.text1,
      text2: data.text2.present ? data.text2.value : this.text2,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('AgentRegistryData(')
          ..write('registryId: $registryId, ')
          ..write('id1: $id1, ')
          ..write('id2: $id2, ')
          ..write('int1: $int1, ')
          ..write('int2: $int2, ')
          ..write('str1: $str1, ')
          ..write('str2: $str2, ')
          ..write('date1: $date1, ')
          ..write('date2: $date2, ')
          ..write('text1: $text1, ')
          ..write('text2: $text2, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    registryId,
    id1,
    id2,
    int1,
    int2,
    str1,
    str2,
    date1,
    date2,
    text1,
    text2,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is AgentRegistryData &&
          other.registryId == this.registryId &&
          other.id1 == this.id1 &&
          other.id2 == this.id2 &&
          other.int1 == this.int1 &&
          other.int2 == this.int2 &&
          other.str1 == this.str1 &&
          other.str2 == this.str2 &&
          other.date1 == this.date1 &&
          other.date2 == this.date2 &&
          other.text1 == this.text1 &&
          other.text2 == this.text2 &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class AgentRegistryCompanion extends UpdateCompanion<AgentRegistryData> {
  final Value<String?> registryId;
  final Value<String?> id1;
  final Value<String?> id2;
  final Value<int?> int1;
  final Value<int?> int2;
  final Value<String?> str1;
  final Value<String?> str2;
  final Value<String?> date1;
  final Value<String?> date2;
  final Value<String?> text1;
  final Value<String?> text2;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const AgentRegistryCompanion({
    this.registryId = const Value.absent(),
    this.id1 = const Value.absent(),
    this.id2 = const Value.absent(),
    this.int1 = const Value.absent(),
    this.int2 = const Value.absent(),
    this.str1 = const Value.absent(),
    this.str2 = const Value.absent(),
    this.date1 = const Value.absent(),
    this.date2 = const Value.absent(),
    this.text1 = const Value.absent(),
    this.text2 = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  AgentRegistryCompanion.insert({
    this.registryId = const Value.absent(),
    this.id1 = const Value.absent(),
    this.id2 = const Value.absent(),
    this.int1 = const Value.absent(),
    this.int2 = const Value.absent(),
    this.str1 = const Value.absent(),
    this.str2 = const Value.absent(),
    this.date1 = const Value.absent(),
    this.date2 = const Value.absent(),
    this.text1 = const Value.absent(),
    this.text2 = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<AgentRegistryData> custom({
    Expression<String>? registryId,
    Expression<String>? id1,
    Expression<String>? id2,
    Expression<int>? int1,
    Expression<int>? int2,
    Expression<String>? str1,
    Expression<String>? str2,
    Expression<String>? date1,
    Expression<String>? date2,
    Expression<String>? text1,
    Expression<String>? text2,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (registryId != null) 'registry_id': registryId,
      if (id1 != null) 'id_1': id1,
      if (id2 != null) 'id_2': id2,
      if (int1 != null) 'int_1': int1,
      if (int2 != null) 'int_2': int2,
      if (str1 != null) 'str_1': str1,
      if (str2 != null) 'str_2': str2,
      if (date1 != null) 'date_1': date1,
      if (date2 != null) 'date_2': date2,
      if (text1 != null) 'text_1': text1,
      if (text2 != null) 'text_2': text2,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  AgentRegistryCompanion copyWith({
    Value<String?>? registryId,
    Value<String?>? id1,
    Value<String?>? id2,
    Value<int?>? int1,
    Value<int?>? int2,
    Value<String?>? str1,
    Value<String?>? str2,
    Value<String?>? date1,
    Value<String?>? date2,
    Value<String?>? text1,
    Value<String?>? text2,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return AgentRegistryCompanion(
      registryId: registryId ?? this.registryId,
      id1: id1 ?? this.id1,
      id2: id2 ?? this.id2,
      int1: int1 ?? this.int1,
      int2: int2 ?? this.int2,
      str1: str1 ?? this.str1,
      str2: str2 ?? this.str2,
      date1: date1 ?? this.date1,
      date2: date2 ?? this.date2,
      text1: text1 ?? this.text1,
      text2: text2 ?? this.text2,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (registryId.present) {
      map['registry_id'] = Variable<String>(registryId.value);
    }
    if (id1.present) {
      map['id_1'] = Variable<String>(id1.value);
    }
    if (id2.present) {
      map['id_2'] = Variable<String>(id2.value);
    }
    if (int1.present) {
      map['int_1'] = Variable<int>(int1.value);
    }
    if (int2.present) {
      map['int_2'] = Variable<int>(int2.value);
    }
    if (str1.present) {
      map['str_1'] = Variable<String>(str1.value);
    }
    if (str2.present) {
      map['str_2'] = Variable<String>(str2.value);
    }
    if (date1.present) {
      map['date_1'] = Variable<String>(date1.value);
    }
    if (date2.present) {
      map['date_2'] = Variable<String>(date2.value);
    }
    if (text1.present) {
      map['text_1'] = Variable<String>(text1.value);
    }
    if (text2.present) {
      map['text_2'] = Variable<String>(text2.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('AgentRegistryCompanion(')
          ..write('registryId: $registryId, ')
          ..write('id1: $id1, ')
          ..write('id2: $id2, ')
          ..write('int1: $int1, ')
          ..write('int2: $int2, ')
          ..write('str1: $str1, ')
          ..write('str2: $str2, ')
          ..write('date1: $date1, ')
          ..write('date2: $date2, ')
          ..write('text1: $text1, ')
          ..write('text2: $text2, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class CloudAgentRegistry extends Table
    with TableInfo<CloudAgentRegistry, CloudAgentRegistryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  CloudAgentRegistry(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _int1Meta = const VerificationMeta('int1');
  late final GeneratedColumn<int> int1 = GeneratedColumn<int>(
    'int_1',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _int2Meta = const VerificationMeta('int2');
  late final GeneratedColumn<int> int2 = GeneratedColumn<int>(
    'int_2',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _str1Meta = const VerificationMeta('str1');
  late final GeneratedColumn<String> str1 = GeneratedColumn<String>(
    'str_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _str2Meta = const VerificationMeta('str2');
  late final GeneratedColumn<String> str2 = GeneratedColumn<String>(
    'str_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _date1Meta = const VerificationMeta('date1');
  late final GeneratedColumn<String> date1 = GeneratedColumn<String>(
    'date_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _date2Meta = const VerificationMeta('date2');
  late final GeneratedColumn<String> date2 = GeneratedColumn<String>(
    'date_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _text1Meta = const VerificationMeta('text1');
  late final GeneratedColumn<String> text1 = GeneratedColumn<String>(
    'text_1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _text2Meta = const VerificationMeta('text2');
  late final GeneratedColumn<String> text2 = GeneratedColumn<String>(
    'text_2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    int1,
    int2,
    str1,
    str2,
    date1,
    date2,
    text1,
    text2,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'cloudAgentRegistry';
  @override
  VerificationContext validateIntegrity(
    Insertable<CloudAgentRegistryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('int_1')) {
      context.handle(
        _int1Meta,
        int1.isAcceptableOrUnknown(data['int_1']!, _int1Meta),
      );
    }
    if (data.containsKey('int_2')) {
      context.handle(
        _int2Meta,
        int2.isAcceptableOrUnknown(data['int_2']!, _int2Meta),
      );
    }
    if (data.containsKey('str_1')) {
      context.handle(
        _str1Meta,
        str1.isAcceptableOrUnknown(data['str_1']!, _str1Meta),
      );
    }
    if (data.containsKey('str_2')) {
      context.handle(
        _str2Meta,
        str2.isAcceptableOrUnknown(data['str_2']!, _str2Meta),
      );
    }
    if (data.containsKey('date_1')) {
      context.handle(
        _date1Meta,
        date1.isAcceptableOrUnknown(data['date_1']!, _date1Meta),
      );
    }
    if (data.containsKey('date_2')) {
      context.handle(
        _date2Meta,
        date2.isAcceptableOrUnknown(data['date_2']!, _date2Meta),
      );
    }
    if (data.containsKey('text_1')) {
      context.handle(
        _text1Meta,
        text1.isAcceptableOrUnknown(data['text_1']!, _text1Meta),
      );
    }
    if (data.containsKey('text_2')) {
      context.handle(
        _text2Meta,
        text2.isAcceptableOrUnknown(data['text_2']!, _text2Meta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CloudAgentRegistryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return CloudAgentRegistryData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      int1: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}int_1'],
      ),
      int2: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}int_2'],
      ),
      str1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}str_1'],
      ),
      str2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}str_2'],
      ),
      date1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}date_1'],
      ),
      date2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}date_2'],
      ),
      text1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}text_1'],
      ),
      text2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}text_2'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  CloudAgentRegistry createAlias(String alias) {
    return CloudAgentRegistry(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class CloudAgentRegistryData extends DataClass
    implements Insertable<CloudAgentRegistryData> {
  final String? id;
  final int? int1;
  final int? int2;
  final String? str1;
  final String? str2;
  final String? date1;
  final String? date2;
  final String? text1;
  final String? text2;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const CloudAgentRegistryData({
    this.id,
    this.int1,
    this.int2,
    this.str1,
    this.str2,
    this.date1,
    this.date2,
    this.text1,
    this.text2,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || int1 != null) {
      map['int_1'] = Variable<int>(int1);
    }
    if (!nullToAbsent || int2 != null) {
      map['int_2'] = Variable<int>(int2);
    }
    if (!nullToAbsent || str1 != null) {
      map['str_1'] = Variable<String>(str1);
    }
    if (!nullToAbsent || str2 != null) {
      map['str_2'] = Variable<String>(str2);
    }
    if (!nullToAbsent || date1 != null) {
      map['date_1'] = Variable<String>(date1);
    }
    if (!nullToAbsent || date2 != null) {
      map['date_2'] = Variable<String>(date2);
    }
    if (!nullToAbsent || text1 != null) {
      map['text_1'] = Variable<String>(text1);
    }
    if (!nullToAbsent || text2 != null) {
      map['text_2'] = Variable<String>(text2);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  CloudAgentRegistryCompanion toCompanion(bool nullToAbsent) {
    return CloudAgentRegistryCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      int1: int1 == null && nullToAbsent ? const Value.absent() : Value(int1),
      int2: int2 == null && nullToAbsent ? const Value.absent() : Value(int2),
      str1: str1 == null && nullToAbsent ? const Value.absent() : Value(str1),
      str2: str2 == null && nullToAbsent ? const Value.absent() : Value(str2),
      date1: date1 == null && nullToAbsent
          ? const Value.absent()
          : Value(date1),
      date2: date2 == null && nullToAbsent
          ? const Value.absent()
          : Value(date2),
      text1: text1 == null && nullToAbsent
          ? const Value.absent()
          : Value(text1),
      text2: text2 == null && nullToAbsent
          ? const Value.absent()
          : Value(text2),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory CloudAgentRegistryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CloudAgentRegistryData(
      id: serializer.fromJson<String?>(json['ID']),
      int1: serializer.fromJson<int?>(json['int_1']),
      int2: serializer.fromJson<int?>(json['int_2']),
      str1: serializer.fromJson<String?>(json['str_1']),
      str2: serializer.fromJson<String?>(json['str_2']),
      date1: serializer.fromJson<String?>(json['date_1']),
      date2: serializer.fromJson<String?>(json['date_2']),
      text1: serializer.fromJson<String?>(json['text_1']),
      text2: serializer.fromJson<String?>(json['text_2']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'int_1': serializer.toJson<int?>(int1),
      'int_2': serializer.toJson<int?>(int2),
      'str_1': serializer.toJson<String?>(str1),
      'str_2': serializer.toJson<String?>(str2),
      'date_1': serializer.toJson<String?>(date1),
      'date_2': serializer.toJson<String?>(date2),
      'text_1': serializer.toJson<String?>(text1),
      'text_2': serializer.toJson<String?>(text2),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  CloudAgentRegistryData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> int1 = const Value.absent(),
    Value<int?> int2 = const Value.absent(),
    Value<String?> str1 = const Value.absent(),
    Value<String?> str2 = const Value.absent(),
    Value<String?> date1 = const Value.absent(),
    Value<String?> date2 = const Value.absent(),
    Value<String?> text1 = const Value.absent(),
    Value<String?> text2 = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => CloudAgentRegistryData(
    id: id.present ? id.value : this.id,
    int1: int1.present ? int1.value : this.int1,
    int2: int2.present ? int2.value : this.int2,
    str1: str1.present ? str1.value : this.str1,
    str2: str2.present ? str2.value : this.str2,
    date1: date1.present ? date1.value : this.date1,
    date2: date2.present ? date2.value : this.date2,
    text1: text1.present ? text1.value : this.text1,
    text2: text2.present ? text2.value : this.text2,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  CloudAgentRegistryData copyWithCompanion(CloudAgentRegistryCompanion data) {
    return CloudAgentRegistryData(
      id: data.id.present ? data.id.value : this.id,
      int1: data.int1.present ? data.int1.value : this.int1,
      int2: data.int2.present ? data.int2.value : this.int2,
      str1: data.str1.present ? data.str1.value : this.str1,
      str2: data.str2.present ? data.str2.value : this.str2,
      date1: data.date1.present ? data.date1.value : this.date1,
      date2: data.date2.present ? data.date2.value : this.date2,
      text1: data.text1.present ? data.text1.value : this.text1,
      text2: data.text2.present ? data.text2.value : this.text2,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('CloudAgentRegistryData(')
          ..write('id: $id, ')
          ..write('int1: $int1, ')
          ..write('int2: $int2, ')
          ..write('str1: $str1, ')
          ..write('str2: $str2, ')
          ..write('date1: $date1, ')
          ..write('date2: $date2, ')
          ..write('text1: $text1, ')
          ..write('text2: $text2, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    int1,
    int2,
    str1,
    str2,
    date1,
    date2,
    text1,
    text2,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CloudAgentRegistryData &&
          other.id == this.id &&
          other.int1 == this.int1 &&
          other.int2 == this.int2 &&
          other.str1 == this.str1 &&
          other.str2 == this.str2 &&
          other.date1 == this.date1 &&
          other.date2 == this.date2 &&
          other.text1 == this.text1 &&
          other.text2 == this.text2 &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class CloudAgentRegistryCompanion
    extends UpdateCompanion<CloudAgentRegistryData> {
  final Value<String?> id;
  final Value<int?> int1;
  final Value<int?> int2;
  final Value<String?> str1;
  final Value<String?> str2;
  final Value<String?> date1;
  final Value<String?> date2;
  final Value<String?> text1;
  final Value<String?> text2;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const CloudAgentRegistryCompanion({
    this.id = const Value.absent(),
    this.int1 = const Value.absent(),
    this.int2 = const Value.absent(),
    this.str1 = const Value.absent(),
    this.str2 = const Value.absent(),
    this.date1 = const Value.absent(),
    this.date2 = const Value.absent(),
    this.text1 = const Value.absent(),
    this.text2 = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  CloudAgentRegistryCompanion.insert({
    this.id = const Value.absent(),
    this.int1 = const Value.absent(),
    this.int2 = const Value.absent(),
    this.str1 = const Value.absent(),
    this.str2 = const Value.absent(),
    this.date1 = const Value.absent(),
    this.date2 = const Value.absent(),
    this.text1 = const Value.absent(),
    this.text2 = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<CloudAgentRegistryData> custom({
    Expression<String>? id,
    Expression<int>? int1,
    Expression<int>? int2,
    Expression<String>? str1,
    Expression<String>? str2,
    Expression<String>? date1,
    Expression<String>? date2,
    Expression<String>? text1,
    Expression<String>? text2,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (int1 != null) 'int_1': int1,
      if (int2 != null) 'int_2': int2,
      if (str1 != null) 'str_1': str1,
      if (str2 != null) 'str_2': str2,
      if (date1 != null) 'date_1': date1,
      if (date2 != null) 'date_2': date2,
      if (text1 != null) 'text_1': text1,
      if (text2 != null) 'text_2': text2,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  CloudAgentRegistryCompanion copyWith({
    Value<String?>? id,
    Value<int?>? int1,
    Value<int?>? int2,
    Value<String?>? str1,
    Value<String?>? str2,
    Value<String?>? date1,
    Value<String?>? date2,
    Value<String?>? text1,
    Value<String?>? text2,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return CloudAgentRegistryCompanion(
      id: id ?? this.id,
      int1: int1 ?? this.int1,
      int2: int2 ?? this.int2,
      str1: str1 ?? this.str1,
      str2: str2 ?? this.str2,
      date1: date1 ?? this.date1,
      date2: date2 ?? this.date2,
      text1: text1 ?? this.text1,
      text2: text2 ?? this.text2,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (int1.present) {
      map['int_1'] = Variable<int>(int1.value);
    }
    if (int2.present) {
      map['int_2'] = Variable<int>(int2.value);
    }
    if (str1.present) {
      map['str_1'] = Variable<String>(str1.value);
    }
    if (str2.present) {
      map['str_2'] = Variable<String>(str2.value);
    }
    if (date1.present) {
      map['date_1'] = Variable<String>(date1.value);
    }
    if (date2.present) {
      map['date_2'] = Variable<String>(date2.value);
    }
    if (text1.present) {
      map['text_1'] = Variable<String>(text1.value);
    }
    if (text2.present) {
      map['text_2'] = Variable<String>(text2.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CloudAgentRegistryCompanion(')
          ..write('id: $id, ')
          ..write('int1: $int1, ')
          ..write('int2: $int2, ')
          ..write('str1: $str1, ')
          ..write('str2: $str2, ')
          ..write('date1: $date1, ')
          ..write('date2: $date2, ')
          ..write('text1: $text1, ')
          ..write('text2: $text2, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class ContentActiveCensor extends Table
    with TableInfo<ContentActiveCensor, ContentActiveCensorData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  ContentActiveCensor(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _activeCensorsMeta = const VerificationMeta(
    'activeCensors',
  );
  late final GeneratedColumn<String> activeCensors = GeneratedColumn<String>(
    'ActiveCensors',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbActivecensorCountMeta =
      const VerificationMeta('rbActivecensorCount');
  late final GeneratedColumn<int> rbActivecensorCount = GeneratedColumn<int>(
    'rb_activecensor_count',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    activeCensors,
    rbActivecensorCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'contentActiveCensor';
  @override
  VerificationContext validateIntegrity(
    Insertable<ContentActiveCensorData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('ActiveCensors')) {
      context.handle(
        _activeCensorsMeta,
        activeCensors.isAcceptableOrUnknown(
          data['ActiveCensors']!,
          _activeCensorsMeta,
        ),
      );
    }
    if (data.containsKey('rb_activecensor_count')) {
      context.handle(
        _rbActivecensorCountMeta,
        rbActivecensorCount.isAcceptableOrUnknown(
          data['rb_activecensor_count']!,
          _rbActivecensorCountMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContentActiveCensorData map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ContentActiveCensorData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      activeCensors: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ActiveCensors'],
      ),
      rbActivecensorCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_activecensor_count'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  ContentActiveCensor createAlias(String alias) {
    return ContentActiveCensor(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class ContentActiveCensorData extends DataClass
    implements Insertable<ContentActiveCensorData> {
  final String? id;
  final String? contentID;
  final String? activeCensors;
  final int? rbActivecensorCount;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const ContentActiveCensorData({
    this.id,
    this.contentID,
    this.activeCensors,
    this.rbActivecensorCount,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || activeCensors != null) {
      map['ActiveCensors'] = Variable<String>(activeCensors);
    }
    if (!nullToAbsent || rbActivecensorCount != null) {
      map['rb_activecensor_count'] = Variable<int>(rbActivecensorCount);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  ContentActiveCensorCompanion toCompanion(bool nullToAbsent) {
    return ContentActiveCensorCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      activeCensors: activeCensors == null && nullToAbsent
          ? const Value.absent()
          : Value(activeCensors),
      rbActivecensorCount: rbActivecensorCount == null && nullToAbsent
          ? const Value.absent()
          : Value(rbActivecensorCount),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory ContentActiveCensorData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ContentActiveCensorData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      activeCensors: serializer.fromJson<String?>(json['ActiveCensors']),
      rbActivecensorCount: serializer.fromJson<int?>(
        json['rb_activecensor_count'],
      ),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'ActiveCensors': serializer.toJson<String?>(activeCensors),
      'rb_activecensor_count': serializer.toJson<int?>(rbActivecensorCount),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  ContentActiveCensorData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<String?> activeCensors = const Value.absent(),
    Value<int?> rbActivecensorCount = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => ContentActiveCensorData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    activeCensors: activeCensors.present
        ? activeCensors.value
        : this.activeCensors,
    rbActivecensorCount: rbActivecensorCount.present
        ? rbActivecensorCount.value
        : this.rbActivecensorCount,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  ContentActiveCensorData copyWithCompanion(ContentActiveCensorCompanion data) {
    return ContentActiveCensorData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      activeCensors: data.activeCensors.present
          ? data.activeCensors.value
          : this.activeCensors,
      rbActivecensorCount: data.rbActivecensorCount.present
          ? data.rbActivecensorCount.value
          : this.rbActivecensorCount,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ContentActiveCensorData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('activeCensors: $activeCensors, ')
          ..write('rbActivecensorCount: $rbActivecensorCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID,
    activeCensors,
    rbActivecensorCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContentActiveCensorData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.activeCensors == this.activeCensors &&
          other.rbActivecensorCount == this.rbActivecensorCount &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class ContentActiveCensorCompanion
    extends UpdateCompanion<ContentActiveCensorData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<String?> activeCensors;
  final Value<int?> rbActivecensorCount;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const ContentActiveCensorCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.activeCensors = const Value.absent(),
    this.rbActivecensorCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  ContentActiveCensorCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.activeCensors = const Value.absent(),
    this.rbActivecensorCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<ContentActiveCensorData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<String>? activeCensors,
    Expression<int>? rbActivecensorCount,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (activeCensors != null) 'ActiveCensors': activeCensors,
      if (rbActivecensorCount != null)
        'rb_activecensor_count': rbActivecensorCount,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  ContentActiveCensorCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<String?>? activeCensors,
    Value<int?>? rbActivecensorCount,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return ContentActiveCensorCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      activeCensors: activeCensors ?? this.activeCensors,
      rbActivecensorCount: rbActivecensorCount ?? this.rbActivecensorCount,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (activeCensors.present) {
      map['ActiveCensors'] = Variable<String>(activeCensors.value);
    }
    if (rbActivecensorCount.present) {
      map['rb_activecensor_count'] = Variable<int>(rbActivecensorCount.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContentActiveCensorCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('activeCensors: $activeCensors, ')
          ..write('rbActivecensorCount: $rbActivecensorCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class ContentCue extends Table with TableInfo<ContentCue, ContentCueData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  ContentCue(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cuesMeta = const VerificationMeta('cues');
  late final GeneratedColumn<String> cues = GeneratedColumn<String>(
    'Cues',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbCueCountMeta = const VerificationMeta(
    'rbCueCount',
  );
  late final GeneratedColumn<int> rbCueCount = GeneratedColumn<int>(
    'rb_cue_count',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    cues,
    rbCueCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'contentCue';
  @override
  VerificationContext validateIntegrity(
    Insertable<ContentCueData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('Cues')) {
      context.handle(
        _cuesMeta,
        cues.isAcceptableOrUnknown(data['Cues']!, _cuesMeta),
      );
    }
    if (data.containsKey('rb_cue_count')) {
      context.handle(
        _rbCueCountMeta,
        rbCueCount.isAcceptableOrUnknown(
          data['rb_cue_count']!,
          _rbCueCountMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContentCueData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ContentCueData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      cues: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Cues'],
      ),
      rbCueCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_cue_count'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  ContentCue createAlias(String alias) {
    return ContentCue(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class ContentCueData extends DataClass implements Insertable<ContentCueData> {
  final String? id;
  final String? contentID;
  final String? cues;
  final int? rbCueCount;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const ContentCueData({
    this.id,
    this.contentID,
    this.cues,
    this.rbCueCount,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || cues != null) {
      map['Cues'] = Variable<String>(cues);
    }
    if (!nullToAbsent || rbCueCount != null) {
      map['rb_cue_count'] = Variable<int>(rbCueCount);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  ContentCueCompanion toCompanion(bool nullToAbsent) {
    return ContentCueCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      cues: cues == null && nullToAbsent ? const Value.absent() : Value(cues),
      rbCueCount: rbCueCount == null && nullToAbsent
          ? const Value.absent()
          : Value(rbCueCount),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory ContentCueData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ContentCueData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      cues: serializer.fromJson<String?>(json['Cues']),
      rbCueCount: serializer.fromJson<int?>(json['rb_cue_count']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'Cues': serializer.toJson<String?>(cues),
      'rb_cue_count': serializer.toJson<int?>(rbCueCount),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  ContentCueData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<String?> cues = const Value.absent(),
    Value<int?> rbCueCount = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => ContentCueData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    cues: cues.present ? cues.value : this.cues,
    rbCueCount: rbCueCount.present ? rbCueCount.value : this.rbCueCount,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  ContentCueData copyWithCompanion(ContentCueCompanion data) {
    return ContentCueData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      cues: data.cues.present ? data.cues.value : this.cues,
      rbCueCount: data.rbCueCount.present
          ? data.rbCueCount.value
          : this.rbCueCount,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ContentCueData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('cues: $cues, ')
          ..write('rbCueCount: $rbCueCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID,
    cues,
    rbCueCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContentCueData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.cues == this.cues &&
          other.rbCueCount == this.rbCueCount &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class ContentCueCompanion extends UpdateCompanion<ContentCueData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<String?> cues;
  final Value<int?> rbCueCount;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const ContentCueCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.cues = const Value.absent(),
    this.rbCueCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  ContentCueCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.cues = const Value.absent(),
    this.rbCueCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<ContentCueData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<String>? cues,
    Expression<int>? rbCueCount,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (cues != null) 'Cues': cues,
      if (rbCueCount != null) 'rb_cue_count': rbCueCount,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  ContentCueCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<String?>? cues,
    Value<int?>? rbCueCount,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return ContentCueCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      cues: cues ?? this.cues,
      rbCueCount: rbCueCount ?? this.rbCueCount,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (cues.present) {
      map['Cues'] = Variable<String>(cues.value);
    }
    if (rbCueCount.present) {
      map['rb_cue_count'] = Variable<int>(rbCueCount.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContentCueCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('cues: $cues, ')
          ..write('rbCueCount: $rbCueCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class ContentFile extends Table with TableInfo<ContentFile, ContentFileData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  ContentFile(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _pathMeta = const VerificationMeta('path');
  late final GeneratedColumn<String> path = GeneratedColumn<String>(
    'Path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _hashMeta = const VerificationMeta('hash');
  late final GeneratedColumn<String> hash = GeneratedColumn<String>(
    'Hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _sizeMeta = const VerificationMeta('size');
  late final GeneratedColumn<int> size = GeneratedColumn<int>(
    'Size',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalPathMeta = const VerificationMeta(
    'rbLocalPath',
  );
  late final GeneratedColumn<String> rbLocalPath = GeneratedColumn<String>(
    'rb_local_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncHashMeta = const VerificationMeta(
    'rbInsyncHash',
  );
  late final GeneratedColumn<String> rbInsyncHash = GeneratedColumn<String>(
    'rb_insync_hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncLocalUsnMeta = const VerificationMeta(
    'rbInsyncLocalUsn',
  );
  late final GeneratedColumn<int> rbInsyncLocalUsn = GeneratedColumn<int>(
    'rb_insync_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbFileHashDirtyMeta = const VerificationMeta(
    'rbFileHashDirty',
  );
  late final GeneratedColumn<int> rbFileHashDirty = GeneratedColumn<int>(
    'rb_file_hash_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalFileStatusMeta = const VerificationMeta(
    'rbLocalFileStatus',
  );
  late final GeneratedColumn<int> rbLocalFileStatus = GeneratedColumn<int>(
    'rb_local_file_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbInProgressMeta = const VerificationMeta(
    'rbInProgress',
  );
  late final GeneratedColumn<int> rbInProgress = GeneratedColumn<int>(
    'rb_in_progress',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbProcessTypeMeta = const VerificationMeta(
    'rbProcessType',
  );
  late final GeneratedColumn<int> rbProcessType = GeneratedColumn<int>(
    'rb_process_type',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbTempPathMeta = const VerificationMeta(
    'rbTempPath',
  );
  late final GeneratedColumn<String> rbTempPath = GeneratedColumn<String>(
    'rb_temp_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbPriorityMeta = const VerificationMeta(
    'rbPriority',
  );
  late final GeneratedColumn<int> rbPriority = GeneratedColumn<int>(
    'rb_priority',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 50',
    defaultValue: const CustomExpression('50'),
  );
  static const VerificationMeta _rbFileSizeDirtyMeta = const VerificationMeta(
    'rbFileSizeDirty',
  );
  late final GeneratedColumn<int> rbFileSizeDirty = GeneratedColumn<int>(
    'rb_file_size_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbLocalFileStatus,
    rbInProgress,
    rbProcessType,
    rbTempPath,
    rbPriority,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'contentFile';
  @override
  VerificationContext validateIntegrity(
    Insertable<ContentFileData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('Path')) {
      context.handle(
        _pathMeta,
        path.isAcceptableOrUnknown(data['Path']!, _pathMeta),
      );
    }
    if (data.containsKey('Hash')) {
      context.handle(
        _hashMeta,
        hash.isAcceptableOrUnknown(data['Hash']!, _hashMeta),
      );
    }
    if (data.containsKey('Size')) {
      context.handle(
        _sizeMeta,
        size.isAcceptableOrUnknown(data['Size']!, _sizeMeta),
      );
    }
    if (data.containsKey('rb_local_path')) {
      context.handle(
        _rbLocalPathMeta,
        rbLocalPath.isAcceptableOrUnknown(
          data['rb_local_path']!,
          _rbLocalPathMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_hash')) {
      context.handle(
        _rbInsyncHashMeta,
        rbInsyncHash.isAcceptableOrUnknown(
          data['rb_insync_hash']!,
          _rbInsyncHashMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_local_usn')) {
      context.handle(
        _rbInsyncLocalUsnMeta,
        rbInsyncLocalUsn.isAcceptableOrUnknown(
          data['rb_insync_local_usn']!,
          _rbInsyncLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('rb_file_hash_dirty')) {
      context.handle(
        _rbFileHashDirtyMeta,
        rbFileHashDirty.isAcceptableOrUnknown(
          data['rb_file_hash_dirty']!,
          _rbFileHashDirtyMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_file_status')) {
      context.handle(
        _rbLocalFileStatusMeta,
        rbLocalFileStatus.isAcceptableOrUnknown(
          data['rb_local_file_status']!,
          _rbLocalFileStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_in_progress')) {
      context.handle(
        _rbInProgressMeta,
        rbInProgress.isAcceptableOrUnknown(
          data['rb_in_progress']!,
          _rbInProgressMeta,
        ),
      );
    }
    if (data.containsKey('rb_process_type')) {
      context.handle(
        _rbProcessTypeMeta,
        rbProcessType.isAcceptableOrUnknown(
          data['rb_process_type']!,
          _rbProcessTypeMeta,
        ),
      );
    }
    if (data.containsKey('rb_temp_path')) {
      context.handle(
        _rbTempPathMeta,
        rbTempPath.isAcceptableOrUnknown(
          data['rb_temp_path']!,
          _rbTempPathMeta,
        ),
      );
    }
    if (data.containsKey('rb_priority')) {
      context.handle(
        _rbPriorityMeta,
        rbPriority.isAcceptableOrUnknown(data['rb_priority']!, _rbPriorityMeta),
      );
    }
    if (data.containsKey('rb_file_size_dirty')) {
      context.handle(
        _rbFileSizeDirtyMeta,
        rbFileSizeDirty.isAcceptableOrUnknown(
          data['rb_file_size_dirty']!,
          _rbFileSizeDirtyMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContentFileData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ContentFileData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      path: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Path'],
      ),
      hash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Hash'],
      ),
      size: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Size'],
      ),
      rbLocalPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_local_path'],
      ),
      rbInsyncHash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_insync_hash'],
      ),
      rbInsyncLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_insync_local_usn'],
      ),
      rbFileHashDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_hash_dirty'],
      ),
      rbLocalFileStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_file_status'],
      ),
      rbInProgress: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_in_progress'],
      ),
      rbProcessType: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_process_type'],
      ),
      rbTempPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_temp_path'],
      ),
      rbPriority: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_priority'],
      ),
      rbFileSizeDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_size_dirty'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  ContentFile createAlias(String alias) {
    return ContentFile(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class ContentFileData extends DataClass implements Insertable<ContentFileData> {
  final String? id;
  final String? contentID;
  final String? path;
  final String? hash;
  final int? size;
  final String? rbLocalPath;
  final String? rbInsyncHash;
  final int? rbInsyncLocalUsn;
  final int? rbFileHashDirty;
  final int? rbLocalFileStatus;
  final int? rbInProgress;
  final int? rbProcessType;
  final String? rbTempPath;
  final int? rbPriority;
  final int? rbFileSizeDirty;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const ContentFileData({
    this.id,
    this.contentID,
    this.path,
    this.hash,
    this.size,
    this.rbLocalPath,
    this.rbInsyncHash,
    this.rbInsyncLocalUsn,
    this.rbFileHashDirty,
    this.rbLocalFileStatus,
    this.rbInProgress,
    this.rbProcessType,
    this.rbTempPath,
    this.rbPriority,
    this.rbFileSizeDirty,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || path != null) {
      map['Path'] = Variable<String>(path);
    }
    if (!nullToAbsent || hash != null) {
      map['Hash'] = Variable<String>(hash);
    }
    if (!nullToAbsent || size != null) {
      map['Size'] = Variable<int>(size);
    }
    if (!nullToAbsent || rbLocalPath != null) {
      map['rb_local_path'] = Variable<String>(rbLocalPath);
    }
    if (!nullToAbsent || rbInsyncHash != null) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash);
    }
    if (!nullToAbsent || rbInsyncLocalUsn != null) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn);
    }
    if (!nullToAbsent || rbFileHashDirty != null) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty);
    }
    if (!nullToAbsent || rbLocalFileStatus != null) {
      map['rb_local_file_status'] = Variable<int>(rbLocalFileStatus);
    }
    if (!nullToAbsent || rbInProgress != null) {
      map['rb_in_progress'] = Variable<int>(rbInProgress);
    }
    if (!nullToAbsent || rbProcessType != null) {
      map['rb_process_type'] = Variable<int>(rbProcessType);
    }
    if (!nullToAbsent || rbTempPath != null) {
      map['rb_temp_path'] = Variable<String>(rbTempPath);
    }
    if (!nullToAbsent || rbPriority != null) {
      map['rb_priority'] = Variable<int>(rbPriority);
    }
    if (!nullToAbsent || rbFileSizeDirty != null) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  ContentFileCompanion toCompanion(bool nullToAbsent) {
    return ContentFileCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      path: path == null && nullToAbsent ? const Value.absent() : Value(path),
      hash: hash == null && nullToAbsent ? const Value.absent() : Value(hash),
      size: size == null && nullToAbsent ? const Value.absent() : Value(size),
      rbLocalPath: rbLocalPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalPath),
      rbInsyncHash: rbInsyncHash == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncHash),
      rbInsyncLocalUsn: rbInsyncLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncLocalUsn),
      rbFileHashDirty: rbFileHashDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileHashDirty),
      rbLocalFileStatus: rbLocalFileStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalFileStatus),
      rbInProgress: rbInProgress == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInProgress),
      rbProcessType: rbProcessType == null && nullToAbsent
          ? const Value.absent()
          : Value(rbProcessType),
      rbTempPath: rbTempPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbTempPath),
      rbPriority: rbPriority == null && nullToAbsent
          ? const Value.absent()
          : Value(rbPriority),
      rbFileSizeDirty: rbFileSizeDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileSizeDirty),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory ContentFileData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ContentFileData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      path: serializer.fromJson<String?>(json['Path']),
      hash: serializer.fromJson<String?>(json['Hash']),
      size: serializer.fromJson<int?>(json['Size']),
      rbLocalPath: serializer.fromJson<String?>(json['rb_local_path']),
      rbInsyncHash: serializer.fromJson<String?>(json['rb_insync_hash']),
      rbInsyncLocalUsn: serializer.fromJson<int?>(json['rb_insync_local_usn']),
      rbFileHashDirty: serializer.fromJson<int?>(json['rb_file_hash_dirty']),
      rbLocalFileStatus: serializer.fromJson<int?>(
        json['rb_local_file_status'],
      ),
      rbInProgress: serializer.fromJson<int?>(json['rb_in_progress']),
      rbProcessType: serializer.fromJson<int?>(json['rb_process_type']),
      rbTempPath: serializer.fromJson<String?>(json['rb_temp_path']),
      rbPriority: serializer.fromJson<int?>(json['rb_priority']),
      rbFileSizeDirty: serializer.fromJson<int?>(json['rb_file_size_dirty']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'Path': serializer.toJson<String?>(path),
      'Hash': serializer.toJson<String?>(hash),
      'Size': serializer.toJson<int?>(size),
      'rb_local_path': serializer.toJson<String?>(rbLocalPath),
      'rb_insync_hash': serializer.toJson<String?>(rbInsyncHash),
      'rb_insync_local_usn': serializer.toJson<int?>(rbInsyncLocalUsn),
      'rb_file_hash_dirty': serializer.toJson<int?>(rbFileHashDirty),
      'rb_local_file_status': serializer.toJson<int?>(rbLocalFileStatus),
      'rb_in_progress': serializer.toJson<int?>(rbInProgress),
      'rb_process_type': serializer.toJson<int?>(rbProcessType),
      'rb_temp_path': serializer.toJson<String?>(rbTempPath),
      'rb_priority': serializer.toJson<int?>(rbPriority),
      'rb_file_size_dirty': serializer.toJson<int?>(rbFileSizeDirty),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  ContentFileData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<String?> path = const Value.absent(),
    Value<String?> hash = const Value.absent(),
    Value<int?> size = const Value.absent(),
    Value<String?> rbLocalPath = const Value.absent(),
    Value<String?> rbInsyncHash = const Value.absent(),
    Value<int?> rbInsyncLocalUsn = const Value.absent(),
    Value<int?> rbFileHashDirty = const Value.absent(),
    Value<int?> rbLocalFileStatus = const Value.absent(),
    Value<int?> rbInProgress = const Value.absent(),
    Value<int?> rbProcessType = const Value.absent(),
    Value<String?> rbTempPath = const Value.absent(),
    Value<int?> rbPriority = const Value.absent(),
    Value<int?> rbFileSizeDirty = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => ContentFileData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    path: path.present ? path.value : this.path,
    hash: hash.present ? hash.value : this.hash,
    size: size.present ? size.value : this.size,
    rbLocalPath: rbLocalPath.present ? rbLocalPath.value : this.rbLocalPath,
    rbInsyncHash: rbInsyncHash.present ? rbInsyncHash.value : this.rbInsyncHash,
    rbInsyncLocalUsn: rbInsyncLocalUsn.present
        ? rbInsyncLocalUsn.value
        : this.rbInsyncLocalUsn,
    rbFileHashDirty: rbFileHashDirty.present
        ? rbFileHashDirty.value
        : this.rbFileHashDirty,
    rbLocalFileStatus: rbLocalFileStatus.present
        ? rbLocalFileStatus.value
        : this.rbLocalFileStatus,
    rbInProgress: rbInProgress.present ? rbInProgress.value : this.rbInProgress,
    rbProcessType: rbProcessType.present
        ? rbProcessType.value
        : this.rbProcessType,
    rbTempPath: rbTempPath.present ? rbTempPath.value : this.rbTempPath,
    rbPriority: rbPriority.present ? rbPriority.value : this.rbPriority,
    rbFileSizeDirty: rbFileSizeDirty.present
        ? rbFileSizeDirty.value
        : this.rbFileSizeDirty,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  ContentFileData copyWithCompanion(ContentFileCompanion data) {
    return ContentFileData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      path: data.path.present ? data.path.value : this.path,
      hash: data.hash.present ? data.hash.value : this.hash,
      size: data.size.present ? data.size.value : this.size,
      rbLocalPath: data.rbLocalPath.present
          ? data.rbLocalPath.value
          : this.rbLocalPath,
      rbInsyncHash: data.rbInsyncHash.present
          ? data.rbInsyncHash.value
          : this.rbInsyncHash,
      rbInsyncLocalUsn: data.rbInsyncLocalUsn.present
          ? data.rbInsyncLocalUsn.value
          : this.rbInsyncLocalUsn,
      rbFileHashDirty: data.rbFileHashDirty.present
          ? data.rbFileHashDirty.value
          : this.rbFileHashDirty,
      rbLocalFileStatus: data.rbLocalFileStatus.present
          ? data.rbLocalFileStatus.value
          : this.rbLocalFileStatus,
      rbInProgress: data.rbInProgress.present
          ? data.rbInProgress.value
          : this.rbInProgress,
      rbProcessType: data.rbProcessType.present
          ? data.rbProcessType.value
          : this.rbProcessType,
      rbTempPath: data.rbTempPath.present
          ? data.rbTempPath.value
          : this.rbTempPath,
      rbPriority: data.rbPriority.present
          ? data.rbPriority.value
          : this.rbPriority,
      rbFileSizeDirty: data.rbFileSizeDirty.present
          ? data.rbFileSizeDirty.value
          : this.rbFileSizeDirty,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ContentFileData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbLocalFileStatus: $rbLocalFileStatus, ')
          ..write('rbInProgress: $rbInProgress, ')
          ..write('rbProcessType: $rbProcessType, ')
          ..write('rbTempPath: $rbTempPath, ')
          ..write('rbPriority: $rbPriority, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    contentID,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbLocalFileStatus,
    rbInProgress,
    rbProcessType,
    rbTempPath,
    rbPriority,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContentFileData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.path == this.path &&
          other.hash == this.hash &&
          other.size == this.size &&
          other.rbLocalPath == this.rbLocalPath &&
          other.rbInsyncHash == this.rbInsyncHash &&
          other.rbInsyncLocalUsn == this.rbInsyncLocalUsn &&
          other.rbFileHashDirty == this.rbFileHashDirty &&
          other.rbLocalFileStatus == this.rbLocalFileStatus &&
          other.rbInProgress == this.rbInProgress &&
          other.rbProcessType == this.rbProcessType &&
          other.rbTempPath == this.rbTempPath &&
          other.rbPriority == this.rbPriority &&
          other.rbFileSizeDirty == this.rbFileSizeDirty &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class ContentFileCompanion extends UpdateCompanion<ContentFileData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<String?> path;
  final Value<String?> hash;
  final Value<int?> size;
  final Value<String?> rbLocalPath;
  final Value<String?> rbInsyncHash;
  final Value<int?> rbInsyncLocalUsn;
  final Value<int?> rbFileHashDirty;
  final Value<int?> rbLocalFileStatus;
  final Value<int?> rbInProgress;
  final Value<int?> rbProcessType;
  final Value<String?> rbTempPath;
  final Value<int?> rbPriority;
  final Value<int?> rbFileSizeDirty;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const ContentFileCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbLocalFileStatus = const Value.absent(),
    this.rbInProgress = const Value.absent(),
    this.rbProcessType = const Value.absent(),
    this.rbTempPath = const Value.absent(),
    this.rbPriority = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  ContentFileCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbLocalFileStatus = const Value.absent(),
    this.rbInProgress = const Value.absent(),
    this.rbProcessType = const Value.absent(),
    this.rbTempPath = const Value.absent(),
    this.rbPriority = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<ContentFileData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<String>? path,
    Expression<String>? hash,
    Expression<int>? size,
    Expression<String>? rbLocalPath,
    Expression<String>? rbInsyncHash,
    Expression<int>? rbInsyncLocalUsn,
    Expression<int>? rbFileHashDirty,
    Expression<int>? rbLocalFileStatus,
    Expression<int>? rbInProgress,
    Expression<int>? rbProcessType,
    Expression<String>? rbTempPath,
    Expression<int>? rbPriority,
    Expression<int>? rbFileSizeDirty,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (path != null) 'Path': path,
      if (hash != null) 'Hash': hash,
      if (size != null) 'Size': size,
      if (rbLocalPath != null) 'rb_local_path': rbLocalPath,
      if (rbInsyncHash != null) 'rb_insync_hash': rbInsyncHash,
      if (rbInsyncLocalUsn != null) 'rb_insync_local_usn': rbInsyncLocalUsn,
      if (rbFileHashDirty != null) 'rb_file_hash_dirty': rbFileHashDirty,
      if (rbLocalFileStatus != null) 'rb_local_file_status': rbLocalFileStatus,
      if (rbInProgress != null) 'rb_in_progress': rbInProgress,
      if (rbProcessType != null) 'rb_process_type': rbProcessType,
      if (rbTempPath != null) 'rb_temp_path': rbTempPath,
      if (rbPriority != null) 'rb_priority': rbPriority,
      if (rbFileSizeDirty != null) 'rb_file_size_dirty': rbFileSizeDirty,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  ContentFileCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<String?>? path,
    Value<String?>? hash,
    Value<int?>? size,
    Value<String?>? rbLocalPath,
    Value<String?>? rbInsyncHash,
    Value<int?>? rbInsyncLocalUsn,
    Value<int?>? rbFileHashDirty,
    Value<int?>? rbLocalFileStatus,
    Value<int?>? rbInProgress,
    Value<int?>? rbProcessType,
    Value<String?>? rbTempPath,
    Value<int?>? rbPriority,
    Value<int?>? rbFileSizeDirty,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return ContentFileCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      path: path ?? this.path,
      hash: hash ?? this.hash,
      size: size ?? this.size,
      rbLocalPath: rbLocalPath ?? this.rbLocalPath,
      rbInsyncHash: rbInsyncHash ?? this.rbInsyncHash,
      rbInsyncLocalUsn: rbInsyncLocalUsn ?? this.rbInsyncLocalUsn,
      rbFileHashDirty: rbFileHashDirty ?? this.rbFileHashDirty,
      rbLocalFileStatus: rbLocalFileStatus ?? this.rbLocalFileStatus,
      rbInProgress: rbInProgress ?? this.rbInProgress,
      rbProcessType: rbProcessType ?? this.rbProcessType,
      rbTempPath: rbTempPath ?? this.rbTempPath,
      rbPriority: rbPriority ?? this.rbPriority,
      rbFileSizeDirty: rbFileSizeDirty ?? this.rbFileSizeDirty,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (path.present) {
      map['Path'] = Variable<String>(path.value);
    }
    if (hash.present) {
      map['Hash'] = Variable<String>(hash.value);
    }
    if (size.present) {
      map['Size'] = Variable<int>(size.value);
    }
    if (rbLocalPath.present) {
      map['rb_local_path'] = Variable<String>(rbLocalPath.value);
    }
    if (rbInsyncHash.present) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash.value);
    }
    if (rbInsyncLocalUsn.present) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn.value);
    }
    if (rbFileHashDirty.present) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty.value);
    }
    if (rbLocalFileStatus.present) {
      map['rb_local_file_status'] = Variable<int>(rbLocalFileStatus.value);
    }
    if (rbInProgress.present) {
      map['rb_in_progress'] = Variable<int>(rbInProgress.value);
    }
    if (rbProcessType.present) {
      map['rb_process_type'] = Variable<int>(rbProcessType.value);
    }
    if (rbTempPath.present) {
      map['rb_temp_path'] = Variable<String>(rbTempPath.value);
    }
    if (rbPriority.present) {
      map['rb_priority'] = Variable<int>(rbPriority.value);
    }
    if (rbFileSizeDirty.present) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContentFileCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbLocalFileStatus: $rbLocalFileStatus, ')
          ..write('rbInProgress: $rbInProgress, ')
          ..write('rbProcessType: $rbProcessType, ')
          ..write('rbTempPath: $rbTempPath, ')
          ..write('rbPriority: $rbPriority, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdActiveCensor extends Table
    with TableInfo<DjmdActiveCensor, DjmdActiveCensorData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdActiveCensor(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMsecMeta = const VerificationMeta('inMsec');
  late final GeneratedColumn<int> inMsec = GeneratedColumn<int>(
    'InMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMsecMeta = const VerificationMeta(
    'outMsec',
  );
  late final GeneratedColumn<int> outMsec = GeneratedColumn<int>(
    'OutMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _infoMeta = const VerificationMeta('info');
  late final GeneratedColumn<int> info = GeneratedColumn<int>(
    'Info',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parameterListMeta = const VerificationMeta(
    'parameterList',
  );
  late final GeneratedColumn<String> parameterList = GeneratedColumn<String>(
    'ParameterList',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentUUIDMeta = const VerificationMeta(
    'contentUUID',
  );
  late final GeneratedColumn<String> contentUUID = GeneratedColumn<String>(
    'ContentUUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    inMsec,
    outMsec,
    info,
    parameterList,
    contentUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdActiveCensor';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdActiveCensorData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('InMsec')) {
      context.handle(
        _inMsecMeta,
        inMsec.isAcceptableOrUnknown(data['InMsec']!, _inMsecMeta),
      );
    }
    if (data.containsKey('OutMsec')) {
      context.handle(
        _outMsecMeta,
        outMsec.isAcceptableOrUnknown(data['OutMsec']!, _outMsecMeta),
      );
    }
    if (data.containsKey('Info')) {
      context.handle(
        _infoMeta,
        info.isAcceptableOrUnknown(data['Info']!, _infoMeta),
      );
    }
    if (data.containsKey('ParameterList')) {
      context.handle(
        _parameterListMeta,
        parameterList.isAcceptableOrUnknown(
          data['ParameterList']!,
          _parameterListMeta,
        ),
      );
    }
    if (data.containsKey('ContentUUID')) {
      context.handle(
        _contentUUIDMeta,
        contentUUID.isAcceptableOrUnknown(
          data['ContentUUID']!,
          _contentUUIDMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdActiveCensorData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdActiveCensorData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      inMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMsec'],
      ),
      outMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMsec'],
      ),
      info: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Info'],
      ),
      parameterList: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParameterList'],
      ),
      contentUUID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentUUID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdActiveCensor createAlias(String alias) {
    return DjmdActiveCensor(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdActiveCensorData extends DataClass
    implements Insertable<DjmdActiveCensorData> {
  final String? id;
  final String? contentID;
  final int? inMsec;
  final int? outMsec;
  final int? info;
  final String? parameterList;
  final String? contentUUID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdActiveCensorData({
    this.id,
    this.contentID,
    this.inMsec,
    this.outMsec,
    this.info,
    this.parameterList,
    this.contentUUID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || inMsec != null) {
      map['InMsec'] = Variable<int>(inMsec);
    }
    if (!nullToAbsent || outMsec != null) {
      map['OutMsec'] = Variable<int>(outMsec);
    }
    if (!nullToAbsent || info != null) {
      map['Info'] = Variable<int>(info);
    }
    if (!nullToAbsent || parameterList != null) {
      map['ParameterList'] = Variable<String>(parameterList);
    }
    if (!nullToAbsent || contentUUID != null) {
      map['ContentUUID'] = Variable<String>(contentUUID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdActiveCensorCompanion toCompanion(bool nullToAbsent) {
    return DjmdActiveCensorCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      inMsec: inMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(inMsec),
      outMsec: outMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(outMsec),
      info: info == null && nullToAbsent ? const Value.absent() : Value(info),
      parameterList: parameterList == null && nullToAbsent
          ? const Value.absent()
          : Value(parameterList),
      contentUUID: contentUUID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentUUID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdActiveCensorData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdActiveCensorData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      inMsec: serializer.fromJson<int?>(json['InMsec']),
      outMsec: serializer.fromJson<int?>(json['OutMsec']),
      info: serializer.fromJson<int?>(json['Info']),
      parameterList: serializer.fromJson<String?>(json['ParameterList']),
      contentUUID: serializer.fromJson<String?>(json['ContentUUID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'InMsec': serializer.toJson<int?>(inMsec),
      'OutMsec': serializer.toJson<int?>(outMsec),
      'Info': serializer.toJson<int?>(info),
      'ParameterList': serializer.toJson<String?>(parameterList),
      'ContentUUID': serializer.toJson<String?>(contentUUID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdActiveCensorData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> inMsec = const Value.absent(),
    Value<int?> outMsec = const Value.absent(),
    Value<int?> info = const Value.absent(),
    Value<String?> parameterList = const Value.absent(),
    Value<String?> contentUUID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdActiveCensorData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    inMsec: inMsec.present ? inMsec.value : this.inMsec,
    outMsec: outMsec.present ? outMsec.value : this.outMsec,
    info: info.present ? info.value : this.info,
    parameterList: parameterList.present
        ? parameterList.value
        : this.parameterList,
    contentUUID: contentUUID.present ? contentUUID.value : this.contentUUID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdActiveCensorData copyWithCompanion(DjmdActiveCensorCompanion data) {
    return DjmdActiveCensorData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      inMsec: data.inMsec.present ? data.inMsec.value : this.inMsec,
      outMsec: data.outMsec.present ? data.outMsec.value : this.outMsec,
      info: data.info.present ? data.info.value : this.info,
      parameterList: data.parameterList.present
          ? data.parameterList.value
          : this.parameterList,
      contentUUID: data.contentUUID.present
          ? data.contentUUID.value
          : this.contentUUID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdActiveCensorData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('inMsec: $inMsec, ')
          ..write('outMsec: $outMsec, ')
          ..write('info: $info, ')
          ..write('parameterList: $parameterList, ')
          ..write('contentUUID: $contentUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID,
    inMsec,
    outMsec,
    info,
    parameterList,
    contentUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdActiveCensorData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.inMsec == this.inMsec &&
          other.outMsec == this.outMsec &&
          other.info == this.info &&
          other.parameterList == this.parameterList &&
          other.contentUUID == this.contentUUID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdActiveCensorCompanion extends UpdateCompanion<DjmdActiveCensorData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<int?> inMsec;
  final Value<int?> outMsec;
  final Value<int?> info;
  final Value<String?> parameterList;
  final Value<String?> contentUUID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdActiveCensorCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.info = const Value.absent(),
    this.parameterList = const Value.absent(),
    this.contentUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdActiveCensorCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.info = const Value.absent(),
    this.parameterList = const Value.absent(),
    this.contentUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdActiveCensorData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<int>? inMsec,
    Expression<int>? outMsec,
    Expression<int>? info,
    Expression<String>? parameterList,
    Expression<String>? contentUUID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (inMsec != null) 'InMsec': inMsec,
      if (outMsec != null) 'OutMsec': outMsec,
      if (info != null) 'Info': info,
      if (parameterList != null) 'ParameterList': parameterList,
      if (contentUUID != null) 'ContentUUID': contentUUID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdActiveCensorCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<int?>? inMsec,
    Value<int?>? outMsec,
    Value<int?>? info,
    Value<String?>? parameterList,
    Value<String?>? contentUUID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdActiveCensorCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      inMsec: inMsec ?? this.inMsec,
      outMsec: outMsec ?? this.outMsec,
      info: info ?? this.info,
      parameterList: parameterList ?? this.parameterList,
      contentUUID: contentUUID ?? this.contentUUID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (inMsec.present) {
      map['InMsec'] = Variable<int>(inMsec.value);
    }
    if (outMsec.present) {
      map['OutMsec'] = Variable<int>(outMsec.value);
    }
    if (info.present) {
      map['Info'] = Variable<int>(info.value);
    }
    if (parameterList.present) {
      map['ParameterList'] = Variable<String>(parameterList.value);
    }
    if (contentUUID.present) {
      map['ContentUUID'] = Variable<String>(contentUUID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdActiveCensorCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('inMsec: $inMsec, ')
          ..write('outMsec: $outMsec, ')
          ..write('info: $info, ')
          ..write('parameterList: $parameterList, ')
          ..write('contentUUID: $contentUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdAlbum extends Table with TableInfo<DjmdAlbum, DjmdAlbumData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdAlbum(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _albumArtistIDMeta = const VerificationMeta(
    'albumArtistID',
  );
  late final GeneratedColumn<String> albumArtistID = GeneratedColumn<String>(
    'AlbumArtistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imagePathMeta = const VerificationMeta(
    'imagePath',
  );
  late final GeneratedColumn<String> imagePath = GeneratedColumn<String>(
    'ImagePath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _compilationMeta = const VerificationMeta(
    'compilation',
  );
  late final GeneratedColumn<int> compilation = GeneratedColumn<int>(
    'Compilation',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _searchStrMeta = const VerificationMeta(
    'searchStr',
  );
  late final GeneratedColumn<String> searchStr = GeneratedColumn<String>(
    'SearchStr',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    name,
    albumArtistID,
    imagePath,
    compilation,
    searchStr,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdAlbum';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdAlbumData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('AlbumArtistID')) {
      context.handle(
        _albumArtistIDMeta,
        albumArtistID.isAcceptableOrUnknown(
          data['AlbumArtistID']!,
          _albumArtistIDMeta,
        ),
      );
    }
    if (data.containsKey('ImagePath')) {
      context.handle(
        _imagePathMeta,
        imagePath.isAcceptableOrUnknown(data['ImagePath']!, _imagePathMeta),
      );
    }
    if (data.containsKey('Compilation')) {
      context.handle(
        _compilationMeta,
        compilation.isAcceptableOrUnknown(
          data['Compilation']!,
          _compilationMeta,
        ),
      );
    }
    if (data.containsKey('SearchStr')) {
      context.handle(
        _searchStrMeta,
        searchStr.isAcceptableOrUnknown(data['SearchStr']!, _searchStrMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdAlbumData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdAlbumData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      albumArtistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}AlbumArtistID'],
      ),
      imagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ImagePath'],
      ),
      compilation: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Compilation'],
      ),
      searchStr: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SearchStr'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdAlbum createAlias(String alias) {
    return DjmdAlbum(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdAlbumData extends DataClass implements Insertable<DjmdAlbumData> {
  final String? id;
  final String? name;
  final String? albumArtistID;
  final String? imagePath;
  final int? compilation;
  final String? searchStr;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdAlbumData({
    this.id,
    this.name,
    this.albumArtistID,
    this.imagePath,
    this.compilation,
    this.searchStr,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || albumArtistID != null) {
      map['AlbumArtistID'] = Variable<String>(albumArtistID);
    }
    if (!nullToAbsent || imagePath != null) {
      map['ImagePath'] = Variable<String>(imagePath);
    }
    if (!nullToAbsent || compilation != null) {
      map['Compilation'] = Variable<int>(compilation);
    }
    if (!nullToAbsent || searchStr != null) {
      map['SearchStr'] = Variable<String>(searchStr);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdAlbumCompanion toCompanion(bool nullToAbsent) {
    return DjmdAlbumCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      albumArtistID: albumArtistID == null && nullToAbsent
          ? const Value.absent()
          : Value(albumArtistID),
      imagePath: imagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(imagePath),
      compilation: compilation == null && nullToAbsent
          ? const Value.absent()
          : Value(compilation),
      searchStr: searchStr == null && nullToAbsent
          ? const Value.absent()
          : Value(searchStr),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdAlbumData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdAlbumData(
      id: serializer.fromJson<String?>(json['ID']),
      name: serializer.fromJson<String?>(json['Name']),
      albumArtistID: serializer.fromJson<String?>(json['AlbumArtistID']),
      imagePath: serializer.fromJson<String?>(json['ImagePath']),
      compilation: serializer.fromJson<int?>(json['Compilation']),
      searchStr: serializer.fromJson<String?>(json['SearchStr']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Name': serializer.toJson<String?>(name),
      'AlbumArtistID': serializer.toJson<String?>(albumArtistID),
      'ImagePath': serializer.toJson<String?>(imagePath),
      'Compilation': serializer.toJson<int?>(compilation),
      'SearchStr': serializer.toJson<String?>(searchStr),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdAlbumData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> albumArtistID = const Value.absent(),
    Value<String?> imagePath = const Value.absent(),
    Value<int?> compilation = const Value.absent(),
    Value<String?> searchStr = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdAlbumData(
    id: id.present ? id.value : this.id,
    name: name.present ? name.value : this.name,
    albumArtistID: albumArtistID.present
        ? albumArtistID.value
        : this.albumArtistID,
    imagePath: imagePath.present ? imagePath.value : this.imagePath,
    compilation: compilation.present ? compilation.value : this.compilation,
    searchStr: searchStr.present ? searchStr.value : this.searchStr,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdAlbumData copyWithCompanion(DjmdAlbumCompanion data) {
    return DjmdAlbumData(
      id: data.id.present ? data.id.value : this.id,
      name: data.name.present ? data.name.value : this.name,
      albumArtistID: data.albumArtistID.present
          ? data.albumArtistID.value
          : this.albumArtistID,
      imagePath: data.imagePath.present ? data.imagePath.value : this.imagePath,
      compilation: data.compilation.present
          ? data.compilation.value
          : this.compilation,
      searchStr: data.searchStr.present ? data.searchStr.value : this.searchStr,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdAlbumData(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('albumArtistID: $albumArtistID, ')
          ..write('imagePath: $imagePath, ')
          ..write('compilation: $compilation, ')
          ..write('searchStr: $searchStr, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    name,
    albumArtistID,
    imagePath,
    compilation,
    searchStr,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdAlbumData &&
          other.id == this.id &&
          other.name == this.name &&
          other.albumArtistID == this.albumArtistID &&
          other.imagePath == this.imagePath &&
          other.compilation == this.compilation &&
          other.searchStr == this.searchStr &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdAlbumCompanion extends UpdateCompanion<DjmdAlbumData> {
  final Value<String?> id;
  final Value<String?> name;
  final Value<String?> albumArtistID;
  final Value<String?> imagePath;
  final Value<int?> compilation;
  final Value<String?> searchStr;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdAlbumCompanion({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.albumArtistID = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.compilation = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdAlbumCompanion.insert({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.albumArtistID = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.compilation = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdAlbumData> custom({
    Expression<String>? id,
    Expression<String>? name,
    Expression<String>? albumArtistID,
    Expression<String>? imagePath,
    Expression<int>? compilation,
    Expression<String>? searchStr,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (name != null) 'Name': name,
      if (albumArtistID != null) 'AlbumArtistID': albumArtistID,
      if (imagePath != null) 'ImagePath': imagePath,
      if (compilation != null) 'Compilation': compilation,
      if (searchStr != null) 'SearchStr': searchStr,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdAlbumCompanion copyWith({
    Value<String?>? id,
    Value<String?>? name,
    Value<String?>? albumArtistID,
    Value<String?>? imagePath,
    Value<int?>? compilation,
    Value<String?>? searchStr,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdAlbumCompanion(
      id: id ?? this.id,
      name: name ?? this.name,
      albumArtistID: albumArtistID ?? this.albumArtistID,
      imagePath: imagePath ?? this.imagePath,
      compilation: compilation ?? this.compilation,
      searchStr: searchStr ?? this.searchStr,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (albumArtistID.present) {
      map['AlbumArtistID'] = Variable<String>(albumArtistID.value);
    }
    if (imagePath.present) {
      map['ImagePath'] = Variable<String>(imagePath.value);
    }
    if (compilation.present) {
      map['Compilation'] = Variable<int>(compilation.value);
    }
    if (searchStr.present) {
      map['SearchStr'] = Variable<String>(searchStr.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdAlbumCompanion(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('albumArtistID: $albumArtistID, ')
          ..write('imagePath: $imagePath, ')
          ..write('compilation: $compilation, ')
          ..write('searchStr: $searchStr, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdArtist extends Table with TableInfo<DjmdArtist, DjmdArtistData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdArtist(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _searchStrMeta = const VerificationMeta(
    'searchStr',
  );
  late final GeneratedColumn<String> searchStr = GeneratedColumn<String>(
    'SearchStr',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    name,
    searchStr,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdArtist';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdArtistData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('SearchStr')) {
      context.handle(
        _searchStrMeta,
        searchStr.isAcceptableOrUnknown(data['SearchStr']!, _searchStrMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdArtistData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdArtistData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      searchStr: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SearchStr'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdArtist createAlias(String alias) {
    return DjmdArtist(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdArtistData extends DataClass implements Insertable<DjmdArtistData> {
  final String? id;
  final String? name;
  final String? searchStr;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdArtistData({
    this.id,
    this.name,
    this.searchStr,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || searchStr != null) {
      map['SearchStr'] = Variable<String>(searchStr);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdArtistCompanion toCompanion(bool nullToAbsent) {
    return DjmdArtistCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      searchStr: searchStr == null && nullToAbsent
          ? const Value.absent()
          : Value(searchStr),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdArtistData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdArtistData(
      id: serializer.fromJson<String?>(json['ID']),
      name: serializer.fromJson<String?>(json['Name']),
      searchStr: serializer.fromJson<String?>(json['SearchStr']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Name': serializer.toJson<String?>(name),
      'SearchStr': serializer.toJson<String?>(searchStr),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdArtistData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> searchStr = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdArtistData(
    id: id.present ? id.value : this.id,
    name: name.present ? name.value : this.name,
    searchStr: searchStr.present ? searchStr.value : this.searchStr,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdArtistData copyWithCompanion(DjmdArtistCompanion data) {
    return DjmdArtistData(
      id: data.id.present ? data.id.value : this.id,
      name: data.name.present ? data.name.value : this.name,
      searchStr: data.searchStr.present ? data.searchStr.value : this.searchStr,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdArtistData(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('searchStr: $searchStr, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    name,
    searchStr,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdArtistData &&
          other.id == this.id &&
          other.name == this.name &&
          other.searchStr == this.searchStr &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdArtistCompanion extends UpdateCompanion<DjmdArtistData> {
  final Value<String?> id;
  final Value<String?> name;
  final Value<String?> searchStr;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdArtistCompanion({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdArtistCompanion.insert({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdArtistData> custom({
    Expression<String>? id,
    Expression<String>? name,
    Expression<String>? searchStr,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (name != null) 'Name': name,
      if (searchStr != null) 'SearchStr': searchStr,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdArtistCompanion copyWith({
    Value<String?>? id,
    Value<String?>? name,
    Value<String?>? searchStr,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdArtistCompanion(
      id: id ?? this.id,
      name: name ?? this.name,
      searchStr: searchStr ?? this.searchStr,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (searchStr.present) {
      map['SearchStr'] = Variable<String>(searchStr.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdArtistCompanion(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('searchStr: $searchStr, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdCategory extends Table
    with TableInfo<DjmdCategory, DjmdCategoryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdCategory(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _menuItemIDMeta = const VerificationMeta(
    'menuItemID',
  );
  late final GeneratedColumn<String> menuItemID = GeneratedColumn<String>(
    'MenuItemID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _disableMeta = const VerificationMeta(
    'disable',
  );
  late final GeneratedColumn<int> disable = GeneratedColumn<int>(
    'Disable',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _infoOrderMeta = const VerificationMeta(
    'infoOrder',
  );
  late final GeneratedColumn<int> infoOrder = GeneratedColumn<int>(
    'InfoOrder',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    menuItemID,
    seq,
    disable,
    infoOrder,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdCategory';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdCategoryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('MenuItemID')) {
      context.handle(
        _menuItemIDMeta,
        menuItemID.isAcceptableOrUnknown(data['MenuItemID']!, _menuItemIDMeta),
      );
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Disable')) {
      context.handle(
        _disableMeta,
        disable.isAcceptableOrUnknown(data['Disable']!, _disableMeta),
      );
    }
    if (data.containsKey('InfoOrder')) {
      context.handle(
        _infoOrderMeta,
        infoOrder.isAcceptableOrUnknown(data['InfoOrder']!, _infoOrderMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdCategoryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdCategoryData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      menuItemID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MenuItemID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      disable: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Disable'],
      ),
      infoOrder: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InfoOrder'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdCategory createAlias(String alias) {
    return DjmdCategory(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdCategoryData extends DataClass
    implements Insertable<DjmdCategoryData> {
  final String? id;
  final String? menuItemID;
  final int? seq;
  final int? disable;
  final int? infoOrder;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdCategoryData({
    this.id,
    this.menuItemID,
    this.seq,
    this.disable,
    this.infoOrder,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || menuItemID != null) {
      map['MenuItemID'] = Variable<String>(menuItemID);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || disable != null) {
      map['Disable'] = Variable<int>(disable);
    }
    if (!nullToAbsent || infoOrder != null) {
      map['InfoOrder'] = Variable<int>(infoOrder);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdCategoryCompanion toCompanion(bool nullToAbsent) {
    return DjmdCategoryCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      menuItemID: menuItemID == null && nullToAbsent
          ? const Value.absent()
          : Value(menuItemID),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      disable: disable == null && nullToAbsent
          ? const Value.absent()
          : Value(disable),
      infoOrder: infoOrder == null && nullToAbsent
          ? const Value.absent()
          : Value(infoOrder),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdCategoryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdCategoryData(
      id: serializer.fromJson<String?>(json['ID']),
      menuItemID: serializer.fromJson<String?>(json['MenuItemID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      disable: serializer.fromJson<int?>(json['Disable']),
      infoOrder: serializer.fromJson<int?>(json['InfoOrder']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'MenuItemID': serializer.toJson<String?>(menuItemID),
      'Seq': serializer.toJson<int?>(seq),
      'Disable': serializer.toJson<int?>(disable),
      'InfoOrder': serializer.toJson<int?>(infoOrder),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdCategoryData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> menuItemID = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<int?> disable = const Value.absent(),
    Value<int?> infoOrder = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdCategoryData(
    id: id.present ? id.value : this.id,
    menuItemID: menuItemID.present ? menuItemID.value : this.menuItemID,
    seq: seq.present ? seq.value : this.seq,
    disable: disable.present ? disable.value : this.disable,
    infoOrder: infoOrder.present ? infoOrder.value : this.infoOrder,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdCategoryData copyWithCompanion(DjmdCategoryCompanion data) {
    return DjmdCategoryData(
      id: data.id.present ? data.id.value : this.id,
      menuItemID: data.menuItemID.present
          ? data.menuItemID.value
          : this.menuItemID,
      seq: data.seq.present ? data.seq.value : this.seq,
      disable: data.disable.present ? data.disable.value : this.disable,
      infoOrder: data.infoOrder.present ? data.infoOrder.value : this.infoOrder,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCategoryData(')
          ..write('id: $id, ')
          ..write('menuItemID: $menuItemID, ')
          ..write('seq: $seq, ')
          ..write('disable: $disable, ')
          ..write('infoOrder: $infoOrder, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    menuItemID,
    seq,
    disable,
    infoOrder,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdCategoryData &&
          other.id == this.id &&
          other.menuItemID == this.menuItemID &&
          other.seq == this.seq &&
          other.disable == this.disable &&
          other.infoOrder == this.infoOrder &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdCategoryCompanion extends UpdateCompanion<DjmdCategoryData> {
  final Value<String?> id;
  final Value<String?> menuItemID;
  final Value<int?> seq;
  final Value<int?> disable;
  final Value<int?> infoOrder;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdCategoryCompanion({
    this.id = const Value.absent(),
    this.menuItemID = const Value.absent(),
    this.seq = const Value.absent(),
    this.disable = const Value.absent(),
    this.infoOrder = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdCategoryCompanion.insert({
    this.id = const Value.absent(),
    this.menuItemID = const Value.absent(),
    this.seq = const Value.absent(),
    this.disable = const Value.absent(),
    this.infoOrder = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdCategoryData> custom({
    Expression<String>? id,
    Expression<String>? menuItemID,
    Expression<int>? seq,
    Expression<int>? disable,
    Expression<int>? infoOrder,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (menuItemID != null) 'MenuItemID': menuItemID,
      if (seq != null) 'Seq': seq,
      if (disable != null) 'Disable': disable,
      if (infoOrder != null) 'InfoOrder': infoOrder,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdCategoryCompanion copyWith({
    Value<String?>? id,
    Value<String?>? menuItemID,
    Value<int?>? seq,
    Value<int?>? disable,
    Value<int?>? infoOrder,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdCategoryCompanion(
      id: id ?? this.id,
      menuItemID: menuItemID ?? this.menuItemID,
      seq: seq ?? this.seq,
      disable: disable ?? this.disable,
      infoOrder: infoOrder ?? this.infoOrder,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (menuItemID.present) {
      map['MenuItemID'] = Variable<String>(menuItemID.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (disable.present) {
      map['Disable'] = Variable<int>(disable.value);
    }
    if (infoOrder.present) {
      map['InfoOrder'] = Variable<int>(infoOrder.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCategoryCompanion(')
          ..write('id: $id, ')
          ..write('menuItemID: $menuItemID, ')
          ..write('seq: $seq, ')
          ..write('disable: $disable, ')
          ..write('infoOrder: $infoOrder, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdCloudProperty extends Table
    with TableInfo<DjmdCloudProperty, DjmdCloudPropertyData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdCloudProperty(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _reserved1Meta = const VerificationMeta(
    'reserved1',
  );
  late final GeneratedColumn<String> reserved1 = GeneratedColumn<String>(
    'Reserved1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved2Meta = const VerificationMeta(
    'reserved2',
  );
  late final GeneratedColumn<String> reserved2 = GeneratedColumn<String>(
    'Reserved2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved3Meta = const VerificationMeta(
    'reserved3',
  );
  late final GeneratedColumn<String> reserved3 = GeneratedColumn<String>(
    'Reserved3',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved4Meta = const VerificationMeta(
    'reserved4',
  );
  late final GeneratedColumn<String> reserved4 = GeneratedColumn<String>(
    'Reserved4',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved5Meta = const VerificationMeta(
    'reserved5',
  );
  late final GeneratedColumn<String> reserved5 = GeneratedColumn<String>(
    'Reserved5',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    reserved5,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdCloudProperty';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdCloudPropertyData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Reserved1')) {
      context.handle(
        _reserved1Meta,
        reserved1.isAcceptableOrUnknown(data['Reserved1']!, _reserved1Meta),
      );
    }
    if (data.containsKey('Reserved2')) {
      context.handle(
        _reserved2Meta,
        reserved2.isAcceptableOrUnknown(data['Reserved2']!, _reserved2Meta),
      );
    }
    if (data.containsKey('Reserved3')) {
      context.handle(
        _reserved3Meta,
        reserved3.isAcceptableOrUnknown(data['Reserved3']!, _reserved3Meta),
      );
    }
    if (data.containsKey('Reserved4')) {
      context.handle(
        _reserved4Meta,
        reserved4.isAcceptableOrUnknown(data['Reserved4']!, _reserved4Meta),
      );
    }
    if (data.containsKey('Reserved5')) {
      context.handle(
        _reserved5Meta,
        reserved5.isAcceptableOrUnknown(data['Reserved5']!, _reserved5Meta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdCloudPropertyData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdCloudPropertyData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      reserved1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved1'],
      ),
      reserved2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved2'],
      ),
      reserved3: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved3'],
      ),
      reserved4: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved4'],
      ),
      reserved5: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved5'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdCloudProperty createAlias(String alias) {
    return DjmdCloudProperty(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdCloudPropertyData extends DataClass
    implements Insertable<DjmdCloudPropertyData> {
  final String? id;
  final String? reserved1;
  final String? reserved2;
  final String? reserved3;
  final String? reserved4;
  final String? reserved5;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdCloudPropertyData({
    this.id,
    this.reserved1,
    this.reserved2,
    this.reserved3,
    this.reserved4,
    this.reserved5,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || reserved1 != null) {
      map['Reserved1'] = Variable<String>(reserved1);
    }
    if (!nullToAbsent || reserved2 != null) {
      map['Reserved2'] = Variable<String>(reserved2);
    }
    if (!nullToAbsent || reserved3 != null) {
      map['Reserved3'] = Variable<String>(reserved3);
    }
    if (!nullToAbsent || reserved4 != null) {
      map['Reserved4'] = Variable<String>(reserved4);
    }
    if (!nullToAbsent || reserved5 != null) {
      map['Reserved5'] = Variable<String>(reserved5);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdCloudPropertyCompanion toCompanion(bool nullToAbsent) {
    return DjmdCloudPropertyCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      reserved1: reserved1 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved1),
      reserved2: reserved2 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved2),
      reserved3: reserved3 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved3),
      reserved4: reserved4 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved4),
      reserved5: reserved5 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved5),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdCloudPropertyData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdCloudPropertyData(
      id: serializer.fromJson<String?>(json['ID']),
      reserved1: serializer.fromJson<String?>(json['Reserved1']),
      reserved2: serializer.fromJson<String?>(json['Reserved2']),
      reserved3: serializer.fromJson<String?>(json['Reserved3']),
      reserved4: serializer.fromJson<String?>(json['Reserved4']),
      reserved5: serializer.fromJson<String?>(json['Reserved5']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Reserved1': serializer.toJson<String?>(reserved1),
      'Reserved2': serializer.toJson<String?>(reserved2),
      'Reserved3': serializer.toJson<String?>(reserved3),
      'Reserved4': serializer.toJson<String?>(reserved4),
      'Reserved5': serializer.toJson<String?>(reserved5),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdCloudPropertyData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> reserved1 = const Value.absent(),
    Value<String?> reserved2 = const Value.absent(),
    Value<String?> reserved3 = const Value.absent(),
    Value<String?> reserved4 = const Value.absent(),
    Value<String?> reserved5 = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdCloudPropertyData(
    id: id.present ? id.value : this.id,
    reserved1: reserved1.present ? reserved1.value : this.reserved1,
    reserved2: reserved2.present ? reserved2.value : this.reserved2,
    reserved3: reserved3.present ? reserved3.value : this.reserved3,
    reserved4: reserved4.present ? reserved4.value : this.reserved4,
    reserved5: reserved5.present ? reserved5.value : this.reserved5,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdCloudPropertyData copyWithCompanion(DjmdCloudPropertyCompanion data) {
    return DjmdCloudPropertyData(
      id: data.id.present ? data.id.value : this.id,
      reserved1: data.reserved1.present ? data.reserved1.value : this.reserved1,
      reserved2: data.reserved2.present ? data.reserved2.value : this.reserved2,
      reserved3: data.reserved3.present ? data.reserved3.value : this.reserved3,
      reserved4: data.reserved4.present ? data.reserved4.value : this.reserved4,
      reserved5: data.reserved5.present ? data.reserved5.value : this.reserved5,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCloudPropertyData(')
          ..write('id: $id, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('reserved5: $reserved5, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    reserved5,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdCloudPropertyData &&
          other.id == this.id &&
          other.reserved1 == this.reserved1 &&
          other.reserved2 == this.reserved2 &&
          other.reserved3 == this.reserved3 &&
          other.reserved4 == this.reserved4 &&
          other.reserved5 == this.reserved5 &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdCloudPropertyCompanion
    extends UpdateCompanion<DjmdCloudPropertyData> {
  final Value<String?> id;
  final Value<String?> reserved1;
  final Value<String?> reserved2;
  final Value<String?> reserved3;
  final Value<String?> reserved4;
  final Value<String?> reserved5;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdCloudPropertyCompanion({
    this.id = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.reserved5 = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdCloudPropertyCompanion.insert({
    this.id = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.reserved5 = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdCloudPropertyData> custom({
    Expression<String>? id,
    Expression<String>? reserved1,
    Expression<String>? reserved2,
    Expression<String>? reserved3,
    Expression<String>? reserved4,
    Expression<String>? reserved5,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (reserved1 != null) 'Reserved1': reserved1,
      if (reserved2 != null) 'Reserved2': reserved2,
      if (reserved3 != null) 'Reserved3': reserved3,
      if (reserved4 != null) 'Reserved4': reserved4,
      if (reserved5 != null) 'Reserved5': reserved5,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdCloudPropertyCompanion copyWith({
    Value<String?>? id,
    Value<String?>? reserved1,
    Value<String?>? reserved2,
    Value<String?>? reserved3,
    Value<String?>? reserved4,
    Value<String?>? reserved5,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdCloudPropertyCompanion(
      id: id ?? this.id,
      reserved1: reserved1 ?? this.reserved1,
      reserved2: reserved2 ?? this.reserved2,
      reserved3: reserved3 ?? this.reserved3,
      reserved4: reserved4 ?? this.reserved4,
      reserved5: reserved5 ?? this.reserved5,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (reserved1.present) {
      map['Reserved1'] = Variable<String>(reserved1.value);
    }
    if (reserved2.present) {
      map['Reserved2'] = Variable<String>(reserved2.value);
    }
    if (reserved3.present) {
      map['Reserved3'] = Variable<String>(reserved3.value);
    }
    if (reserved4.present) {
      map['Reserved4'] = Variable<String>(reserved4.value);
    }
    if (reserved5.present) {
      map['Reserved5'] = Variable<String>(reserved5.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCloudPropertyCompanion(')
          ..write('id: $id, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('reserved5: $reserved5, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdColor extends Table with TableInfo<DjmdColor, DjmdColorData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdColor(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _colorCodeMeta = const VerificationMeta(
    'colorCode',
  );
  late final GeneratedColumn<int> colorCode = GeneratedColumn<int>(
    'ColorCode',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _sortKeyMeta = const VerificationMeta(
    'sortKey',
  );
  late final GeneratedColumn<int> sortKey = GeneratedColumn<int>(
    'SortKey',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _commntMeta = const VerificationMeta('commnt');
  late final GeneratedColumn<String> commnt = GeneratedColumn<String>(
    'Commnt',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    colorCode,
    sortKey,
    commnt,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdColor';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdColorData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ColorCode')) {
      context.handle(
        _colorCodeMeta,
        colorCode.isAcceptableOrUnknown(data['ColorCode']!, _colorCodeMeta),
      );
    }
    if (data.containsKey('SortKey')) {
      context.handle(
        _sortKeyMeta,
        sortKey.isAcceptableOrUnknown(data['SortKey']!, _sortKeyMeta),
      );
    }
    if (data.containsKey('Commnt')) {
      context.handle(
        _commntMeta,
        commnt.isAcceptableOrUnknown(data['Commnt']!, _commntMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdColorData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdColorData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      colorCode: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ColorCode'],
      ),
      sortKey: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}SortKey'],
      ),
      commnt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Commnt'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdColor createAlias(String alias) {
    return DjmdColor(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdColorData extends DataClass implements Insertable<DjmdColorData> {
  final String? id;
  final int? colorCode;
  final int? sortKey;
  final String? commnt;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdColorData({
    this.id,
    this.colorCode,
    this.sortKey,
    this.commnt,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || colorCode != null) {
      map['ColorCode'] = Variable<int>(colorCode);
    }
    if (!nullToAbsent || sortKey != null) {
      map['SortKey'] = Variable<int>(sortKey);
    }
    if (!nullToAbsent || commnt != null) {
      map['Commnt'] = Variable<String>(commnt);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdColorCompanion toCompanion(bool nullToAbsent) {
    return DjmdColorCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      colorCode: colorCode == null && nullToAbsent
          ? const Value.absent()
          : Value(colorCode),
      sortKey: sortKey == null && nullToAbsent
          ? const Value.absent()
          : Value(sortKey),
      commnt: commnt == null && nullToAbsent
          ? const Value.absent()
          : Value(commnt),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdColorData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdColorData(
      id: serializer.fromJson<String?>(json['ID']),
      colorCode: serializer.fromJson<int?>(json['ColorCode']),
      sortKey: serializer.fromJson<int?>(json['SortKey']),
      commnt: serializer.fromJson<String?>(json['Commnt']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ColorCode': serializer.toJson<int?>(colorCode),
      'SortKey': serializer.toJson<int?>(sortKey),
      'Commnt': serializer.toJson<String?>(commnt),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdColorData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> colorCode = const Value.absent(),
    Value<int?> sortKey = const Value.absent(),
    Value<String?> commnt = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdColorData(
    id: id.present ? id.value : this.id,
    colorCode: colorCode.present ? colorCode.value : this.colorCode,
    sortKey: sortKey.present ? sortKey.value : this.sortKey,
    commnt: commnt.present ? commnt.value : this.commnt,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdColorData copyWithCompanion(DjmdColorCompanion data) {
    return DjmdColorData(
      id: data.id.present ? data.id.value : this.id,
      colorCode: data.colorCode.present ? data.colorCode.value : this.colorCode,
      sortKey: data.sortKey.present ? data.sortKey.value : this.sortKey,
      commnt: data.commnt.present ? data.commnt.value : this.commnt,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdColorData(')
          ..write('id: $id, ')
          ..write('colorCode: $colorCode, ')
          ..write('sortKey: $sortKey, ')
          ..write('commnt: $commnt, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    colorCode,
    sortKey,
    commnt,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdColorData &&
          other.id == this.id &&
          other.colorCode == this.colorCode &&
          other.sortKey == this.sortKey &&
          other.commnt == this.commnt &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdColorCompanion extends UpdateCompanion<DjmdColorData> {
  final Value<String?> id;
  final Value<int?> colorCode;
  final Value<int?> sortKey;
  final Value<String?> commnt;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdColorCompanion({
    this.id = const Value.absent(),
    this.colorCode = const Value.absent(),
    this.sortKey = const Value.absent(),
    this.commnt = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdColorCompanion.insert({
    this.id = const Value.absent(),
    this.colorCode = const Value.absent(),
    this.sortKey = const Value.absent(),
    this.commnt = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdColorData> custom({
    Expression<String>? id,
    Expression<int>? colorCode,
    Expression<int>? sortKey,
    Expression<String>? commnt,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (colorCode != null) 'ColorCode': colorCode,
      if (sortKey != null) 'SortKey': sortKey,
      if (commnt != null) 'Commnt': commnt,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdColorCompanion copyWith({
    Value<String?>? id,
    Value<int?>? colorCode,
    Value<int?>? sortKey,
    Value<String?>? commnt,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdColorCompanion(
      id: id ?? this.id,
      colorCode: colorCode ?? this.colorCode,
      sortKey: sortKey ?? this.sortKey,
      commnt: commnt ?? this.commnt,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (colorCode.present) {
      map['ColorCode'] = Variable<int>(colorCode.value);
    }
    if (sortKey.present) {
      map['SortKey'] = Variable<int>(sortKey.value);
    }
    if (commnt.present) {
      map['Commnt'] = Variable<String>(commnt.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdColorCompanion(')
          ..write('id: $id, ')
          ..write('colorCode: $colorCode, ')
          ..write('sortKey: $sortKey, ')
          ..write('commnt: $commnt, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdContent extends Table with TableInfo<DjmdContent, DjmdContentData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdContent(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _folderPathMeta = const VerificationMeta(
    'folderPath',
  );
  late final GeneratedColumn<String> folderPath = GeneratedColumn<String>(
    'FolderPath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _fileNameLMeta = const VerificationMeta(
    'fileNameL',
  );
  late final GeneratedColumn<String> fileNameL = GeneratedColumn<String>(
    'FileNameL',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _fileNameSMeta = const VerificationMeta(
    'fileNameS',
  );
  late final GeneratedColumn<String> fileNameS = GeneratedColumn<String>(
    'FileNameS',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _titleMeta = const VerificationMeta('title');
  late final GeneratedColumn<String> title = GeneratedColumn<String>(
    'Title',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _artistIDMeta = const VerificationMeta(
    'artistID',
  );
  late final GeneratedColumn<String> artistID = GeneratedColumn<String>(
    'ArtistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _albumIDMeta = const VerificationMeta(
    'albumID',
  );
  late final GeneratedColumn<String> albumID = GeneratedColumn<String>(
    'AlbumID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _genreIDMeta = const VerificationMeta(
    'genreID',
  );
  late final GeneratedColumn<String> genreID = GeneratedColumn<String>(
    'GenreID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _bpmMeta = const VerificationMeta('bpm');
  late final GeneratedColumn<int> bpm = GeneratedColumn<int>(
    'BPM',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _lengthMeta = const VerificationMeta('length');
  late final GeneratedColumn<int> length = GeneratedColumn<int>(
    'Length',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _bitRateMeta = const VerificationMeta(
    'bitRate',
  );
  late final GeneratedColumn<int> bitRate = GeneratedColumn<int>(
    'BitRate',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _bitDepthMeta = const VerificationMeta(
    'bitDepth',
  );
  late final GeneratedColumn<int> bitDepth = GeneratedColumn<int>(
    'BitDepth',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _commntMeta = const VerificationMeta('commnt');
  late final GeneratedColumn<String> commnt = GeneratedColumn<String>(
    'Commnt',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _fileTypeMeta = const VerificationMeta(
    'fileType',
  );
  late final GeneratedColumn<int> fileType = GeneratedColumn<int>(
    'FileType',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _ratingMeta = const VerificationMeta('rating');
  late final GeneratedColumn<int> rating = GeneratedColumn<int>(
    'Rating',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _releaseYearMeta = const VerificationMeta(
    'releaseYear',
  );
  late final GeneratedColumn<int> releaseYear = GeneratedColumn<int>(
    'ReleaseYear',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _remixerIDMeta = const VerificationMeta(
    'remixerID',
  );
  late final GeneratedColumn<String> remixerID = GeneratedColumn<String>(
    'RemixerID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _labelIDMeta = const VerificationMeta(
    'labelID',
  );
  late final GeneratedColumn<String> labelID = GeneratedColumn<String>(
    'LabelID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _orgArtistIDMeta = const VerificationMeta(
    'orgArtistID',
  );
  late final GeneratedColumn<String> orgArtistID = GeneratedColumn<String>(
    'OrgArtistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _keyIDMeta = const VerificationMeta('keyID');
  late final GeneratedColumn<String> keyID = GeneratedColumn<String>(
    'KeyID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _stockDateMeta = const VerificationMeta(
    'stockDate',
  );
  late final GeneratedColumn<String> stockDate = GeneratedColumn<String>(
    'StockDate',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _colorIDMeta = const VerificationMeta(
    'colorID',
  );
  late final GeneratedColumn<String> colorID = GeneratedColumn<String>(
    'ColorID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _dJPlayCountMeta = const VerificationMeta(
    'dJPlayCount',
  );
  late final GeneratedColumn<int> dJPlayCount = GeneratedColumn<int>(
    'DJPlayCount',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imagePathMeta = const VerificationMeta(
    'imagePath',
  );
  late final GeneratedColumn<String> imagePath = GeneratedColumn<String>(
    'ImagePath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _masterDBIDMeta = const VerificationMeta(
    'masterDBID',
  );
  late final GeneratedColumn<String> masterDBID = GeneratedColumn<String>(
    'MasterDBID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _masterSongIDMeta = const VerificationMeta(
    'masterSongID',
  );
  late final GeneratedColumn<String> masterSongID = GeneratedColumn<String>(
    'MasterSongID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _analysisDataPathMeta = const VerificationMeta(
    'analysisDataPath',
  );
  late final GeneratedColumn<String> analysisDataPath = GeneratedColumn<String>(
    'AnalysisDataPath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _searchStrMeta = const VerificationMeta(
    'searchStr',
  );
  late final GeneratedColumn<String> searchStr = GeneratedColumn<String>(
    'SearchStr',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _fileSizeMeta = const VerificationMeta(
    'fileSize',
  );
  late final GeneratedColumn<int> fileSize = GeneratedColumn<int>(
    'FileSize',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _discNoMeta = const VerificationMeta('discNo');
  late final GeneratedColumn<int> discNo = GeneratedColumn<int>(
    'DiscNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _composerIDMeta = const VerificationMeta(
    'composerID',
  );
  late final GeneratedColumn<String> composerID = GeneratedColumn<String>(
    'ComposerID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _subtitleMeta = const VerificationMeta(
    'subtitle',
  );
  late final GeneratedColumn<String> subtitle = GeneratedColumn<String>(
    'Subtitle',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _sampleRateMeta = const VerificationMeta(
    'sampleRate',
  );
  late final GeneratedColumn<int> sampleRate = GeneratedColumn<int>(
    'SampleRate',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _disableQuantizeMeta = const VerificationMeta(
    'disableQuantize',
  );
  late final GeneratedColumn<int> disableQuantize = GeneratedColumn<int>(
    'DisableQuantize',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _analysedMeta = const VerificationMeta(
    'analysed',
  );
  late final GeneratedColumn<int> analysed = GeneratedColumn<int>(
    'Analysed',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _releaseDateMeta = const VerificationMeta(
    'releaseDate',
  );
  late final GeneratedColumn<String> releaseDate = GeneratedColumn<String>(
    'ReleaseDate',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _dateCreatedMeta = const VerificationMeta(
    'dateCreated',
  );
  late final GeneratedColumn<String> dateCreated = GeneratedColumn<String>(
    'DateCreated',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentLinkMeta = const VerificationMeta(
    'contentLink',
  );
  late final GeneratedColumn<int> contentLink = GeneratedColumn<int>(
    'ContentLink',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _tagMeta = const VerificationMeta('tag');
  late final GeneratedColumn<String> tag = GeneratedColumn<String>(
    'Tag',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _modifiedByRBMMeta = const VerificationMeta(
    'modifiedByRBM',
  );
  late final GeneratedColumn<String> modifiedByRBM = GeneratedColumn<String>(
    'ModifiedByRBM',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _hotCueAutoLoadMeta = const VerificationMeta(
    'hotCueAutoLoad',
  );
  late final GeneratedColumn<String> hotCueAutoLoad = GeneratedColumn<String>(
    'HotCueAutoLoad',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _deliveryControlMeta = const VerificationMeta(
    'deliveryControl',
  );
  late final GeneratedColumn<String> deliveryControl = GeneratedColumn<String>(
    'DeliveryControl',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _deliveryCommentMeta = const VerificationMeta(
    'deliveryComment',
  );
  late final GeneratedColumn<String> deliveryComment = GeneratedColumn<String>(
    'DeliveryComment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cueUpdatedMeta = const VerificationMeta(
    'cueUpdated',
  );
  late final GeneratedColumn<String> cueUpdated = GeneratedColumn<String>(
    'CueUpdated',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _analysisUpdatedMeta = const VerificationMeta(
    'analysisUpdated',
  );
  late final GeneratedColumn<String> analysisUpdated = GeneratedColumn<String>(
    'AnalysisUpdated',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackInfoUpdatedMeta = const VerificationMeta(
    'trackInfoUpdated',
  );
  late final GeneratedColumn<String> trackInfoUpdated = GeneratedColumn<String>(
    'TrackInfoUpdated',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _lyricistMeta = const VerificationMeta(
    'lyricist',
  );
  late final GeneratedColumn<String> lyricist = GeneratedColumn<String>(
    'Lyricist',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _isrcMeta = const VerificationMeta('isrc');
  late final GeneratedColumn<String> isrc = GeneratedColumn<String>(
    'ISRC',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _samplerTrackInfoMeta = const VerificationMeta(
    'samplerTrackInfo',
  );
  late final GeneratedColumn<int> samplerTrackInfo = GeneratedColumn<int>(
    'SamplerTrackInfo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _samplerPlayOffsetMeta = const VerificationMeta(
    'samplerPlayOffset',
  );
  late final GeneratedColumn<int> samplerPlayOffset = GeneratedColumn<int>(
    'SamplerPlayOffset',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _samplerGainMeta = const VerificationMeta(
    'samplerGain',
  );
  late final GeneratedColumn<double> samplerGain = GeneratedColumn<double>(
    'SamplerGain',
    aliasedName,
    true,
    type: DriftSqlType.double,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _videoAssociateMeta = const VerificationMeta(
    'videoAssociate',
  );
  late final GeneratedColumn<String> videoAssociate = GeneratedColumn<String>(
    'VideoAssociate',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _lyricStatusMeta = const VerificationMeta(
    'lyricStatus',
  );
  late final GeneratedColumn<int> lyricStatus = GeneratedColumn<int>(
    'LyricStatus',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _serviceIDMeta = const VerificationMeta(
    'serviceID',
  );
  late final GeneratedColumn<int> serviceID = GeneratedColumn<int>(
    'ServiceID',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _orgFolderPathMeta = const VerificationMeta(
    'orgFolderPath',
  );
  late final GeneratedColumn<String> orgFolderPath = GeneratedColumn<String>(
    'OrgFolderPath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved1Meta = const VerificationMeta(
    'reserved1',
  );
  late final GeneratedColumn<String> reserved1 = GeneratedColumn<String>(
    'Reserved1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved2Meta = const VerificationMeta(
    'reserved2',
  );
  late final GeneratedColumn<String> reserved2 = GeneratedColumn<String>(
    'Reserved2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved3Meta = const VerificationMeta(
    'reserved3',
  );
  late final GeneratedColumn<String> reserved3 = GeneratedColumn<String>(
    'Reserved3',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved4Meta = const VerificationMeta(
    'reserved4',
  );
  late final GeneratedColumn<String> reserved4 = GeneratedColumn<String>(
    'Reserved4',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _extInfoMeta = const VerificationMeta(
    'extInfo',
  );
  late final GeneratedColumn<String> extInfo = GeneratedColumn<String>(
    'ExtInfo',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbFileIdMeta = const VerificationMeta(
    'rbFileId',
  );
  late final GeneratedColumn<String> rbFileId = GeneratedColumn<String>(
    'rb_file_id',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _deviceIDMeta = const VerificationMeta(
    'deviceID',
  );
  late final GeneratedColumn<String> deviceID = GeneratedColumn<String>(
    'DeviceID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalFolderPathMeta = const VerificationMeta(
    'rbLocalFolderPath',
  );
  late final GeneratedColumn<String> rbLocalFolderPath =
      GeneratedColumn<String>(
        'rb_LocalFolderPath',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
        $customConstraints: 'DEFAULT NULL',
        defaultValue: const CustomExpression('NULL'),
      );
  static const VerificationMeta _srcIDMeta = const VerificationMeta('srcID');
  late final GeneratedColumn<String> srcID = GeneratedColumn<String>(
    'SrcID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _srcTitleMeta = const VerificationMeta(
    'srcTitle',
  );
  late final GeneratedColumn<String> srcTitle = GeneratedColumn<String>(
    'SrcTitle',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _srcArtistNameMeta = const VerificationMeta(
    'srcArtistName',
  );
  late final GeneratedColumn<String> srcArtistName = GeneratedColumn<String>(
    'SrcArtistName',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _srcAlbumNameMeta = const VerificationMeta(
    'srcAlbumName',
  );
  late final GeneratedColumn<String> srcAlbumName = GeneratedColumn<String>(
    'SrcAlbumName',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _srcLengthMeta = const VerificationMeta(
    'srcLength',
  );
  late final GeneratedColumn<int> srcLength = GeneratedColumn<int>(
    'SrcLength',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    folderPath,
    fileNameL,
    fileNameS,
    title,
    artistID,
    albumID,
    genreID,
    bpm,
    length,
    trackNo,
    bitRate,
    bitDepth,
    commnt,
    fileType,
    rating,
    releaseYear,
    remixerID,
    labelID,
    orgArtistID,
    keyID,
    stockDate,
    colorID,
    dJPlayCount,
    imagePath,
    masterDBID,
    masterSongID,
    analysisDataPath,
    searchStr,
    fileSize,
    discNo,
    composerID,
    subtitle,
    sampleRate,
    disableQuantize,
    analysed,
    releaseDate,
    dateCreated,
    contentLink,
    tag,
    modifiedByRBM,
    hotCueAutoLoad,
    deliveryControl,
    deliveryComment,
    cueUpdated,
    analysisUpdated,
    trackInfoUpdated,
    lyricist,
    isrc,
    samplerTrackInfo,
    samplerPlayOffset,
    samplerGain,
    videoAssociate,
    lyricStatus,
    serviceID,
    orgFolderPath,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    extInfo,
    rbFileId,
    deviceID,
    rbLocalFolderPath,
    srcID,
    srcTitle,
    srcArtistName,
    srcAlbumName,
    srcLength,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdContent';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdContentData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('FolderPath')) {
      context.handle(
        _folderPathMeta,
        folderPath.isAcceptableOrUnknown(data['FolderPath']!, _folderPathMeta),
      );
    }
    if (data.containsKey('FileNameL')) {
      context.handle(
        _fileNameLMeta,
        fileNameL.isAcceptableOrUnknown(data['FileNameL']!, _fileNameLMeta),
      );
    }
    if (data.containsKey('FileNameS')) {
      context.handle(
        _fileNameSMeta,
        fileNameS.isAcceptableOrUnknown(data['FileNameS']!, _fileNameSMeta),
      );
    }
    if (data.containsKey('Title')) {
      context.handle(
        _titleMeta,
        title.isAcceptableOrUnknown(data['Title']!, _titleMeta),
      );
    }
    if (data.containsKey('ArtistID')) {
      context.handle(
        _artistIDMeta,
        artistID.isAcceptableOrUnknown(data['ArtistID']!, _artistIDMeta),
      );
    }
    if (data.containsKey('AlbumID')) {
      context.handle(
        _albumIDMeta,
        albumID.isAcceptableOrUnknown(data['AlbumID']!, _albumIDMeta),
      );
    }
    if (data.containsKey('GenreID')) {
      context.handle(
        _genreIDMeta,
        genreID.isAcceptableOrUnknown(data['GenreID']!, _genreIDMeta),
      );
    }
    if (data.containsKey('BPM')) {
      context.handle(
        _bpmMeta,
        bpm.isAcceptableOrUnknown(data['BPM']!, _bpmMeta),
      );
    }
    if (data.containsKey('Length')) {
      context.handle(
        _lengthMeta,
        length.isAcceptableOrUnknown(data['Length']!, _lengthMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('BitRate')) {
      context.handle(
        _bitRateMeta,
        bitRate.isAcceptableOrUnknown(data['BitRate']!, _bitRateMeta),
      );
    }
    if (data.containsKey('BitDepth')) {
      context.handle(
        _bitDepthMeta,
        bitDepth.isAcceptableOrUnknown(data['BitDepth']!, _bitDepthMeta),
      );
    }
    if (data.containsKey('Commnt')) {
      context.handle(
        _commntMeta,
        commnt.isAcceptableOrUnknown(data['Commnt']!, _commntMeta),
      );
    }
    if (data.containsKey('FileType')) {
      context.handle(
        _fileTypeMeta,
        fileType.isAcceptableOrUnknown(data['FileType']!, _fileTypeMeta),
      );
    }
    if (data.containsKey('Rating')) {
      context.handle(
        _ratingMeta,
        rating.isAcceptableOrUnknown(data['Rating']!, _ratingMeta),
      );
    }
    if (data.containsKey('ReleaseYear')) {
      context.handle(
        _releaseYearMeta,
        releaseYear.isAcceptableOrUnknown(
          data['ReleaseYear']!,
          _releaseYearMeta,
        ),
      );
    }
    if (data.containsKey('RemixerID')) {
      context.handle(
        _remixerIDMeta,
        remixerID.isAcceptableOrUnknown(data['RemixerID']!, _remixerIDMeta),
      );
    }
    if (data.containsKey('LabelID')) {
      context.handle(
        _labelIDMeta,
        labelID.isAcceptableOrUnknown(data['LabelID']!, _labelIDMeta),
      );
    }
    if (data.containsKey('OrgArtistID')) {
      context.handle(
        _orgArtistIDMeta,
        orgArtistID.isAcceptableOrUnknown(
          data['OrgArtistID']!,
          _orgArtistIDMeta,
        ),
      );
    }
    if (data.containsKey('KeyID')) {
      context.handle(
        _keyIDMeta,
        keyID.isAcceptableOrUnknown(data['KeyID']!, _keyIDMeta),
      );
    }
    if (data.containsKey('StockDate')) {
      context.handle(
        _stockDateMeta,
        stockDate.isAcceptableOrUnknown(data['StockDate']!, _stockDateMeta),
      );
    }
    if (data.containsKey('ColorID')) {
      context.handle(
        _colorIDMeta,
        colorID.isAcceptableOrUnknown(data['ColorID']!, _colorIDMeta),
      );
    }
    if (data.containsKey('DJPlayCount')) {
      context.handle(
        _dJPlayCountMeta,
        dJPlayCount.isAcceptableOrUnknown(
          data['DJPlayCount']!,
          _dJPlayCountMeta,
        ),
      );
    }
    if (data.containsKey('ImagePath')) {
      context.handle(
        _imagePathMeta,
        imagePath.isAcceptableOrUnknown(data['ImagePath']!, _imagePathMeta),
      );
    }
    if (data.containsKey('MasterDBID')) {
      context.handle(
        _masterDBIDMeta,
        masterDBID.isAcceptableOrUnknown(data['MasterDBID']!, _masterDBIDMeta),
      );
    }
    if (data.containsKey('MasterSongID')) {
      context.handle(
        _masterSongIDMeta,
        masterSongID.isAcceptableOrUnknown(
          data['MasterSongID']!,
          _masterSongIDMeta,
        ),
      );
    }
    if (data.containsKey('AnalysisDataPath')) {
      context.handle(
        _analysisDataPathMeta,
        analysisDataPath.isAcceptableOrUnknown(
          data['AnalysisDataPath']!,
          _analysisDataPathMeta,
        ),
      );
    }
    if (data.containsKey('SearchStr')) {
      context.handle(
        _searchStrMeta,
        searchStr.isAcceptableOrUnknown(data['SearchStr']!, _searchStrMeta),
      );
    }
    if (data.containsKey('FileSize')) {
      context.handle(
        _fileSizeMeta,
        fileSize.isAcceptableOrUnknown(data['FileSize']!, _fileSizeMeta),
      );
    }
    if (data.containsKey('DiscNo')) {
      context.handle(
        _discNoMeta,
        discNo.isAcceptableOrUnknown(data['DiscNo']!, _discNoMeta),
      );
    }
    if (data.containsKey('ComposerID')) {
      context.handle(
        _composerIDMeta,
        composerID.isAcceptableOrUnknown(data['ComposerID']!, _composerIDMeta),
      );
    }
    if (data.containsKey('Subtitle')) {
      context.handle(
        _subtitleMeta,
        subtitle.isAcceptableOrUnknown(data['Subtitle']!, _subtitleMeta),
      );
    }
    if (data.containsKey('SampleRate')) {
      context.handle(
        _sampleRateMeta,
        sampleRate.isAcceptableOrUnknown(data['SampleRate']!, _sampleRateMeta),
      );
    }
    if (data.containsKey('DisableQuantize')) {
      context.handle(
        _disableQuantizeMeta,
        disableQuantize.isAcceptableOrUnknown(
          data['DisableQuantize']!,
          _disableQuantizeMeta,
        ),
      );
    }
    if (data.containsKey('Analysed')) {
      context.handle(
        _analysedMeta,
        analysed.isAcceptableOrUnknown(data['Analysed']!, _analysedMeta),
      );
    }
    if (data.containsKey('ReleaseDate')) {
      context.handle(
        _releaseDateMeta,
        releaseDate.isAcceptableOrUnknown(
          data['ReleaseDate']!,
          _releaseDateMeta,
        ),
      );
    }
    if (data.containsKey('DateCreated')) {
      context.handle(
        _dateCreatedMeta,
        dateCreated.isAcceptableOrUnknown(
          data['DateCreated']!,
          _dateCreatedMeta,
        ),
      );
    }
    if (data.containsKey('ContentLink')) {
      context.handle(
        _contentLinkMeta,
        contentLink.isAcceptableOrUnknown(
          data['ContentLink']!,
          _contentLinkMeta,
        ),
      );
    }
    if (data.containsKey('Tag')) {
      context.handle(
        _tagMeta,
        tag.isAcceptableOrUnknown(data['Tag']!, _tagMeta),
      );
    }
    if (data.containsKey('ModifiedByRBM')) {
      context.handle(
        _modifiedByRBMMeta,
        modifiedByRBM.isAcceptableOrUnknown(
          data['ModifiedByRBM']!,
          _modifiedByRBMMeta,
        ),
      );
    }
    if (data.containsKey('HotCueAutoLoad')) {
      context.handle(
        _hotCueAutoLoadMeta,
        hotCueAutoLoad.isAcceptableOrUnknown(
          data['HotCueAutoLoad']!,
          _hotCueAutoLoadMeta,
        ),
      );
    }
    if (data.containsKey('DeliveryControl')) {
      context.handle(
        _deliveryControlMeta,
        deliveryControl.isAcceptableOrUnknown(
          data['DeliveryControl']!,
          _deliveryControlMeta,
        ),
      );
    }
    if (data.containsKey('DeliveryComment')) {
      context.handle(
        _deliveryCommentMeta,
        deliveryComment.isAcceptableOrUnknown(
          data['DeliveryComment']!,
          _deliveryCommentMeta,
        ),
      );
    }
    if (data.containsKey('CueUpdated')) {
      context.handle(
        _cueUpdatedMeta,
        cueUpdated.isAcceptableOrUnknown(data['CueUpdated']!, _cueUpdatedMeta),
      );
    }
    if (data.containsKey('AnalysisUpdated')) {
      context.handle(
        _analysisUpdatedMeta,
        analysisUpdated.isAcceptableOrUnknown(
          data['AnalysisUpdated']!,
          _analysisUpdatedMeta,
        ),
      );
    }
    if (data.containsKey('TrackInfoUpdated')) {
      context.handle(
        _trackInfoUpdatedMeta,
        trackInfoUpdated.isAcceptableOrUnknown(
          data['TrackInfoUpdated']!,
          _trackInfoUpdatedMeta,
        ),
      );
    }
    if (data.containsKey('Lyricist')) {
      context.handle(
        _lyricistMeta,
        lyricist.isAcceptableOrUnknown(data['Lyricist']!, _lyricistMeta),
      );
    }
    if (data.containsKey('ISRC')) {
      context.handle(
        _isrcMeta,
        isrc.isAcceptableOrUnknown(data['ISRC']!, _isrcMeta),
      );
    }
    if (data.containsKey('SamplerTrackInfo')) {
      context.handle(
        _samplerTrackInfoMeta,
        samplerTrackInfo.isAcceptableOrUnknown(
          data['SamplerTrackInfo']!,
          _samplerTrackInfoMeta,
        ),
      );
    }
    if (data.containsKey('SamplerPlayOffset')) {
      context.handle(
        _samplerPlayOffsetMeta,
        samplerPlayOffset.isAcceptableOrUnknown(
          data['SamplerPlayOffset']!,
          _samplerPlayOffsetMeta,
        ),
      );
    }
    if (data.containsKey('SamplerGain')) {
      context.handle(
        _samplerGainMeta,
        samplerGain.isAcceptableOrUnknown(
          data['SamplerGain']!,
          _samplerGainMeta,
        ),
      );
    }
    if (data.containsKey('VideoAssociate')) {
      context.handle(
        _videoAssociateMeta,
        videoAssociate.isAcceptableOrUnknown(
          data['VideoAssociate']!,
          _videoAssociateMeta,
        ),
      );
    }
    if (data.containsKey('LyricStatus')) {
      context.handle(
        _lyricStatusMeta,
        lyricStatus.isAcceptableOrUnknown(
          data['LyricStatus']!,
          _lyricStatusMeta,
        ),
      );
    }
    if (data.containsKey('ServiceID')) {
      context.handle(
        _serviceIDMeta,
        serviceID.isAcceptableOrUnknown(data['ServiceID']!, _serviceIDMeta),
      );
    }
    if (data.containsKey('OrgFolderPath')) {
      context.handle(
        _orgFolderPathMeta,
        orgFolderPath.isAcceptableOrUnknown(
          data['OrgFolderPath']!,
          _orgFolderPathMeta,
        ),
      );
    }
    if (data.containsKey('Reserved1')) {
      context.handle(
        _reserved1Meta,
        reserved1.isAcceptableOrUnknown(data['Reserved1']!, _reserved1Meta),
      );
    }
    if (data.containsKey('Reserved2')) {
      context.handle(
        _reserved2Meta,
        reserved2.isAcceptableOrUnknown(data['Reserved2']!, _reserved2Meta),
      );
    }
    if (data.containsKey('Reserved3')) {
      context.handle(
        _reserved3Meta,
        reserved3.isAcceptableOrUnknown(data['Reserved3']!, _reserved3Meta),
      );
    }
    if (data.containsKey('Reserved4')) {
      context.handle(
        _reserved4Meta,
        reserved4.isAcceptableOrUnknown(data['Reserved4']!, _reserved4Meta),
      );
    }
    if (data.containsKey('ExtInfo')) {
      context.handle(
        _extInfoMeta,
        extInfo.isAcceptableOrUnknown(data['ExtInfo']!, _extInfoMeta),
      );
    }
    if (data.containsKey('rb_file_id')) {
      context.handle(
        _rbFileIdMeta,
        rbFileId.isAcceptableOrUnknown(data['rb_file_id']!, _rbFileIdMeta),
      );
    }
    if (data.containsKey('DeviceID')) {
      context.handle(
        _deviceIDMeta,
        deviceID.isAcceptableOrUnknown(data['DeviceID']!, _deviceIDMeta),
      );
    }
    if (data.containsKey('rb_LocalFolderPath')) {
      context.handle(
        _rbLocalFolderPathMeta,
        rbLocalFolderPath.isAcceptableOrUnknown(
          data['rb_LocalFolderPath']!,
          _rbLocalFolderPathMeta,
        ),
      );
    }
    if (data.containsKey('SrcID')) {
      context.handle(
        _srcIDMeta,
        srcID.isAcceptableOrUnknown(data['SrcID']!, _srcIDMeta),
      );
    }
    if (data.containsKey('SrcTitle')) {
      context.handle(
        _srcTitleMeta,
        srcTitle.isAcceptableOrUnknown(data['SrcTitle']!, _srcTitleMeta),
      );
    }
    if (data.containsKey('SrcArtistName')) {
      context.handle(
        _srcArtistNameMeta,
        srcArtistName.isAcceptableOrUnknown(
          data['SrcArtistName']!,
          _srcArtistNameMeta,
        ),
      );
    }
    if (data.containsKey('SrcAlbumName')) {
      context.handle(
        _srcAlbumNameMeta,
        srcAlbumName.isAcceptableOrUnknown(
          data['SrcAlbumName']!,
          _srcAlbumNameMeta,
        ),
      );
    }
    if (data.containsKey('SrcLength')) {
      context.handle(
        _srcLengthMeta,
        srcLength.isAcceptableOrUnknown(data['SrcLength']!, _srcLengthMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdContentData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdContentData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      folderPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}FolderPath'],
      ),
      fileNameL: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}FileNameL'],
      ),
      fileNameS: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}FileNameS'],
      ),
      title: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Title'],
      ),
      artistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ArtistID'],
      ),
      albumID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}AlbumID'],
      ),
      genreID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}GenreID'],
      ),
      bpm: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}BPM'],
      ),
      length: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Length'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      bitRate: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}BitRate'],
      ),
      bitDepth: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}BitDepth'],
      ),
      commnt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Commnt'],
      ),
      fileType: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}FileType'],
      ),
      rating: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Rating'],
      ),
      releaseYear: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ReleaseYear'],
      ),
      remixerID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}RemixerID'],
      ),
      labelID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}LabelID'],
      ),
      orgArtistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}OrgArtistID'],
      ),
      keyID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}KeyID'],
      ),
      stockDate: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}StockDate'],
      ),
      colorID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ColorID'],
      ),
      dJPlayCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}DJPlayCount'],
      ),
      imagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ImagePath'],
      ),
      masterDBID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MasterDBID'],
      ),
      masterSongID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MasterSongID'],
      ),
      analysisDataPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}AnalysisDataPath'],
      ),
      searchStr: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SearchStr'],
      ),
      fileSize: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}FileSize'],
      ),
      discNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}DiscNo'],
      ),
      composerID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ComposerID'],
      ),
      subtitle: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Subtitle'],
      ),
      sampleRate: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}SampleRate'],
      ),
      disableQuantize: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}DisableQuantize'],
      ),
      analysed: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Analysed'],
      ),
      releaseDate: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ReleaseDate'],
      ),
      dateCreated: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DateCreated'],
      ),
      contentLink: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ContentLink'],
      ),
      tag: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Tag'],
      ),
      modifiedByRBM: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ModifiedByRBM'],
      ),
      hotCueAutoLoad: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}HotCueAutoLoad'],
      ),
      deliveryControl: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DeliveryControl'],
      ),
      deliveryComment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DeliveryComment'],
      ),
      cueUpdated: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}CueUpdated'],
      ),
      analysisUpdated: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}AnalysisUpdated'],
      ),
      trackInfoUpdated: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}TrackInfoUpdated'],
      ),
      lyricist: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Lyricist'],
      ),
      isrc: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ISRC'],
      ),
      samplerTrackInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}SamplerTrackInfo'],
      ),
      samplerPlayOffset: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}SamplerPlayOffset'],
      ),
      samplerGain: attachedDatabase.typeMapping.read(
        DriftSqlType.double,
        data['${effectivePrefix}SamplerGain'],
      ),
      videoAssociate: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}VideoAssociate'],
      ),
      lyricStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}LyricStatus'],
      ),
      serviceID: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ServiceID'],
      ),
      orgFolderPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}OrgFolderPath'],
      ),
      reserved1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved1'],
      ),
      reserved2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved2'],
      ),
      reserved3: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved3'],
      ),
      reserved4: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved4'],
      ),
      extInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ExtInfo'],
      ),
      rbFileId: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_file_id'],
      ),
      deviceID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DeviceID'],
      ),
      rbLocalFolderPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_LocalFolderPath'],
      ),
      srcID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SrcID'],
      ),
      srcTitle: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SrcTitle'],
      ),
      srcArtistName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SrcArtistName'],
      ),
      srcAlbumName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SrcAlbumName'],
      ),
      srcLength: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}SrcLength'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdContent createAlias(String alias) {
    return DjmdContent(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdContentData extends DataClass implements Insertable<DjmdContentData> {
  final String? id;
  final String? folderPath;
  final String? fileNameL;
  final String? fileNameS;
  final String? title;
  final String? artistID;
  final String? albumID;
  final String? genreID;
  final int? bpm;
  final int? length;
  final int? trackNo;
  final int? bitRate;
  final int? bitDepth;
  final String? commnt;
  final int? fileType;
  final int? rating;
  final int? releaseYear;
  final String? remixerID;
  final String? labelID;
  final String? orgArtistID;
  final String? keyID;
  final String? stockDate;
  final String? colorID;
  final int? dJPlayCount;
  final String? imagePath;
  final String? masterDBID;
  final String? masterSongID;
  final String? analysisDataPath;
  final String? searchStr;
  final int? fileSize;
  final int? discNo;
  final String? composerID;
  final String? subtitle;
  final int? sampleRate;
  final int? disableQuantize;
  final int? analysed;
  final String? releaseDate;
  final String? dateCreated;
  final int? contentLink;
  final String? tag;
  final String? modifiedByRBM;
  final String? hotCueAutoLoad;
  final String? deliveryControl;
  final String? deliveryComment;
  final String? cueUpdated;
  final String? analysisUpdated;
  final String? trackInfoUpdated;
  final String? lyricist;
  final String? isrc;
  final int? samplerTrackInfo;
  final int? samplerPlayOffset;
  final double? samplerGain;
  final String? videoAssociate;
  final int? lyricStatus;
  final int? serviceID;
  final String? orgFolderPath;
  final String? reserved1;
  final String? reserved2;
  final String? reserved3;
  final String? reserved4;
  final String? extInfo;
  final String? rbFileId;
  final String? deviceID;
  final String? rbLocalFolderPath;
  final String? srcID;
  final String? srcTitle;
  final String? srcArtistName;
  final String? srcAlbumName;
  final int? srcLength;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdContentData({
    this.id,
    this.folderPath,
    this.fileNameL,
    this.fileNameS,
    this.title,
    this.artistID,
    this.albumID,
    this.genreID,
    this.bpm,
    this.length,
    this.trackNo,
    this.bitRate,
    this.bitDepth,
    this.commnt,
    this.fileType,
    this.rating,
    this.releaseYear,
    this.remixerID,
    this.labelID,
    this.orgArtistID,
    this.keyID,
    this.stockDate,
    this.colorID,
    this.dJPlayCount,
    this.imagePath,
    this.masterDBID,
    this.masterSongID,
    this.analysisDataPath,
    this.searchStr,
    this.fileSize,
    this.discNo,
    this.composerID,
    this.subtitle,
    this.sampleRate,
    this.disableQuantize,
    this.analysed,
    this.releaseDate,
    this.dateCreated,
    this.contentLink,
    this.tag,
    this.modifiedByRBM,
    this.hotCueAutoLoad,
    this.deliveryControl,
    this.deliveryComment,
    this.cueUpdated,
    this.analysisUpdated,
    this.trackInfoUpdated,
    this.lyricist,
    this.isrc,
    this.samplerTrackInfo,
    this.samplerPlayOffset,
    this.samplerGain,
    this.videoAssociate,
    this.lyricStatus,
    this.serviceID,
    this.orgFolderPath,
    this.reserved1,
    this.reserved2,
    this.reserved3,
    this.reserved4,
    this.extInfo,
    this.rbFileId,
    this.deviceID,
    this.rbLocalFolderPath,
    this.srcID,
    this.srcTitle,
    this.srcArtistName,
    this.srcAlbumName,
    this.srcLength,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || folderPath != null) {
      map['FolderPath'] = Variable<String>(folderPath);
    }
    if (!nullToAbsent || fileNameL != null) {
      map['FileNameL'] = Variable<String>(fileNameL);
    }
    if (!nullToAbsent || fileNameS != null) {
      map['FileNameS'] = Variable<String>(fileNameS);
    }
    if (!nullToAbsent || title != null) {
      map['Title'] = Variable<String>(title);
    }
    if (!nullToAbsent || artistID != null) {
      map['ArtistID'] = Variable<String>(artistID);
    }
    if (!nullToAbsent || albumID != null) {
      map['AlbumID'] = Variable<String>(albumID);
    }
    if (!nullToAbsent || genreID != null) {
      map['GenreID'] = Variable<String>(genreID);
    }
    if (!nullToAbsent || bpm != null) {
      map['BPM'] = Variable<int>(bpm);
    }
    if (!nullToAbsent || length != null) {
      map['Length'] = Variable<int>(length);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || bitRate != null) {
      map['BitRate'] = Variable<int>(bitRate);
    }
    if (!nullToAbsent || bitDepth != null) {
      map['BitDepth'] = Variable<int>(bitDepth);
    }
    if (!nullToAbsent || commnt != null) {
      map['Commnt'] = Variable<String>(commnt);
    }
    if (!nullToAbsent || fileType != null) {
      map['FileType'] = Variable<int>(fileType);
    }
    if (!nullToAbsent || rating != null) {
      map['Rating'] = Variable<int>(rating);
    }
    if (!nullToAbsent || releaseYear != null) {
      map['ReleaseYear'] = Variable<int>(releaseYear);
    }
    if (!nullToAbsent || remixerID != null) {
      map['RemixerID'] = Variable<String>(remixerID);
    }
    if (!nullToAbsent || labelID != null) {
      map['LabelID'] = Variable<String>(labelID);
    }
    if (!nullToAbsent || orgArtistID != null) {
      map['OrgArtistID'] = Variable<String>(orgArtistID);
    }
    if (!nullToAbsent || keyID != null) {
      map['KeyID'] = Variable<String>(keyID);
    }
    if (!nullToAbsent || stockDate != null) {
      map['StockDate'] = Variable<String>(stockDate);
    }
    if (!nullToAbsent || colorID != null) {
      map['ColorID'] = Variable<String>(colorID);
    }
    if (!nullToAbsent || dJPlayCount != null) {
      map['DJPlayCount'] = Variable<int>(dJPlayCount);
    }
    if (!nullToAbsent || imagePath != null) {
      map['ImagePath'] = Variable<String>(imagePath);
    }
    if (!nullToAbsent || masterDBID != null) {
      map['MasterDBID'] = Variable<String>(masterDBID);
    }
    if (!nullToAbsent || masterSongID != null) {
      map['MasterSongID'] = Variable<String>(masterSongID);
    }
    if (!nullToAbsent || analysisDataPath != null) {
      map['AnalysisDataPath'] = Variable<String>(analysisDataPath);
    }
    if (!nullToAbsent || searchStr != null) {
      map['SearchStr'] = Variable<String>(searchStr);
    }
    if (!nullToAbsent || fileSize != null) {
      map['FileSize'] = Variable<int>(fileSize);
    }
    if (!nullToAbsent || discNo != null) {
      map['DiscNo'] = Variable<int>(discNo);
    }
    if (!nullToAbsent || composerID != null) {
      map['ComposerID'] = Variable<String>(composerID);
    }
    if (!nullToAbsent || subtitle != null) {
      map['Subtitle'] = Variable<String>(subtitle);
    }
    if (!nullToAbsent || sampleRate != null) {
      map['SampleRate'] = Variable<int>(sampleRate);
    }
    if (!nullToAbsent || disableQuantize != null) {
      map['DisableQuantize'] = Variable<int>(disableQuantize);
    }
    if (!nullToAbsent || analysed != null) {
      map['Analysed'] = Variable<int>(analysed);
    }
    if (!nullToAbsent || releaseDate != null) {
      map['ReleaseDate'] = Variable<String>(releaseDate);
    }
    if (!nullToAbsent || dateCreated != null) {
      map['DateCreated'] = Variable<String>(dateCreated);
    }
    if (!nullToAbsent || contentLink != null) {
      map['ContentLink'] = Variable<int>(contentLink);
    }
    if (!nullToAbsent || tag != null) {
      map['Tag'] = Variable<String>(tag);
    }
    if (!nullToAbsent || modifiedByRBM != null) {
      map['ModifiedByRBM'] = Variable<String>(modifiedByRBM);
    }
    if (!nullToAbsent || hotCueAutoLoad != null) {
      map['HotCueAutoLoad'] = Variable<String>(hotCueAutoLoad);
    }
    if (!nullToAbsent || deliveryControl != null) {
      map['DeliveryControl'] = Variable<String>(deliveryControl);
    }
    if (!nullToAbsent || deliveryComment != null) {
      map['DeliveryComment'] = Variable<String>(deliveryComment);
    }
    if (!nullToAbsent || cueUpdated != null) {
      map['CueUpdated'] = Variable<String>(cueUpdated);
    }
    if (!nullToAbsent || analysisUpdated != null) {
      map['AnalysisUpdated'] = Variable<String>(analysisUpdated);
    }
    if (!nullToAbsent || trackInfoUpdated != null) {
      map['TrackInfoUpdated'] = Variable<String>(trackInfoUpdated);
    }
    if (!nullToAbsent || lyricist != null) {
      map['Lyricist'] = Variable<String>(lyricist);
    }
    if (!nullToAbsent || isrc != null) {
      map['ISRC'] = Variable<String>(isrc);
    }
    if (!nullToAbsent || samplerTrackInfo != null) {
      map['SamplerTrackInfo'] = Variable<int>(samplerTrackInfo);
    }
    if (!nullToAbsent || samplerPlayOffset != null) {
      map['SamplerPlayOffset'] = Variable<int>(samplerPlayOffset);
    }
    if (!nullToAbsent || samplerGain != null) {
      map['SamplerGain'] = Variable<double>(samplerGain);
    }
    if (!nullToAbsent || videoAssociate != null) {
      map['VideoAssociate'] = Variable<String>(videoAssociate);
    }
    if (!nullToAbsent || lyricStatus != null) {
      map['LyricStatus'] = Variable<int>(lyricStatus);
    }
    if (!nullToAbsent || serviceID != null) {
      map['ServiceID'] = Variable<int>(serviceID);
    }
    if (!nullToAbsent || orgFolderPath != null) {
      map['OrgFolderPath'] = Variable<String>(orgFolderPath);
    }
    if (!nullToAbsent || reserved1 != null) {
      map['Reserved1'] = Variable<String>(reserved1);
    }
    if (!nullToAbsent || reserved2 != null) {
      map['Reserved2'] = Variable<String>(reserved2);
    }
    if (!nullToAbsent || reserved3 != null) {
      map['Reserved3'] = Variable<String>(reserved3);
    }
    if (!nullToAbsent || reserved4 != null) {
      map['Reserved4'] = Variable<String>(reserved4);
    }
    if (!nullToAbsent || extInfo != null) {
      map['ExtInfo'] = Variable<String>(extInfo);
    }
    if (!nullToAbsent || rbFileId != null) {
      map['rb_file_id'] = Variable<String>(rbFileId);
    }
    if (!nullToAbsent || deviceID != null) {
      map['DeviceID'] = Variable<String>(deviceID);
    }
    if (!nullToAbsent || rbLocalFolderPath != null) {
      map['rb_LocalFolderPath'] = Variable<String>(rbLocalFolderPath);
    }
    if (!nullToAbsent || srcID != null) {
      map['SrcID'] = Variable<String>(srcID);
    }
    if (!nullToAbsent || srcTitle != null) {
      map['SrcTitle'] = Variable<String>(srcTitle);
    }
    if (!nullToAbsent || srcArtistName != null) {
      map['SrcArtistName'] = Variable<String>(srcArtistName);
    }
    if (!nullToAbsent || srcAlbumName != null) {
      map['SrcAlbumName'] = Variable<String>(srcAlbumName);
    }
    if (!nullToAbsent || srcLength != null) {
      map['SrcLength'] = Variable<int>(srcLength);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdContentCompanion toCompanion(bool nullToAbsent) {
    return DjmdContentCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      folderPath: folderPath == null && nullToAbsent
          ? const Value.absent()
          : Value(folderPath),
      fileNameL: fileNameL == null && nullToAbsent
          ? const Value.absent()
          : Value(fileNameL),
      fileNameS: fileNameS == null && nullToAbsent
          ? const Value.absent()
          : Value(fileNameS),
      title: title == null && nullToAbsent
          ? const Value.absent()
          : Value(title),
      artistID: artistID == null && nullToAbsent
          ? const Value.absent()
          : Value(artistID),
      albumID: albumID == null && nullToAbsent
          ? const Value.absent()
          : Value(albumID),
      genreID: genreID == null && nullToAbsent
          ? const Value.absent()
          : Value(genreID),
      bpm: bpm == null && nullToAbsent ? const Value.absent() : Value(bpm),
      length: length == null && nullToAbsent
          ? const Value.absent()
          : Value(length),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      bitRate: bitRate == null && nullToAbsent
          ? const Value.absent()
          : Value(bitRate),
      bitDepth: bitDepth == null && nullToAbsent
          ? const Value.absent()
          : Value(bitDepth),
      commnt: commnt == null && nullToAbsent
          ? const Value.absent()
          : Value(commnt),
      fileType: fileType == null && nullToAbsent
          ? const Value.absent()
          : Value(fileType),
      rating: rating == null && nullToAbsent
          ? const Value.absent()
          : Value(rating),
      releaseYear: releaseYear == null && nullToAbsent
          ? const Value.absent()
          : Value(releaseYear),
      remixerID: remixerID == null && nullToAbsent
          ? const Value.absent()
          : Value(remixerID),
      labelID: labelID == null && nullToAbsent
          ? const Value.absent()
          : Value(labelID),
      orgArtistID: orgArtistID == null && nullToAbsent
          ? const Value.absent()
          : Value(orgArtistID),
      keyID: keyID == null && nullToAbsent
          ? const Value.absent()
          : Value(keyID),
      stockDate: stockDate == null && nullToAbsent
          ? const Value.absent()
          : Value(stockDate),
      colorID: colorID == null && nullToAbsent
          ? const Value.absent()
          : Value(colorID),
      dJPlayCount: dJPlayCount == null && nullToAbsent
          ? const Value.absent()
          : Value(dJPlayCount),
      imagePath: imagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(imagePath),
      masterDBID: masterDBID == null && nullToAbsent
          ? const Value.absent()
          : Value(masterDBID),
      masterSongID: masterSongID == null && nullToAbsent
          ? const Value.absent()
          : Value(masterSongID),
      analysisDataPath: analysisDataPath == null && nullToAbsent
          ? const Value.absent()
          : Value(analysisDataPath),
      searchStr: searchStr == null && nullToAbsent
          ? const Value.absent()
          : Value(searchStr),
      fileSize: fileSize == null && nullToAbsent
          ? const Value.absent()
          : Value(fileSize),
      discNo: discNo == null && nullToAbsent
          ? const Value.absent()
          : Value(discNo),
      composerID: composerID == null && nullToAbsent
          ? const Value.absent()
          : Value(composerID),
      subtitle: subtitle == null && nullToAbsent
          ? const Value.absent()
          : Value(subtitle),
      sampleRate: sampleRate == null && nullToAbsent
          ? const Value.absent()
          : Value(sampleRate),
      disableQuantize: disableQuantize == null && nullToAbsent
          ? const Value.absent()
          : Value(disableQuantize),
      analysed: analysed == null && nullToAbsent
          ? const Value.absent()
          : Value(analysed),
      releaseDate: releaseDate == null && nullToAbsent
          ? const Value.absent()
          : Value(releaseDate),
      dateCreated: dateCreated == null && nullToAbsent
          ? const Value.absent()
          : Value(dateCreated),
      contentLink: contentLink == null && nullToAbsent
          ? const Value.absent()
          : Value(contentLink),
      tag: tag == null && nullToAbsent ? const Value.absent() : Value(tag),
      modifiedByRBM: modifiedByRBM == null && nullToAbsent
          ? const Value.absent()
          : Value(modifiedByRBM),
      hotCueAutoLoad: hotCueAutoLoad == null && nullToAbsent
          ? const Value.absent()
          : Value(hotCueAutoLoad),
      deliveryControl: deliveryControl == null && nullToAbsent
          ? const Value.absent()
          : Value(deliveryControl),
      deliveryComment: deliveryComment == null && nullToAbsent
          ? const Value.absent()
          : Value(deliveryComment),
      cueUpdated: cueUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(cueUpdated),
      analysisUpdated: analysisUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(analysisUpdated),
      trackInfoUpdated: trackInfoUpdated == null && nullToAbsent
          ? const Value.absent()
          : Value(trackInfoUpdated),
      lyricist: lyricist == null && nullToAbsent
          ? const Value.absent()
          : Value(lyricist),
      isrc: isrc == null && nullToAbsent ? const Value.absent() : Value(isrc),
      samplerTrackInfo: samplerTrackInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(samplerTrackInfo),
      samplerPlayOffset: samplerPlayOffset == null && nullToAbsent
          ? const Value.absent()
          : Value(samplerPlayOffset),
      samplerGain: samplerGain == null && nullToAbsent
          ? const Value.absent()
          : Value(samplerGain),
      videoAssociate: videoAssociate == null && nullToAbsent
          ? const Value.absent()
          : Value(videoAssociate),
      lyricStatus: lyricStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(lyricStatus),
      serviceID: serviceID == null && nullToAbsent
          ? const Value.absent()
          : Value(serviceID),
      orgFolderPath: orgFolderPath == null && nullToAbsent
          ? const Value.absent()
          : Value(orgFolderPath),
      reserved1: reserved1 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved1),
      reserved2: reserved2 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved2),
      reserved3: reserved3 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved3),
      reserved4: reserved4 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved4),
      extInfo: extInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(extInfo),
      rbFileId: rbFileId == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileId),
      deviceID: deviceID == null && nullToAbsent
          ? const Value.absent()
          : Value(deviceID),
      rbLocalFolderPath: rbLocalFolderPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalFolderPath),
      srcID: srcID == null && nullToAbsent
          ? const Value.absent()
          : Value(srcID),
      srcTitle: srcTitle == null && nullToAbsent
          ? const Value.absent()
          : Value(srcTitle),
      srcArtistName: srcArtistName == null && nullToAbsent
          ? const Value.absent()
          : Value(srcArtistName),
      srcAlbumName: srcAlbumName == null && nullToAbsent
          ? const Value.absent()
          : Value(srcAlbumName),
      srcLength: srcLength == null && nullToAbsent
          ? const Value.absent()
          : Value(srcLength),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdContentData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdContentData(
      id: serializer.fromJson<String?>(json['ID']),
      folderPath: serializer.fromJson<String?>(json['FolderPath']),
      fileNameL: serializer.fromJson<String?>(json['FileNameL']),
      fileNameS: serializer.fromJson<String?>(json['FileNameS']),
      title: serializer.fromJson<String?>(json['Title']),
      artistID: serializer.fromJson<String?>(json['ArtistID']),
      albumID: serializer.fromJson<String?>(json['AlbumID']),
      genreID: serializer.fromJson<String?>(json['GenreID']),
      bpm: serializer.fromJson<int?>(json['BPM']),
      length: serializer.fromJson<int?>(json['Length']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      bitRate: serializer.fromJson<int?>(json['BitRate']),
      bitDepth: serializer.fromJson<int?>(json['BitDepth']),
      commnt: serializer.fromJson<String?>(json['Commnt']),
      fileType: serializer.fromJson<int?>(json['FileType']),
      rating: serializer.fromJson<int?>(json['Rating']),
      releaseYear: serializer.fromJson<int?>(json['ReleaseYear']),
      remixerID: serializer.fromJson<String?>(json['RemixerID']),
      labelID: serializer.fromJson<String?>(json['LabelID']),
      orgArtistID: serializer.fromJson<String?>(json['OrgArtistID']),
      keyID: serializer.fromJson<String?>(json['KeyID']),
      stockDate: serializer.fromJson<String?>(json['StockDate']),
      colorID: serializer.fromJson<String?>(json['ColorID']),
      dJPlayCount: serializer.fromJson<int?>(json['DJPlayCount']),
      imagePath: serializer.fromJson<String?>(json['ImagePath']),
      masterDBID: serializer.fromJson<String?>(json['MasterDBID']),
      masterSongID: serializer.fromJson<String?>(json['MasterSongID']),
      analysisDataPath: serializer.fromJson<String?>(json['AnalysisDataPath']),
      searchStr: serializer.fromJson<String?>(json['SearchStr']),
      fileSize: serializer.fromJson<int?>(json['FileSize']),
      discNo: serializer.fromJson<int?>(json['DiscNo']),
      composerID: serializer.fromJson<String?>(json['ComposerID']),
      subtitle: serializer.fromJson<String?>(json['Subtitle']),
      sampleRate: serializer.fromJson<int?>(json['SampleRate']),
      disableQuantize: serializer.fromJson<int?>(json['DisableQuantize']),
      analysed: serializer.fromJson<int?>(json['Analysed']),
      releaseDate: serializer.fromJson<String?>(json['ReleaseDate']),
      dateCreated: serializer.fromJson<String?>(json['DateCreated']),
      contentLink: serializer.fromJson<int?>(json['ContentLink']),
      tag: serializer.fromJson<String?>(json['Tag']),
      modifiedByRBM: serializer.fromJson<String?>(json['ModifiedByRBM']),
      hotCueAutoLoad: serializer.fromJson<String?>(json['HotCueAutoLoad']),
      deliveryControl: serializer.fromJson<String?>(json['DeliveryControl']),
      deliveryComment: serializer.fromJson<String?>(json['DeliveryComment']),
      cueUpdated: serializer.fromJson<String?>(json['CueUpdated']),
      analysisUpdated: serializer.fromJson<String?>(json['AnalysisUpdated']),
      trackInfoUpdated: serializer.fromJson<String?>(json['TrackInfoUpdated']),
      lyricist: serializer.fromJson<String?>(json['Lyricist']),
      isrc: serializer.fromJson<String?>(json['ISRC']),
      samplerTrackInfo: serializer.fromJson<int?>(json['SamplerTrackInfo']),
      samplerPlayOffset: serializer.fromJson<int?>(json['SamplerPlayOffset']),
      samplerGain: serializer.fromJson<double?>(json['SamplerGain']),
      videoAssociate: serializer.fromJson<String?>(json['VideoAssociate']),
      lyricStatus: serializer.fromJson<int?>(json['LyricStatus']),
      serviceID: serializer.fromJson<int?>(json['ServiceID']),
      orgFolderPath: serializer.fromJson<String?>(json['OrgFolderPath']),
      reserved1: serializer.fromJson<String?>(json['Reserved1']),
      reserved2: serializer.fromJson<String?>(json['Reserved2']),
      reserved3: serializer.fromJson<String?>(json['Reserved3']),
      reserved4: serializer.fromJson<String?>(json['Reserved4']),
      extInfo: serializer.fromJson<String?>(json['ExtInfo']),
      rbFileId: serializer.fromJson<String?>(json['rb_file_id']),
      deviceID: serializer.fromJson<String?>(json['DeviceID']),
      rbLocalFolderPath: serializer.fromJson<String?>(
        json['rb_LocalFolderPath'],
      ),
      srcID: serializer.fromJson<String?>(json['SrcID']),
      srcTitle: serializer.fromJson<String?>(json['SrcTitle']),
      srcArtistName: serializer.fromJson<String?>(json['SrcArtistName']),
      srcAlbumName: serializer.fromJson<String?>(json['SrcAlbumName']),
      srcLength: serializer.fromJson<int?>(json['SrcLength']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'FolderPath': serializer.toJson<String?>(folderPath),
      'FileNameL': serializer.toJson<String?>(fileNameL),
      'FileNameS': serializer.toJson<String?>(fileNameS),
      'Title': serializer.toJson<String?>(title),
      'ArtistID': serializer.toJson<String?>(artistID),
      'AlbumID': serializer.toJson<String?>(albumID),
      'GenreID': serializer.toJson<String?>(genreID),
      'BPM': serializer.toJson<int?>(bpm),
      'Length': serializer.toJson<int?>(length),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'BitRate': serializer.toJson<int?>(bitRate),
      'BitDepth': serializer.toJson<int?>(bitDepth),
      'Commnt': serializer.toJson<String?>(commnt),
      'FileType': serializer.toJson<int?>(fileType),
      'Rating': serializer.toJson<int?>(rating),
      'ReleaseYear': serializer.toJson<int?>(releaseYear),
      'RemixerID': serializer.toJson<String?>(remixerID),
      'LabelID': serializer.toJson<String?>(labelID),
      'OrgArtistID': serializer.toJson<String?>(orgArtistID),
      'KeyID': serializer.toJson<String?>(keyID),
      'StockDate': serializer.toJson<String?>(stockDate),
      'ColorID': serializer.toJson<String?>(colorID),
      'DJPlayCount': serializer.toJson<int?>(dJPlayCount),
      'ImagePath': serializer.toJson<String?>(imagePath),
      'MasterDBID': serializer.toJson<String?>(masterDBID),
      'MasterSongID': serializer.toJson<String?>(masterSongID),
      'AnalysisDataPath': serializer.toJson<String?>(analysisDataPath),
      'SearchStr': serializer.toJson<String?>(searchStr),
      'FileSize': serializer.toJson<int?>(fileSize),
      'DiscNo': serializer.toJson<int?>(discNo),
      'ComposerID': serializer.toJson<String?>(composerID),
      'Subtitle': serializer.toJson<String?>(subtitle),
      'SampleRate': serializer.toJson<int?>(sampleRate),
      'DisableQuantize': serializer.toJson<int?>(disableQuantize),
      'Analysed': serializer.toJson<int?>(analysed),
      'ReleaseDate': serializer.toJson<String?>(releaseDate),
      'DateCreated': serializer.toJson<String?>(dateCreated),
      'ContentLink': serializer.toJson<int?>(contentLink),
      'Tag': serializer.toJson<String?>(tag),
      'ModifiedByRBM': serializer.toJson<String?>(modifiedByRBM),
      'HotCueAutoLoad': serializer.toJson<String?>(hotCueAutoLoad),
      'DeliveryControl': serializer.toJson<String?>(deliveryControl),
      'DeliveryComment': serializer.toJson<String?>(deliveryComment),
      'CueUpdated': serializer.toJson<String?>(cueUpdated),
      'AnalysisUpdated': serializer.toJson<String?>(analysisUpdated),
      'TrackInfoUpdated': serializer.toJson<String?>(trackInfoUpdated),
      'Lyricist': serializer.toJson<String?>(lyricist),
      'ISRC': serializer.toJson<String?>(isrc),
      'SamplerTrackInfo': serializer.toJson<int?>(samplerTrackInfo),
      'SamplerPlayOffset': serializer.toJson<int?>(samplerPlayOffset),
      'SamplerGain': serializer.toJson<double?>(samplerGain),
      'VideoAssociate': serializer.toJson<String?>(videoAssociate),
      'LyricStatus': serializer.toJson<int?>(lyricStatus),
      'ServiceID': serializer.toJson<int?>(serviceID),
      'OrgFolderPath': serializer.toJson<String?>(orgFolderPath),
      'Reserved1': serializer.toJson<String?>(reserved1),
      'Reserved2': serializer.toJson<String?>(reserved2),
      'Reserved3': serializer.toJson<String?>(reserved3),
      'Reserved4': serializer.toJson<String?>(reserved4),
      'ExtInfo': serializer.toJson<String?>(extInfo),
      'rb_file_id': serializer.toJson<String?>(rbFileId),
      'DeviceID': serializer.toJson<String?>(deviceID),
      'rb_LocalFolderPath': serializer.toJson<String?>(rbLocalFolderPath),
      'SrcID': serializer.toJson<String?>(srcID),
      'SrcTitle': serializer.toJson<String?>(srcTitle),
      'SrcArtistName': serializer.toJson<String?>(srcArtistName),
      'SrcAlbumName': serializer.toJson<String?>(srcAlbumName),
      'SrcLength': serializer.toJson<int?>(srcLength),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdContentData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> folderPath = const Value.absent(),
    Value<String?> fileNameL = const Value.absent(),
    Value<String?> fileNameS = const Value.absent(),
    Value<String?> title = const Value.absent(),
    Value<String?> artistID = const Value.absent(),
    Value<String?> albumID = const Value.absent(),
    Value<String?> genreID = const Value.absent(),
    Value<int?> bpm = const Value.absent(),
    Value<int?> length = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<int?> bitRate = const Value.absent(),
    Value<int?> bitDepth = const Value.absent(),
    Value<String?> commnt = const Value.absent(),
    Value<int?> fileType = const Value.absent(),
    Value<int?> rating = const Value.absent(),
    Value<int?> releaseYear = const Value.absent(),
    Value<String?> remixerID = const Value.absent(),
    Value<String?> labelID = const Value.absent(),
    Value<String?> orgArtistID = const Value.absent(),
    Value<String?> keyID = const Value.absent(),
    Value<String?> stockDate = const Value.absent(),
    Value<String?> colorID = const Value.absent(),
    Value<int?> dJPlayCount = const Value.absent(),
    Value<String?> imagePath = const Value.absent(),
    Value<String?> masterDBID = const Value.absent(),
    Value<String?> masterSongID = const Value.absent(),
    Value<String?> analysisDataPath = const Value.absent(),
    Value<String?> searchStr = const Value.absent(),
    Value<int?> fileSize = const Value.absent(),
    Value<int?> discNo = const Value.absent(),
    Value<String?> composerID = const Value.absent(),
    Value<String?> subtitle = const Value.absent(),
    Value<int?> sampleRate = const Value.absent(),
    Value<int?> disableQuantize = const Value.absent(),
    Value<int?> analysed = const Value.absent(),
    Value<String?> releaseDate = const Value.absent(),
    Value<String?> dateCreated = const Value.absent(),
    Value<int?> contentLink = const Value.absent(),
    Value<String?> tag = const Value.absent(),
    Value<String?> modifiedByRBM = const Value.absent(),
    Value<String?> hotCueAutoLoad = const Value.absent(),
    Value<String?> deliveryControl = const Value.absent(),
    Value<String?> deliveryComment = const Value.absent(),
    Value<String?> cueUpdated = const Value.absent(),
    Value<String?> analysisUpdated = const Value.absent(),
    Value<String?> trackInfoUpdated = const Value.absent(),
    Value<String?> lyricist = const Value.absent(),
    Value<String?> isrc = const Value.absent(),
    Value<int?> samplerTrackInfo = const Value.absent(),
    Value<int?> samplerPlayOffset = const Value.absent(),
    Value<double?> samplerGain = const Value.absent(),
    Value<String?> videoAssociate = const Value.absent(),
    Value<int?> lyricStatus = const Value.absent(),
    Value<int?> serviceID = const Value.absent(),
    Value<String?> orgFolderPath = const Value.absent(),
    Value<String?> reserved1 = const Value.absent(),
    Value<String?> reserved2 = const Value.absent(),
    Value<String?> reserved3 = const Value.absent(),
    Value<String?> reserved4 = const Value.absent(),
    Value<String?> extInfo = const Value.absent(),
    Value<String?> rbFileId = const Value.absent(),
    Value<String?> deviceID = const Value.absent(),
    Value<String?> rbLocalFolderPath = const Value.absent(),
    Value<String?> srcID = const Value.absent(),
    Value<String?> srcTitle = const Value.absent(),
    Value<String?> srcArtistName = const Value.absent(),
    Value<String?> srcAlbumName = const Value.absent(),
    Value<int?> srcLength = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdContentData(
    id: id.present ? id.value : this.id,
    folderPath: folderPath.present ? folderPath.value : this.folderPath,
    fileNameL: fileNameL.present ? fileNameL.value : this.fileNameL,
    fileNameS: fileNameS.present ? fileNameS.value : this.fileNameS,
    title: title.present ? title.value : this.title,
    artistID: artistID.present ? artistID.value : this.artistID,
    albumID: albumID.present ? albumID.value : this.albumID,
    genreID: genreID.present ? genreID.value : this.genreID,
    bpm: bpm.present ? bpm.value : this.bpm,
    length: length.present ? length.value : this.length,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    bitRate: bitRate.present ? bitRate.value : this.bitRate,
    bitDepth: bitDepth.present ? bitDepth.value : this.bitDepth,
    commnt: commnt.present ? commnt.value : this.commnt,
    fileType: fileType.present ? fileType.value : this.fileType,
    rating: rating.present ? rating.value : this.rating,
    releaseYear: releaseYear.present ? releaseYear.value : this.releaseYear,
    remixerID: remixerID.present ? remixerID.value : this.remixerID,
    labelID: labelID.present ? labelID.value : this.labelID,
    orgArtistID: orgArtistID.present ? orgArtistID.value : this.orgArtistID,
    keyID: keyID.present ? keyID.value : this.keyID,
    stockDate: stockDate.present ? stockDate.value : this.stockDate,
    colorID: colorID.present ? colorID.value : this.colorID,
    dJPlayCount: dJPlayCount.present ? dJPlayCount.value : this.dJPlayCount,
    imagePath: imagePath.present ? imagePath.value : this.imagePath,
    masterDBID: masterDBID.present ? masterDBID.value : this.masterDBID,
    masterSongID: masterSongID.present ? masterSongID.value : this.masterSongID,
    analysisDataPath: analysisDataPath.present
        ? analysisDataPath.value
        : this.analysisDataPath,
    searchStr: searchStr.present ? searchStr.value : this.searchStr,
    fileSize: fileSize.present ? fileSize.value : this.fileSize,
    discNo: discNo.present ? discNo.value : this.discNo,
    composerID: composerID.present ? composerID.value : this.composerID,
    subtitle: subtitle.present ? subtitle.value : this.subtitle,
    sampleRate: sampleRate.present ? sampleRate.value : this.sampleRate,
    disableQuantize: disableQuantize.present
        ? disableQuantize.value
        : this.disableQuantize,
    analysed: analysed.present ? analysed.value : this.analysed,
    releaseDate: releaseDate.present ? releaseDate.value : this.releaseDate,
    dateCreated: dateCreated.present ? dateCreated.value : this.dateCreated,
    contentLink: contentLink.present ? contentLink.value : this.contentLink,
    tag: tag.present ? tag.value : this.tag,
    modifiedByRBM: modifiedByRBM.present
        ? modifiedByRBM.value
        : this.modifiedByRBM,
    hotCueAutoLoad: hotCueAutoLoad.present
        ? hotCueAutoLoad.value
        : this.hotCueAutoLoad,
    deliveryControl: deliveryControl.present
        ? deliveryControl.value
        : this.deliveryControl,
    deliveryComment: deliveryComment.present
        ? deliveryComment.value
        : this.deliveryComment,
    cueUpdated: cueUpdated.present ? cueUpdated.value : this.cueUpdated,
    analysisUpdated: analysisUpdated.present
        ? analysisUpdated.value
        : this.analysisUpdated,
    trackInfoUpdated: trackInfoUpdated.present
        ? trackInfoUpdated.value
        : this.trackInfoUpdated,
    lyricist: lyricist.present ? lyricist.value : this.lyricist,
    isrc: isrc.present ? isrc.value : this.isrc,
    samplerTrackInfo: samplerTrackInfo.present
        ? samplerTrackInfo.value
        : this.samplerTrackInfo,
    samplerPlayOffset: samplerPlayOffset.present
        ? samplerPlayOffset.value
        : this.samplerPlayOffset,
    samplerGain: samplerGain.present ? samplerGain.value : this.samplerGain,
    videoAssociate: videoAssociate.present
        ? videoAssociate.value
        : this.videoAssociate,
    lyricStatus: lyricStatus.present ? lyricStatus.value : this.lyricStatus,
    serviceID: serviceID.present ? serviceID.value : this.serviceID,
    orgFolderPath: orgFolderPath.present
        ? orgFolderPath.value
        : this.orgFolderPath,
    reserved1: reserved1.present ? reserved1.value : this.reserved1,
    reserved2: reserved2.present ? reserved2.value : this.reserved2,
    reserved3: reserved3.present ? reserved3.value : this.reserved3,
    reserved4: reserved4.present ? reserved4.value : this.reserved4,
    extInfo: extInfo.present ? extInfo.value : this.extInfo,
    rbFileId: rbFileId.present ? rbFileId.value : this.rbFileId,
    deviceID: deviceID.present ? deviceID.value : this.deviceID,
    rbLocalFolderPath: rbLocalFolderPath.present
        ? rbLocalFolderPath.value
        : this.rbLocalFolderPath,
    srcID: srcID.present ? srcID.value : this.srcID,
    srcTitle: srcTitle.present ? srcTitle.value : this.srcTitle,
    srcArtistName: srcArtistName.present
        ? srcArtistName.value
        : this.srcArtistName,
    srcAlbumName: srcAlbumName.present ? srcAlbumName.value : this.srcAlbumName,
    srcLength: srcLength.present ? srcLength.value : this.srcLength,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdContentData copyWithCompanion(DjmdContentCompanion data) {
    return DjmdContentData(
      id: data.id.present ? data.id.value : this.id,
      folderPath: data.folderPath.present
          ? data.folderPath.value
          : this.folderPath,
      fileNameL: data.fileNameL.present ? data.fileNameL.value : this.fileNameL,
      fileNameS: data.fileNameS.present ? data.fileNameS.value : this.fileNameS,
      title: data.title.present ? data.title.value : this.title,
      artistID: data.artistID.present ? data.artistID.value : this.artistID,
      albumID: data.albumID.present ? data.albumID.value : this.albumID,
      genreID: data.genreID.present ? data.genreID.value : this.genreID,
      bpm: data.bpm.present ? data.bpm.value : this.bpm,
      length: data.length.present ? data.length.value : this.length,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      bitRate: data.bitRate.present ? data.bitRate.value : this.bitRate,
      bitDepth: data.bitDepth.present ? data.bitDepth.value : this.bitDepth,
      commnt: data.commnt.present ? data.commnt.value : this.commnt,
      fileType: data.fileType.present ? data.fileType.value : this.fileType,
      rating: data.rating.present ? data.rating.value : this.rating,
      releaseYear: data.releaseYear.present
          ? data.releaseYear.value
          : this.releaseYear,
      remixerID: data.remixerID.present ? data.remixerID.value : this.remixerID,
      labelID: data.labelID.present ? data.labelID.value : this.labelID,
      orgArtistID: data.orgArtistID.present
          ? data.orgArtistID.value
          : this.orgArtistID,
      keyID: data.keyID.present ? data.keyID.value : this.keyID,
      stockDate: data.stockDate.present ? data.stockDate.value : this.stockDate,
      colorID: data.colorID.present ? data.colorID.value : this.colorID,
      dJPlayCount: data.dJPlayCount.present
          ? data.dJPlayCount.value
          : this.dJPlayCount,
      imagePath: data.imagePath.present ? data.imagePath.value : this.imagePath,
      masterDBID: data.masterDBID.present
          ? data.masterDBID.value
          : this.masterDBID,
      masterSongID: data.masterSongID.present
          ? data.masterSongID.value
          : this.masterSongID,
      analysisDataPath: data.analysisDataPath.present
          ? data.analysisDataPath.value
          : this.analysisDataPath,
      searchStr: data.searchStr.present ? data.searchStr.value : this.searchStr,
      fileSize: data.fileSize.present ? data.fileSize.value : this.fileSize,
      discNo: data.discNo.present ? data.discNo.value : this.discNo,
      composerID: data.composerID.present
          ? data.composerID.value
          : this.composerID,
      subtitle: data.subtitle.present ? data.subtitle.value : this.subtitle,
      sampleRate: data.sampleRate.present
          ? data.sampleRate.value
          : this.sampleRate,
      disableQuantize: data.disableQuantize.present
          ? data.disableQuantize.value
          : this.disableQuantize,
      analysed: data.analysed.present ? data.analysed.value : this.analysed,
      releaseDate: data.releaseDate.present
          ? data.releaseDate.value
          : this.releaseDate,
      dateCreated: data.dateCreated.present
          ? data.dateCreated.value
          : this.dateCreated,
      contentLink: data.contentLink.present
          ? data.contentLink.value
          : this.contentLink,
      tag: data.tag.present ? data.tag.value : this.tag,
      modifiedByRBM: data.modifiedByRBM.present
          ? data.modifiedByRBM.value
          : this.modifiedByRBM,
      hotCueAutoLoad: data.hotCueAutoLoad.present
          ? data.hotCueAutoLoad.value
          : this.hotCueAutoLoad,
      deliveryControl: data.deliveryControl.present
          ? data.deliveryControl.value
          : this.deliveryControl,
      deliveryComment: data.deliveryComment.present
          ? data.deliveryComment.value
          : this.deliveryComment,
      cueUpdated: data.cueUpdated.present
          ? data.cueUpdated.value
          : this.cueUpdated,
      analysisUpdated: data.analysisUpdated.present
          ? data.analysisUpdated.value
          : this.analysisUpdated,
      trackInfoUpdated: data.trackInfoUpdated.present
          ? data.trackInfoUpdated.value
          : this.trackInfoUpdated,
      lyricist: data.lyricist.present ? data.lyricist.value : this.lyricist,
      isrc: data.isrc.present ? data.isrc.value : this.isrc,
      samplerTrackInfo: data.samplerTrackInfo.present
          ? data.samplerTrackInfo.value
          : this.samplerTrackInfo,
      samplerPlayOffset: data.samplerPlayOffset.present
          ? data.samplerPlayOffset.value
          : this.samplerPlayOffset,
      samplerGain: data.samplerGain.present
          ? data.samplerGain.value
          : this.samplerGain,
      videoAssociate: data.videoAssociate.present
          ? data.videoAssociate.value
          : this.videoAssociate,
      lyricStatus: data.lyricStatus.present
          ? data.lyricStatus.value
          : this.lyricStatus,
      serviceID: data.serviceID.present ? data.serviceID.value : this.serviceID,
      orgFolderPath: data.orgFolderPath.present
          ? data.orgFolderPath.value
          : this.orgFolderPath,
      reserved1: data.reserved1.present ? data.reserved1.value : this.reserved1,
      reserved2: data.reserved2.present ? data.reserved2.value : this.reserved2,
      reserved3: data.reserved3.present ? data.reserved3.value : this.reserved3,
      reserved4: data.reserved4.present ? data.reserved4.value : this.reserved4,
      extInfo: data.extInfo.present ? data.extInfo.value : this.extInfo,
      rbFileId: data.rbFileId.present ? data.rbFileId.value : this.rbFileId,
      deviceID: data.deviceID.present ? data.deviceID.value : this.deviceID,
      rbLocalFolderPath: data.rbLocalFolderPath.present
          ? data.rbLocalFolderPath.value
          : this.rbLocalFolderPath,
      srcID: data.srcID.present ? data.srcID.value : this.srcID,
      srcTitle: data.srcTitle.present ? data.srcTitle.value : this.srcTitle,
      srcArtistName: data.srcArtistName.present
          ? data.srcArtistName.value
          : this.srcArtistName,
      srcAlbumName: data.srcAlbumName.present
          ? data.srcAlbumName.value
          : this.srcAlbumName,
      srcLength: data.srcLength.present ? data.srcLength.value : this.srcLength,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdContentData(')
          ..write('id: $id, ')
          ..write('folderPath: $folderPath, ')
          ..write('fileNameL: $fileNameL, ')
          ..write('fileNameS: $fileNameS, ')
          ..write('title: $title, ')
          ..write('artistID: $artistID, ')
          ..write('albumID: $albumID, ')
          ..write('genreID: $genreID, ')
          ..write('bpm: $bpm, ')
          ..write('length: $length, ')
          ..write('trackNo: $trackNo, ')
          ..write('bitRate: $bitRate, ')
          ..write('bitDepth: $bitDepth, ')
          ..write('commnt: $commnt, ')
          ..write('fileType: $fileType, ')
          ..write('rating: $rating, ')
          ..write('releaseYear: $releaseYear, ')
          ..write('remixerID: $remixerID, ')
          ..write('labelID: $labelID, ')
          ..write('orgArtistID: $orgArtistID, ')
          ..write('keyID: $keyID, ')
          ..write('stockDate: $stockDate, ')
          ..write('colorID: $colorID, ')
          ..write('dJPlayCount: $dJPlayCount, ')
          ..write('imagePath: $imagePath, ')
          ..write('masterDBID: $masterDBID, ')
          ..write('masterSongID: $masterSongID, ')
          ..write('analysisDataPath: $analysisDataPath, ')
          ..write('searchStr: $searchStr, ')
          ..write('fileSize: $fileSize, ')
          ..write('discNo: $discNo, ')
          ..write('composerID: $composerID, ')
          ..write('subtitle: $subtitle, ')
          ..write('sampleRate: $sampleRate, ')
          ..write('disableQuantize: $disableQuantize, ')
          ..write('analysed: $analysed, ')
          ..write('releaseDate: $releaseDate, ')
          ..write('dateCreated: $dateCreated, ')
          ..write('contentLink: $contentLink, ')
          ..write('tag: $tag, ')
          ..write('modifiedByRBM: $modifiedByRBM, ')
          ..write('hotCueAutoLoad: $hotCueAutoLoad, ')
          ..write('deliveryControl: $deliveryControl, ')
          ..write('deliveryComment: $deliveryComment, ')
          ..write('cueUpdated: $cueUpdated, ')
          ..write('analysisUpdated: $analysisUpdated, ')
          ..write('trackInfoUpdated: $trackInfoUpdated, ')
          ..write('lyricist: $lyricist, ')
          ..write('isrc: $isrc, ')
          ..write('samplerTrackInfo: $samplerTrackInfo, ')
          ..write('samplerPlayOffset: $samplerPlayOffset, ')
          ..write('samplerGain: $samplerGain, ')
          ..write('videoAssociate: $videoAssociate, ')
          ..write('lyricStatus: $lyricStatus, ')
          ..write('serviceID: $serviceID, ')
          ..write('orgFolderPath: $orgFolderPath, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('extInfo: $extInfo, ')
          ..write('rbFileId: $rbFileId, ')
          ..write('deviceID: $deviceID, ')
          ..write('rbLocalFolderPath: $rbLocalFolderPath, ')
          ..write('srcID: $srcID, ')
          ..write('srcTitle: $srcTitle, ')
          ..write('srcArtistName: $srcArtistName, ')
          ..write('srcAlbumName: $srcAlbumName, ')
          ..write('srcLength: $srcLength, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    folderPath,
    fileNameL,
    fileNameS,
    title,
    artistID,
    albumID,
    genreID,
    bpm,
    length,
    trackNo,
    bitRate,
    bitDepth,
    commnt,
    fileType,
    rating,
    releaseYear,
    remixerID,
    labelID,
    orgArtistID,
    keyID,
    stockDate,
    colorID,
    dJPlayCount,
    imagePath,
    masterDBID,
    masterSongID,
    analysisDataPath,
    searchStr,
    fileSize,
    discNo,
    composerID,
    subtitle,
    sampleRate,
    disableQuantize,
    analysed,
    releaseDate,
    dateCreated,
    contentLink,
    tag,
    modifiedByRBM,
    hotCueAutoLoad,
    deliveryControl,
    deliveryComment,
    cueUpdated,
    analysisUpdated,
    trackInfoUpdated,
    lyricist,
    isrc,
    samplerTrackInfo,
    samplerPlayOffset,
    samplerGain,
    videoAssociate,
    lyricStatus,
    serviceID,
    orgFolderPath,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    extInfo,
    rbFileId,
    deviceID,
    rbLocalFolderPath,
    srcID,
    srcTitle,
    srcArtistName,
    srcAlbumName,
    srcLength,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdContentData &&
          other.id == this.id &&
          other.folderPath == this.folderPath &&
          other.fileNameL == this.fileNameL &&
          other.fileNameS == this.fileNameS &&
          other.title == this.title &&
          other.artistID == this.artistID &&
          other.albumID == this.albumID &&
          other.genreID == this.genreID &&
          other.bpm == this.bpm &&
          other.length == this.length &&
          other.trackNo == this.trackNo &&
          other.bitRate == this.bitRate &&
          other.bitDepth == this.bitDepth &&
          other.commnt == this.commnt &&
          other.fileType == this.fileType &&
          other.rating == this.rating &&
          other.releaseYear == this.releaseYear &&
          other.remixerID == this.remixerID &&
          other.labelID == this.labelID &&
          other.orgArtistID == this.orgArtistID &&
          other.keyID == this.keyID &&
          other.stockDate == this.stockDate &&
          other.colorID == this.colorID &&
          other.dJPlayCount == this.dJPlayCount &&
          other.imagePath == this.imagePath &&
          other.masterDBID == this.masterDBID &&
          other.masterSongID == this.masterSongID &&
          other.analysisDataPath == this.analysisDataPath &&
          other.searchStr == this.searchStr &&
          other.fileSize == this.fileSize &&
          other.discNo == this.discNo &&
          other.composerID == this.composerID &&
          other.subtitle == this.subtitle &&
          other.sampleRate == this.sampleRate &&
          other.disableQuantize == this.disableQuantize &&
          other.analysed == this.analysed &&
          other.releaseDate == this.releaseDate &&
          other.dateCreated == this.dateCreated &&
          other.contentLink == this.contentLink &&
          other.tag == this.tag &&
          other.modifiedByRBM == this.modifiedByRBM &&
          other.hotCueAutoLoad == this.hotCueAutoLoad &&
          other.deliveryControl == this.deliveryControl &&
          other.deliveryComment == this.deliveryComment &&
          other.cueUpdated == this.cueUpdated &&
          other.analysisUpdated == this.analysisUpdated &&
          other.trackInfoUpdated == this.trackInfoUpdated &&
          other.lyricist == this.lyricist &&
          other.isrc == this.isrc &&
          other.samplerTrackInfo == this.samplerTrackInfo &&
          other.samplerPlayOffset == this.samplerPlayOffset &&
          other.samplerGain == this.samplerGain &&
          other.videoAssociate == this.videoAssociate &&
          other.lyricStatus == this.lyricStatus &&
          other.serviceID == this.serviceID &&
          other.orgFolderPath == this.orgFolderPath &&
          other.reserved1 == this.reserved1 &&
          other.reserved2 == this.reserved2 &&
          other.reserved3 == this.reserved3 &&
          other.reserved4 == this.reserved4 &&
          other.extInfo == this.extInfo &&
          other.rbFileId == this.rbFileId &&
          other.deviceID == this.deviceID &&
          other.rbLocalFolderPath == this.rbLocalFolderPath &&
          other.srcID == this.srcID &&
          other.srcTitle == this.srcTitle &&
          other.srcArtistName == this.srcArtistName &&
          other.srcAlbumName == this.srcAlbumName &&
          other.srcLength == this.srcLength &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdContentCompanion extends UpdateCompanion<DjmdContentData> {
  final Value<String?> id;
  final Value<String?> folderPath;
  final Value<String?> fileNameL;
  final Value<String?> fileNameS;
  final Value<String?> title;
  final Value<String?> artistID;
  final Value<String?> albumID;
  final Value<String?> genreID;
  final Value<int?> bpm;
  final Value<int?> length;
  final Value<int?> trackNo;
  final Value<int?> bitRate;
  final Value<int?> bitDepth;
  final Value<String?> commnt;
  final Value<int?> fileType;
  final Value<int?> rating;
  final Value<int?> releaseYear;
  final Value<String?> remixerID;
  final Value<String?> labelID;
  final Value<String?> orgArtistID;
  final Value<String?> keyID;
  final Value<String?> stockDate;
  final Value<String?> colorID;
  final Value<int?> dJPlayCount;
  final Value<String?> imagePath;
  final Value<String?> masterDBID;
  final Value<String?> masterSongID;
  final Value<String?> analysisDataPath;
  final Value<String?> searchStr;
  final Value<int?> fileSize;
  final Value<int?> discNo;
  final Value<String?> composerID;
  final Value<String?> subtitle;
  final Value<int?> sampleRate;
  final Value<int?> disableQuantize;
  final Value<int?> analysed;
  final Value<String?> releaseDate;
  final Value<String?> dateCreated;
  final Value<int?> contentLink;
  final Value<String?> tag;
  final Value<String?> modifiedByRBM;
  final Value<String?> hotCueAutoLoad;
  final Value<String?> deliveryControl;
  final Value<String?> deliveryComment;
  final Value<String?> cueUpdated;
  final Value<String?> analysisUpdated;
  final Value<String?> trackInfoUpdated;
  final Value<String?> lyricist;
  final Value<String?> isrc;
  final Value<int?> samplerTrackInfo;
  final Value<int?> samplerPlayOffset;
  final Value<double?> samplerGain;
  final Value<String?> videoAssociate;
  final Value<int?> lyricStatus;
  final Value<int?> serviceID;
  final Value<String?> orgFolderPath;
  final Value<String?> reserved1;
  final Value<String?> reserved2;
  final Value<String?> reserved3;
  final Value<String?> reserved4;
  final Value<String?> extInfo;
  final Value<String?> rbFileId;
  final Value<String?> deviceID;
  final Value<String?> rbLocalFolderPath;
  final Value<String?> srcID;
  final Value<String?> srcTitle;
  final Value<String?> srcArtistName;
  final Value<String?> srcAlbumName;
  final Value<int?> srcLength;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdContentCompanion({
    this.id = const Value.absent(),
    this.folderPath = const Value.absent(),
    this.fileNameL = const Value.absent(),
    this.fileNameS = const Value.absent(),
    this.title = const Value.absent(),
    this.artistID = const Value.absent(),
    this.albumID = const Value.absent(),
    this.genreID = const Value.absent(),
    this.bpm = const Value.absent(),
    this.length = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.bitRate = const Value.absent(),
    this.bitDepth = const Value.absent(),
    this.commnt = const Value.absent(),
    this.fileType = const Value.absent(),
    this.rating = const Value.absent(),
    this.releaseYear = const Value.absent(),
    this.remixerID = const Value.absent(),
    this.labelID = const Value.absent(),
    this.orgArtistID = const Value.absent(),
    this.keyID = const Value.absent(),
    this.stockDate = const Value.absent(),
    this.colorID = const Value.absent(),
    this.dJPlayCount = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.masterDBID = const Value.absent(),
    this.masterSongID = const Value.absent(),
    this.analysisDataPath = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.fileSize = const Value.absent(),
    this.discNo = const Value.absent(),
    this.composerID = const Value.absent(),
    this.subtitle = const Value.absent(),
    this.sampleRate = const Value.absent(),
    this.disableQuantize = const Value.absent(),
    this.analysed = const Value.absent(),
    this.releaseDate = const Value.absent(),
    this.dateCreated = const Value.absent(),
    this.contentLink = const Value.absent(),
    this.tag = const Value.absent(),
    this.modifiedByRBM = const Value.absent(),
    this.hotCueAutoLoad = const Value.absent(),
    this.deliveryControl = const Value.absent(),
    this.deliveryComment = const Value.absent(),
    this.cueUpdated = const Value.absent(),
    this.analysisUpdated = const Value.absent(),
    this.trackInfoUpdated = const Value.absent(),
    this.lyricist = const Value.absent(),
    this.isrc = const Value.absent(),
    this.samplerTrackInfo = const Value.absent(),
    this.samplerPlayOffset = const Value.absent(),
    this.samplerGain = const Value.absent(),
    this.videoAssociate = const Value.absent(),
    this.lyricStatus = const Value.absent(),
    this.serviceID = const Value.absent(),
    this.orgFolderPath = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.extInfo = const Value.absent(),
    this.rbFileId = const Value.absent(),
    this.deviceID = const Value.absent(),
    this.rbLocalFolderPath = const Value.absent(),
    this.srcID = const Value.absent(),
    this.srcTitle = const Value.absent(),
    this.srcArtistName = const Value.absent(),
    this.srcAlbumName = const Value.absent(),
    this.srcLength = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdContentCompanion.insert({
    this.id = const Value.absent(),
    this.folderPath = const Value.absent(),
    this.fileNameL = const Value.absent(),
    this.fileNameS = const Value.absent(),
    this.title = const Value.absent(),
    this.artistID = const Value.absent(),
    this.albumID = const Value.absent(),
    this.genreID = const Value.absent(),
    this.bpm = const Value.absent(),
    this.length = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.bitRate = const Value.absent(),
    this.bitDepth = const Value.absent(),
    this.commnt = const Value.absent(),
    this.fileType = const Value.absent(),
    this.rating = const Value.absent(),
    this.releaseYear = const Value.absent(),
    this.remixerID = const Value.absent(),
    this.labelID = const Value.absent(),
    this.orgArtistID = const Value.absent(),
    this.keyID = const Value.absent(),
    this.stockDate = const Value.absent(),
    this.colorID = const Value.absent(),
    this.dJPlayCount = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.masterDBID = const Value.absent(),
    this.masterSongID = const Value.absent(),
    this.analysisDataPath = const Value.absent(),
    this.searchStr = const Value.absent(),
    this.fileSize = const Value.absent(),
    this.discNo = const Value.absent(),
    this.composerID = const Value.absent(),
    this.subtitle = const Value.absent(),
    this.sampleRate = const Value.absent(),
    this.disableQuantize = const Value.absent(),
    this.analysed = const Value.absent(),
    this.releaseDate = const Value.absent(),
    this.dateCreated = const Value.absent(),
    this.contentLink = const Value.absent(),
    this.tag = const Value.absent(),
    this.modifiedByRBM = const Value.absent(),
    this.hotCueAutoLoad = const Value.absent(),
    this.deliveryControl = const Value.absent(),
    this.deliveryComment = const Value.absent(),
    this.cueUpdated = const Value.absent(),
    this.analysisUpdated = const Value.absent(),
    this.trackInfoUpdated = const Value.absent(),
    this.lyricist = const Value.absent(),
    this.isrc = const Value.absent(),
    this.samplerTrackInfo = const Value.absent(),
    this.samplerPlayOffset = const Value.absent(),
    this.samplerGain = const Value.absent(),
    this.videoAssociate = const Value.absent(),
    this.lyricStatus = const Value.absent(),
    this.serviceID = const Value.absent(),
    this.orgFolderPath = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.extInfo = const Value.absent(),
    this.rbFileId = const Value.absent(),
    this.deviceID = const Value.absent(),
    this.rbLocalFolderPath = const Value.absent(),
    this.srcID = const Value.absent(),
    this.srcTitle = const Value.absent(),
    this.srcArtistName = const Value.absent(),
    this.srcAlbumName = const Value.absent(),
    this.srcLength = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdContentData> custom({
    Expression<String>? id,
    Expression<String>? folderPath,
    Expression<String>? fileNameL,
    Expression<String>? fileNameS,
    Expression<String>? title,
    Expression<String>? artistID,
    Expression<String>? albumID,
    Expression<String>? genreID,
    Expression<int>? bpm,
    Expression<int>? length,
    Expression<int>? trackNo,
    Expression<int>? bitRate,
    Expression<int>? bitDepth,
    Expression<String>? commnt,
    Expression<int>? fileType,
    Expression<int>? rating,
    Expression<int>? releaseYear,
    Expression<String>? remixerID,
    Expression<String>? labelID,
    Expression<String>? orgArtistID,
    Expression<String>? keyID,
    Expression<String>? stockDate,
    Expression<String>? colorID,
    Expression<int>? dJPlayCount,
    Expression<String>? imagePath,
    Expression<String>? masterDBID,
    Expression<String>? masterSongID,
    Expression<String>? analysisDataPath,
    Expression<String>? searchStr,
    Expression<int>? fileSize,
    Expression<int>? discNo,
    Expression<String>? composerID,
    Expression<String>? subtitle,
    Expression<int>? sampleRate,
    Expression<int>? disableQuantize,
    Expression<int>? analysed,
    Expression<String>? releaseDate,
    Expression<String>? dateCreated,
    Expression<int>? contentLink,
    Expression<String>? tag,
    Expression<String>? modifiedByRBM,
    Expression<String>? hotCueAutoLoad,
    Expression<String>? deliveryControl,
    Expression<String>? deliveryComment,
    Expression<String>? cueUpdated,
    Expression<String>? analysisUpdated,
    Expression<String>? trackInfoUpdated,
    Expression<String>? lyricist,
    Expression<String>? isrc,
    Expression<int>? samplerTrackInfo,
    Expression<int>? samplerPlayOffset,
    Expression<double>? samplerGain,
    Expression<String>? videoAssociate,
    Expression<int>? lyricStatus,
    Expression<int>? serviceID,
    Expression<String>? orgFolderPath,
    Expression<String>? reserved1,
    Expression<String>? reserved2,
    Expression<String>? reserved3,
    Expression<String>? reserved4,
    Expression<String>? extInfo,
    Expression<String>? rbFileId,
    Expression<String>? deviceID,
    Expression<String>? rbLocalFolderPath,
    Expression<String>? srcID,
    Expression<String>? srcTitle,
    Expression<String>? srcArtistName,
    Expression<String>? srcAlbumName,
    Expression<int>? srcLength,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (folderPath != null) 'FolderPath': folderPath,
      if (fileNameL != null) 'FileNameL': fileNameL,
      if (fileNameS != null) 'FileNameS': fileNameS,
      if (title != null) 'Title': title,
      if (artistID != null) 'ArtistID': artistID,
      if (albumID != null) 'AlbumID': albumID,
      if (genreID != null) 'GenreID': genreID,
      if (bpm != null) 'BPM': bpm,
      if (length != null) 'Length': length,
      if (trackNo != null) 'TrackNo': trackNo,
      if (bitRate != null) 'BitRate': bitRate,
      if (bitDepth != null) 'BitDepth': bitDepth,
      if (commnt != null) 'Commnt': commnt,
      if (fileType != null) 'FileType': fileType,
      if (rating != null) 'Rating': rating,
      if (releaseYear != null) 'ReleaseYear': releaseYear,
      if (remixerID != null) 'RemixerID': remixerID,
      if (labelID != null) 'LabelID': labelID,
      if (orgArtistID != null) 'OrgArtistID': orgArtistID,
      if (keyID != null) 'KeyID': keyID,
      if (stockDate != null) 'StockDate': stockDate,
      if (colorID != null) 'ColorID': colorID,
      if (dJPlayCount != null) 'DJPlayCount': dJPlayCount,
      if (imagePath != null) 'ImagePath': imagePath,
      if (masterDBID != null) 'MasterDBID': masterDBID,
      if (masterSongID != null) 'MasterSongID': masterSongID,
      if (analysisDataPath != null) 'AnalysisDataPath': analysisDataPath,
      if (searchStr != null) 'SearchStr': searchStr,
      if (fileSize != null) 'FileSize': fileSize,
      if (discNo != null) 'DiscNo': discNo,
      if (composerID != null) 'ComposerID': composerID,
      if (subtitle != null) 'Subtitle': subtitle,
      if (sampleRate != null) 'SampleRate': sampleRate,
      if (disableQuantize != null) 'DisableQuantize': disableQuantize,
      if (analysed != null) 'Analysed': analysed,
      if (releaseDate != null) 'ReleaseDate': releaseDate,
      if (dateCreated != null) 'DateCreated': dateCreated,
      if (contentLink != null) 'ContentLink': contentLink,
      if (tag != null) 'Tag': tag,
      if (modifiedByRBM != null) 'ModifiedByRBM': modifiedByRBM,
      if (hotCueAutoLoad != null) 'HotCueAutoLoad': hotCueAutoLoad,
      if (deliveryControl != null) 'DeliveryControl': deliveryControl,
      if (deliveryComment != null) 'DeliveryComment': deliveryComment,
      if (cueUpdated != null) 'CueUpdated': cueUpdated,
      if (analysisUpdated != null) 'AnalysisUpdated': analysisUpdated,
      if (trackInfoUpdated != null) 'TrackInfoUpdated': trackInfoUpdated,
      if (lyricist != null) 'Lyricist': lyricist,
      if (isrc != null) 'ISRC': isrc,
      if (samplerTrackInfo != null) 'SamplerTrackInfo': samplerTrackInfo,
      if (samplerPlayOffset != null) 'SamplerPlayOffset': samplerPlayOffset,
      if (samplerGain != null) 'SamplerGain': samplerGain,
      if (videoAssociate != null) 'VideoAssociate': videoAssociate,
      if (lyricStatus != null) 'LyricStatus': lyricStatus,
      if (serviceID != null) 'ServiceID': serviceID,
      if (orgFolderPath != null) 'OrgFolderPath': orgFolderPath,
      if (reserved1 != null) 'Reserved1': reserved1,
      if (reserved2 != null) 'Reserved2': reserved2,
      if (reserved3 != null) 'Reserved3': reserved3,
      if (reserved4 != null) 'Reserved4': reserved4,
      if (extInfo != null) 'ExtInfo': extInfo,
      if (rbFileId != null) 'rb_file_id': rbFileId,
      if (deviceID != null) 'DeviceID': deviceID,
      if (rbLocalFolderPath != null) 'rb_LocalFolderPath': rbLocalFolderPath,
      if (srcID != null) 'SrcID': srcID,
      if (srcTitle != null) 'SrcTitle': srcTitle,
      if (srcArtistName != null) 'SrcArtistName': srcArtistName,
      if (srcAlbumName != null) 'SrcAlbumName': srcAlbumName,
      if (srcLength != null) 'SrcLength': srcLength,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdContentCompanion copyWith({
    Value<String?>? id,
    Value<String?>? folderPath,
    Value<String?>? fileNameL,
    Value<String?>? fileNameS,
    Value<String?>? title,
    Value<String?>? artistID,
    Value<String?>? albumID,
    Value<String?>? genreID,
    Value<int?>? bpm,
    Value<int?>? length,
    Value<int?>? trackNo,
    Value<int?>? bitRate,
    Value<int?>? bitDepth,
    Value<String?>? commnt,
    Value<int?>? fileType,
    Value<int?>? rating,
    Value<int?>? releaseYear,
    Value<String?>? remixerID,
    Value<String?>? labelID,
    Value<String?>? orgArtistID,
    Value<String?>? keyID,
    Value<String?>? stockDate,
    Value<String?>? colorID,
    Value<int?>? dJPlayCount,
    Value<String?>? imagePath,
    Value<String?>? masterDBID,
    Value<String?>? masterSongID,
    Value<String?>? analysisDataPath,
    Value<String?>? searchStr,
    Value<int?>? fileSize,
    Value<int?>? discNo,
    Value<String?>? composerID,
    Value<String?>? subtitle,
    Value<int?>? sampleRate,
    Value<int?>? disableQuantize,
    Value<int?>? analysed,
    Value<String?>? releaseDate,
    Value<String?>? dateCreated,
    Value<int?>? contentLink,
    Value<String?>? tag,
    Value<String?>? modifiedByRBM,
    Value<String?>? hotCueAutoLoad,
    Value<String?>? deliveryControl,
    Value<String?>? deliveryComment,
    Value<String?>? cueUpdated,
    Value<String?>? analysisUpdated,
    Value<String?>? trackInfoUpdated,
    Value<String?>? lyricist,
    Value<String?>? isrc,
    Value<int?>? samplerTrackInfo,
    Value<int?>? samplerPlayOffset,
    Value<double?>? samplerGain,
    Value<String?>? videoAssociate,
    Value<int?>? lyricStatus,
    Value<int?>? serviceID,
    Value<String?>? orgFolderPath,
    Value<String?>? reserved1,
    Value<String?>? reserved2,
    Value<String?>? reserved3,
    Value<String?>? reserved4,
    Value<String?>? extInfo,
    Value<String?>? rbFileId,
    Value<String?>? deviceID,
    Value<String?>? rbLocalFolderPath,
    Value<String?>? srcID,
    Value<String?>? srcTitle,
    Value<String?>? srcArtistName,
    Value<String?>? srcAlbumName,
    Value<int?>? srcLength,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdContentCompanion(
      id: id ?? this.id,
      folderPath: folderPath ?? this.folderPath,
      fileNameL: fileNameL ?? this.fileNameL,
      fileNameS: fileNameS ?? this.fileNameS,
      title: title ?? this.title,
      artistID: artistID ?? this.artistID,
      albumID: albumID ?? this.albumID,
      genreID: genreID ?? this.genreID,
      bpm: bpm ?? this.bpm,
      length: length ?? this.length,
      trackNo: trackNo ?? this.trackNo,
      bitRate: bitRate ?? this.bitRate,
      bitDepth: bitDepth ?? this.bitDepth,
      commnt: commnt ?? this.commnt,
      fileType: fileType ?? this.fileType,
      rating: rating ?? this.rating,
      releaseYear: releaseYear ?? this.releaseYear,
      remixerID: remixerID ?? this.remixerID,
      labelID: labelID ?? this.labelID,
      orgArtistID: orgArtistID ?? this.orgArtistID,
      keyID: keyID ?? this.keyID,
      stockDate: stockDate ?? this.stockDate,
      colorID: colorID ?? this.colorID,
      dJPlayCount: dJPlayCount ?? this.dJPlayCount,
      imagePath: imagePath ?? this.imagePath,
      masterDBID: masterDBID ?? this.masterDBID,
      masterSongID: masterSongID ?? this.masterSongID,
      analysisDataPath: analysisDataPath ?? this.analysisDataPath,
      searchStr: searchStr ?? this.searchStr,
      fileSize: fileSize ?? this.fileSize,
      discNo: discNo ?? this.discNo,
      composerID: composerID ?? this.composerID,
      subtitle: subtitle ?? this.subtitle,
      sampleRate: sampleRate ?? this.sampleRate,
      disableQuantize: disableQuantize ?? this.disableQuantize,
      analysed: analysed ?? this.analysed,
      releaseDate: releaseDate ?? this.releaseDate,
      dateCreated: dateCreated ?? this.dateCreated,
      contentLink: contentLink ?? this.contentLink,
      tag: tag ?? this.tag,
      modifiedByRBM: modifiedByRBM ?? this.modifiedByRBM,
      hotCueAutoLoad: hotCueAutoLoad ?? this.hotCueAutoLoad,
      deliveryControl: deliveryControl ?? this.deliveryControl,
      deliveryComment: deliveryComment ?? this.deliveryComment,
      cueUpdated: cueUpdated ?? this.cueUpdated,
      analysisUpdated: analysisUpdated ?? this.analysisUpdated,
      trackInfoUpdated: trackInfoUpdated ?? this.trackInfoUpdated,
      lyricist: lyricist ?? this.lyricist,
      isrc: isrc ?? this.isrc,
      samplerTrackInfo: samplerTrackInfo ?? this.samplerTrackInfo,
      samplerPlayOffset: samplerPlayOffset ?? this.samplerPlayOffset,
      samplerGain: samplerGain ?? this.samplerGain,
      videoAssociate: videoAssociate ?? this.videoAssociate,
      lyricStatus: lyricStatus ?? this.lyricStatus,
      serviceID: serviceID ?? this.serviceID,
      orgFolderPath: orgFolderPath ?? this.orgFolderPath,
      reserved1: reserved1 ?? this.reserved1,
      reserved2: reserved2 ?? this.reserved2,
      reserved3: reserved3 ?? this.reserved3,
      reserved4: reserved4 ?? this.reserved4,
      extInfo: extInfo ?? this.extInfo,
      rbFileId: rbFileId ?? this.rbFileId,
      deviceID: deviceID ?? this.deviceID,
      rbLocalFolderPath: rbLocalFolderPath ?? this.rbLocalFolderPath,
      srcID: srcID ?? this.srcID,
      srcTitle: srcTitle ?? this.srcTitle,
      srcArtistName: srcArtistName ?? this.srcArtistName,
      srcAlbumName: srcAlbumName ?? this.srcAlbumName,
      srcLength: srcLength ?? this.srcLength,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (folderPath.present) {
      map['FolderPath'] = Variable<String>(folderPath.value);
    }
    if (fileNameL.present) {
      map['FileNameL'] = Variable<String>(fileNameL.value);
    }
    if (fileNameS.present) {
      map['FileNameS'] = Variable<String>(fileNameS.value);
    }
    if (title.present) {
      map['Title'] = Variable<String>(title.value);
    }
    if (artistID.present) {
      map['ArtistID'] = Variable<String>(artistID.value);
    }
    if (albumID.present) {
      map['AlbumID'] = Variable<String>(albumID.value);
    }
    if (genreID.present) {
      map['GenreID'] = Variable<String>(genreID.value);
    }
    if (bpm.present) {
      map['BPM'] = Variable<int>(bpm.value);
    }
    if (length.present) {
      map['Length'] = Variable<int>(length.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (bitRate.present) {
      map['BitRate'] = Variable<int>(bitRate.value);
    }
    if (bitDepth.present) {
      map['BitDepth'] = Variable<int>(bitDepth.value);
    }
    if (commnt.present) {
      map['Commnt'] = Variable<String>(commnt.value);
    }
    if (fileType.present) {
      map['FileType'] = Variable<int>(fileType.value);
    }
    if (rating.present) {
      map['Rating'] = Variable<int>(rating.value);
    }
    if (releaseYear.present) {
      map['ReleaseYear'] = Variable<int>(releaseYear.value);
    }
    if (remixerID.present) {
      map['RemixerID'] = Variable<String>(remixerID.value);
    }
    if (labelID.present) {
      map['LabelID'] = Variable<String>(labelID.value);
    }
    if (orgArtistID.present) {
      map['OrgArtistID'] = Variable<String>(orgArtistID.value);
    }
    if (keyID.present) {
      map['KeyID'] = Variable<String>(keyID.value);
    }
    if (stockDate.present) {
      map['StockDate'] = Variable<String>(stockDate.value);
    }
    if (colorID.present) {
      map['ColorID'] = Variable<String>(colorID.value);
    }
    if (dJPlayCount.present) {
      map['DJPlayCount'] = Variable<int>(dJPlayCount.value);
    }
    if (imagePath.present) {
      map['ImagePath'] = Variable<String>(imagePath.value);
    }
    if (masterDBID.present) {
      map['MasterDBID'] = Variable<String>(masterDBID.value);
    }
    if (masterSongID.present) {
      map['MasterSongID'] = Variable<String>(masterSongID.value);
    }
    if (analysisDataPath.present) {
      map['AnalysisDataPath'] = Variable<String>(analysisDataPath.value);
    }
    if (searchStr.present) {
      map['SearchStr'] = Variable<String>(searchStr.value);
    }
    if (fileSize.present) {
      map['FileSize'] = Variable<int>(fileSize.value);
    }
    if (discNo.present) {
      map['DiscNo'] = Variable<int>(discNo.value);
    }
    if (composerID.present) {
      map['ComposerID'] = Variable<String>(composerID.value);
    }
    if (subtitle.present) {
      map['Subtitle'] = Variable<String>(subtitle.value);
    }
    if (sampleRate.present) {
      map['SampleRate'] = Variable<int>(sampleRate.value);
    }
    if (disableQuantize.present) {
      map['DisableQuantize'] = Variable<int>(disableQuantize.value);
    }
    if (analysed.present) {
      map['Analysed'] = Variable<int>(analysed.value);
    }
    if (releaseDate.present) {
      map['ReleaseDate'] = Variable<String>(releaseDate.value);
    }
    if (dateCreated.present) {
      map['DateCreated'] = Variable<String>(dateCreated.value);
    }
    if (contentLink.present) {
      map['ContentLink'] = Variable<int>(contentLink.value);
    }
    if (tag.present) {
      map['Tag'] = Variable<String>(tag.value);
    }
    if (modifiedByRBM.present) {
      map['ModifiedByRBM'] = Variable<String>(modifiedByRBM.value);
    }
    if (hotCueAutoLoad.present) {
      map['HotCueAutoLoad'] = Variable<String>(hotCueAutoLoad.value);
    }
    if (deliveryControl.present) {
      map['DeliveryControl'] = Variable<String>(deliveryControl.value);
    }
    if (deliveryComment.present) {
      map['DeliveryComment'] = Variable<String>(deliveryComment.value);
    }
    if (cueUpdated.present) {
      map['CueUpdated'] = Variable<String>(cueUpdated.value);
    }
    if (analysisUpdated.present) {
      map['AnalysisUpdated'] = Variable<String>(analysisUpdated.value);
    }
    if (trackInfoUpdated.present) {
      map['TrackInfoUpdated'] = Variable<String>(trackInfoUpdated.value);
    }
    if (lyricist.present) {
      map['Lyricist'] = Variable<String>(lyricist.value);
    }
    if (isrc.present) {
      map['ISRC'] = Variable<String>(isrc.value);
    }
    if (samplerTrackInfo.present) {
      map['SamplerTrackInfo'] = Variable<int>(samplerTrackInfo.value);
    }
    if (samplerPlayOffset.present) {
      map['SamplerPlayOffset'] = Variable<int>(samplerPlayOffset.value);
    }
    if (samplerGain.present) {
      map['SamplerGain'] = Variable<double>(samplerGain.value);
    }
    if (videoAssociate.present) {
      map['VideoAssociate'] = Variable<String>(videoAssociate.value);
    }
    if (lyricStatus.present) {
      map['LyricStatus'] = Variable<int>(lyricStatus.value);
    }
    if (serviceID.present) {
      map['ServiceID'] = Variable<int>(serviceID.value);
    }
    if (orgFolderPath.present) {
      map['OrgFolderPath'] = Variable<String>(orgFolderPath.value);
    }
    if (reserved1.present) {
      map['Reserved1'] = Variable<String>(reserved1.value);
    }
    if (reserved2.present) {
      map['Reserved2'] = Variable<String>(reserved2.value);
    }
    if (reserved3.present) {
      map['Reserved3'] = Variable<String>(reserved3.value);
    }
    if (reserved4.present) {
      map['Reserved4'] = Variable<String>(reserved4.value);
    }
    if (extInfo.present) {
      map['ExtInfo'] = Variable<String>(extInfo.value);
    }
    if (rbFileId.present) {
      map['rb_file_id'] = Variable<String>(rbFileId.value);
    }
    if (deviceID.present) {
      map['DeviceID'] = Variable<String>(deviceID.value);
    }
    if (rbLocalFolderPath.present) {
      map['rb_LocalFolderPath'] = Variable<String>(rbLocalFolderPath.value);
    }
    if (srcID.present) {
      map['SrcID'] = Variable<String>(srcID.value);
    }
    if (srcTitle.present) {
      map['SrcTitle'] = Variable<String>(srcTitle.value);
    }
    if (srcArtistName.present) {
      map['SrcArtistName'] = Variable<String>(srcArtistName.value);
    }
    if (srcAlbumName.present) {
      map['SrcAlbumName'] = Variable<String>(srcAlbumName.value);
    }
    if (srcLength.present) {
      map['SrcLength'] = Variable<int>(srcLength.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdContentCompanion(')
          ..write('id: $id, ')
          ..write('folderPath: $folderPath, ')
          ..write('fileNameL: $fileNameL, ')
          ..write('fileNameS: $fileNameS, ')
          ..write('title: $title, ')
          ..write('artistID: $artistID, ')
          ..write('albumID: $albumID, ')
          ..write('genreID: $genreID, ')
          ..write('bpm: $bpm, ')
          ..write('length: $length, ')
          ..write('trackNo: $trackNo, ')
          ..write('bitRate: $bitRate, ')
          ..write('bitDepth: $bitDepth, ')
          ..write('commnt: $commnt, ')
          ..write('fileType: $fileType, ')
          ..write('rating: $rating, ')
          ..write('releaseYear: $releaseYear, ')
          ..write('remixerID: $remixerID, ')
          ..write('labelID: $labelID, ')
          ..write('orgArtistID: $orgArtistID, ')
          ..write('keyID: $keyID, ')
          ..write('stockDate: $stockDate, ')
          ..write('colorID: $colorID, ')
          ..write('dJPlayCount: $dJPlayCount, ')
          ..write('imagePath: $imagePath, ')
          ..write('masterDBID: $masterDBID, ')
          ..write('masterSongID: $masterSongID, ')
          ..write('analysisDataPath: $analysisDataPath, ')
          ..write('searchStr: $searchStr, ')
          ..write('fileSize: $fileSize, ')
          ..write('discNo: $discNo, ')
          ..write('composerID: $composerID, ')
          ..write('subtitle: $subtitle, ')
          ..write('sampleRate: $sampleRate, ')
          ..write('disableQuantize: $disableQuantize, ')
          ..write('analysed: $analysed, ')
          ..write('releaseDate: $releaseDate, ')
          ..write('dateCreated: $dateCreated, ')
          ..write('contentLink: $contentLink, ')
          ..write('tag: $tag, ')
          ..write('modifiedByRBM: $modifiedByRBM, ')
          ..write('hotCueAutoLoad: $hotCueAutoLoad, ')
          ..write('deliveryControl: $deliveryControl, ')
          ..write('deliveryComment: $deliveryComment, ')
          ..write('cueUpdated: $cueUpdated, ')
          ..write('analysisUpdated: $analysisUpdated, ')
          ..write('trackInfoUpdated: $trackInfoUpdated, ')
          ..write('lyricist: $lyricist, ')
          ..write('isrc: $isrc, ')
          ..write('samplerTrackInfo: $samplerTrackInfo, ')
          ..write('samplerPlayOffset: $samplerPlayOffset, ')
          ..write('samplerGain: $samplerGain, ')
          ..write('videoAssociate: $videoAssociate, ')
          ..write('lyricStatus: $lyricStatus, ')
          ..write('serviceID: $serviceID, ')
          ..write('orgFolderPath: $orgFolderPath, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('extInfo: $extInfo, ')
          ..write('rbFileId: $rbFileId, ')
          ..write('deviceID: $deviceID, ')
          ..write('rbLocalFolderPath: $rbLocalFolderPath, ')
          ..write('srcID: $srcID, ')
          ..write('srcTitle: $srcTitle, ')
          ..write('srcArtistName: $srcArtistName, ')
          ..write('srcAlbumName: $srcAlbumName, ')
          ..write('srcLength: $srcLength, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdCue extends Table with TableInfo<DjmdCue, DjmdCueData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdCue(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMsecMeta = const VerificationMeta('inMsec');
  late final GeneratedColumn<int> inMsec = GeneratedColumn<int>(
    'InMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inFrameMeta = const VerificationMeta(
    'inFrame',
  );
  late final GeneratedColumn<int> inFrame = GeneratedColumn<int>(
    'InFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMpegFrameMeta = const VerificationMeta(
    'inMpegFrame',
  );
  late final GeneratedColumn<int> inMpegFrame = GeneratedColumn<int>(
    'InMpegFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMpegAbsMeta = const VerificationMeta(
    'inMpegAbs',
  );
  late final GeneratedColumn<int> inMpegAbs = GeneratedColumn<int>(
    'InMpegAbs',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMsecMeta = const VerificationMeta(
    'outMsec',
  );
  late final GeneratedColumn<int> outMsec = GeneratedColumn<int>(
    'OutMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outFrameMeta = const VerificationMeta(
    'outFrame',
  );
  late final GeneratedColumn<int> outFrame = GeneratedColumn<int>(
    'OutFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMpegFrameMeta = const VerificationMeta(
    'outMpegFrame',
  );
  late final GeneratedColumn<int> outMpegFrame = GeneratedColumn<int>(
    'OutMpegFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMpegAbsMeta = const VerificationMeta(
    'outMpegAbs',
  );
  late final GeneratedColumn<int> outMpegAbs = GeneratedColumn<int>(
    'OutMpegAbs',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _kindMeta = const VerificationMeta('kind');
  late final GeneratedColumn<int> kind = GeneratedColumn<int>(
    'Kind',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _colorMeta = const VerificationMeta('color');
  late final GeneratedColumn<int> color = GeneratedColumn<int>(
    'Color',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _colorTableIndexMeta = const VerificationMeta(
    'colorTableIndex',
  );
  late final GeneratedColumn<int> colorTableIndex = GeneratedColumn<int>(
    'ColorTableIndex',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _activeLoopMeta = const VerificationMeta(
    'activeLoop',
  );
  late final GeneratedColumn<int> activeLoop = GeneratedColumn<int>(
    'ActiveLoop',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _commentMeta = const VerificationMeta(
    'comment',
  );
  late final GeneratedColumn<String> comment = GeneratedColumn<String>(
    'Comment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _beatLoopSizeMeta = const VerificationMeta(
    'beatLoopSize',
  );
  late final GeneratedColumn<int> beatLoopSize = GeneratedColumn<int>(
    'BeatLoopSize',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cueMicrosecMeta = const VerificationMeta(
    'cueMicrosec',
  );
  late final GeneratedColumn<int> cueMicrosec = GeneratedColumn<int>(
    'CueMicrosec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inPointSeekInfoMeta = const VerificationMeta(
    'inPointSeekInfo',
  );
  late final GeneratedColumn<String> inPointSeekInfo = GeneratedColumn<String>(
    'InPointSeekInfo',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outPointSeekInfoMeta = const VerificationMeta(
    'outPointSeekInfo',
  );
  late final GeneratedColumn<String> outPointSeekInfo = GeneratedColumn<String>(
    'OutPointSeekInfo',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentUUIDMeta = const VerificationMeta(
    'contentUUID',
  );
  late final GeneratedColumn<String> contentUUID = GeneratedColumn<String>(
    'ContentUUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    inMsec,
    inFrame,
    inMpegFrame,
    inMpegAbs,
    outMsec,
    outFrame,
    outMpegFrame,
    outMpegAbs,
    kind,
    color,
    colorTableIndex,
    activeLoop,
    comment,
    beatLoopSize,
    cueMicrosec,
    inPointSeekInfo,
    outPointSeekInfo,
    contentUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdCue';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdCueData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('InMsec')) {
      context.handle(
        _inMsecMeta,
        inMsec.isAcceptableOrUnknown(data['InMsec']!, _inMsecMeta),
      );
    }
    if (data.containsKey('InFrame')) {
      context.handle(
        _inFrameMeta,
        inFrame.isAcceptableOrUnknown(data['InFrame']!, _inFrameMeta),
      );
    }
    if (data.containsKey('InMpegFrame')) {
      context.handle(
        _inMpegFrameMeta,
        inMpegFrame.isAcceptableOrUnknown(
          data['InMpegFrame']!,
          _inMpegFrameMeta,
        ),
      );
    }
    if (data.containsKey('InMpegAbs')) {
      context.handle(
        _inMpegAbsMeta,
        inMpegAbs.isAcceptableOrUnknown(data['InMpegAbs']!, _inMpegAbsMeta),
      );
    }
    if (data.containsKey('OutMsec')) {
      context.handle(
        _outMsecMeta,
        outMsec.isAcceptableOrUnknown(data['OutMsec']!, _outMsecMeta),
      );
    }
    if (data.containsKey('OutFrame')) {
      context.handle(
        _outFrameMeta,
        outFrame.isAcceptableOrUnknown(data['OutFrame']!, _outFrameMeta),
      );
    }
    if (data.containsKey('OutMpegFrame')) {
      context.handle(
        _outMpegFrameMeta,
        outMpegFrame.isAcceptableOrUnknown(
          data['OutMpegFrame']!,
          _outMpegFrameMeta,
        ),
      );
    }
    if (data.containsKey('OutMpegAbs')) {
      context.handle(
        _outMpegAbsMeta,
        outMpegAbs.isAcceptableOrUnknown(data['OutMpegAbs']!, _outMpegAbsMeta),
      );
    }
    if (data.containsKey('Kind')) {
      context.handle(
        _kindMeta,
        kind.isAcceptableOrUnknown(data['Kind']!, _kindMeta),
      );
    }
    if (data.containsKey('Color')) {
      context.handle(
        _colorMeta,
        color.isAcceptableOrUnknown(data['Color']!, _colorMeta),
      );
    }
    if (data.containsKey('ColorTableIndex')) {
      context.handle(
        _colorTableIndexMeta,
        colorTableIndex.isAcceptableOrUnknown(
          data['ColorTableIndex']!,
          _colorTableIndexMeta,
        ),
      );
    }
    if (data.containsKey('ActiveLoop')) {
      context.handle(
        _activeLoopMeta,
        activeLoop.isAcceptableOrUnknown(data['ActiveLoop']!, _activeLoopMeta),
      );
    }
    if (data.containsKey('Comment')) {
      context.handle(
        _commentMeta,
        comment.isAcceptableOrUnknown(data['Comment']!, _commentMeta),
      );
    }
    if (data.containsKey('BeatLoopSize')) {
      context.handle(
        _beatLoopSizeMeta,
        beatLoopSize.isAcceptableOrUnknown(
          data['BeatLoopSize']!,
          _beatLoopSizeMeta,
        ),
      );
    }
    if (data.containsKey('CueMicrosec')) {
      context.handle(
        _cueMicrosecMeta,
        cueMicrosec.isAcceptableOrUnknown(
          data['CueMicrosec']!,
          _cueMicrosecMeta,
        ),
      );
    }
    if (data.containsKey('InPointSeekInfo')) {
      context.handle(
        _inPointSeekInfoMeta,
        inPointSeekInfo.isAcceptableOrUnknown(
          data['InPointSeekInfo']!,
          _inPointSeekInfoMeta,
        ),
      );
    }
    if (data.containsKey('OutPointSeekInfo')) {
      context.handle(
        _outPointSeekInfoMeta,
        outPointSeekInfo.isAcceptableOrUnknown(
          data['OutPointSeekInfo']!,
          _outPointSeekInfoMeta,
        ),
      );
    }
    if (data.containsKey('ContentUUID')) {
      context.handle(
        _contentUUIDMeta,
        contentUUID.isAcceptableOrUnknown(
          data['ContentUUID']!,
          _contentUUIDMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdCueData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdCueData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      inMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMsec'],
      ),
      inFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InFrame'],
      ),
      inMpegFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMpegFrame'],
      ),
      inMpegAbs: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMpegAbs'],
      ),
      outMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMsec'],
      ),
      outFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutFrame'],
      ),
      outMpegFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMpegFrame'],
      ),
      outMpegAbs: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMpegAbs'],
      ),
      kind: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Kind'],
      ),
      color: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Color'],
      ),
      colorTableIndex: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ColorTableIndex'],
      ),
      activeLoop: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ActiveLoop'],
      ),
      comment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Comment'],
      ),
      beatLoopSize: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}BeatLoopSize'],
      ),
      cueMicrosec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}CueMicrosec'],
      ),
      inPointSeekInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}InPointSeekInfo'],
      ),
      outPointSeekInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}OutPointSeekInfo'],
      ),
      contentUUID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentUUID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdCue createAlias(String alias) {
    return DjmdCue(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdCueData extends DataClass implements Insertable<DjmdCueData> {
  final String? id;
  final String? contentID;
  final int? inMsec;
  final int? inFrame;
  final int? inMpegFrame;
  final int? inMpegAbs;
  final int? outMsec;
  final int? outFrame;
  final int? outMpegFrame;
  final int? outMpegAbs;
  final int? kind;
  final int? color;
  final int? colorTableIndex;
  final int? activeLoop;
  final String? comment;
  final int? beatLoopSize;
  final int? cueMicrosec;
  final String? inPointSeekInfo;
  final String? outPointSeekInfo;
  final String? contentUUID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdCueData({
    this.id,
    this.contentID,
    this.inMsec,
    this.inFrame,
    this.inMpegFrame,
    this.inMpegAbs,
    this.outMsec,
    this.outFrame,
    this.outMpegFrame,
    this.outMpegAbs,
    this.kind,
    this.color,
    this.colorTableIndex,
    this.activeLoop,
    this.comment,
    this.beatLoopSize,
    this.cueMicrosec,
    this.inPointSeekInfo,
    this.outPointSeekInfo,
    this.contentUUID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || inMsec != null) {
      map['InMsec'] = Variable<int>(inMsec);
    }
    if (!nullToAbsent || inFrame != null) {
      map['InFrame'] = Variable<int>(inFrame);
    }
    if (!nullToAbsent || inMpegFrame != null) {
      map['InMpegFrame'] = Variable<int>(inMpegFrame);
    }
    if (!nullToAbsent || inMpegAbs != null) {
      map['InMpegAbs'] = Variable<int>(inMpegAbs);
    }
    if (!nullToAbsent || outMsec != null) {
      map['OutMsec'] = Variable<int>(outMsec);
    }
    if (!nullToAbsent || outFrame != null) {
      map['OutFrame'] = Variable<int>(outFrame);
    }
    if (!nullToAbsent || outMpegFrame != null) {
      map['OutMpegFrame'] = Variable<int>(outMpegFrame);
    }
    if (!nullToAbsent || outMpegAbs != null) {
      map['OutMpegAbs'] = Variable<int>(outMpegAbs);
    }
    if (!nullToAbsent || kind != null) {
      map['Kind'] = Variable<int>(kind);
    }
    if (!nullToAbsent || color != null) {
      map['Color'] = Variable<int>(color);
    }
    if (!nullToAbsent || colorTableIndex != null) {
      map['ColorTableIndex'] = Variable<int>(colorTableIndex);
    }
    if (!nullToAbsent || activeLoop != null) {
      map['ActiveLoop'] = Variable<int>(activeLoop);
    }
    if (!nullToAbsent || comment != null) {
      map['Comment'] = Variable<String>(comment);
    }
    if (!nullToAbsent || beatLoopSize != null) {
      map['BeatLoopSize'] = Variable<int>(beatLoopSize);
    }
    if (!nullToAbsent || cueMicrosec != null) {
      map['CueMicrosec'] = Variable<int>(cueMicrosec);
    }
    if (!nullToAbsent || inPointSeekInfo != null) {
      map['InPointSeekInfo'] = Variable<String>(inPointSeekInfo);
    }
    if (!nullToAbsent || outPointSeekInfo != null) {
      map['OutPointSeekInfo'] = Variable<String>(outPointSeekInfo);
    }
    if (!nullToAbsent || contentUUID != null) {
      map['ContentUUID'] = Variable<String>(contentUUID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdCueCompanion toCompanion(bool nullToAbsent) {
    return DjmdCueCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      inMsec: inMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(inMsec),
      inFrame: inFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(inFrame),
      inMpegFrame: inMpegFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(inMpegFrame),
      inMpegAbs: inMpegAbs == null && nullToAbsent
          ? const Value.absent()
          : Value(inMpegAbs),
      outMsec: outMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(outMsec),
      outFrame: outFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(outFrame),
      outMpegFrame: outMpegFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(outMpegFrame),
      outMpegAbs: outMpegAbs == null && nullToAbsent
          ? const Value.absent()
          : Value(outMpegAbs),
      kind: kind == null && nullToAbsent ? const Value.absent() : Value(kind),
      color: color == null && nullToAbsent
          ? const Value.absent()
          : Value(color),
      colorTableIndex: colorTableIndex == null && nullToAbsent
          ? const Value.absent()
          : Value(colorTableIndex),
      activeLoop: activeLoop == null && nullToAbsent
          ? const Value.absent()
          : Value(activeLoop),
      comment: comment == null && nullToAbsent
          ? const Value.absent()
          : Value(comment),
      beatLoopSize: beatLoopSize == null && nullToAbsent
          ? const Value.absent()
          : Value(beatLoopSize),
      cueMicrosec: cueMicrosec == null && nullToAbsent
          ? const Value.absent()
          : Value(cueMicrosec),
      inPointSeekInfo: inPointSeekInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(inPointSeekInfo),
      outPointSeekInfo: outPointSeekInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(outPointSeekInfo),
      contentUUID: contentUUID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentUUID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdCueData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdCueData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      inMsec: serializer.fromJson<int?>(json['InMsec']),
      inFrame: serializer.fromJson<int?>(json['InFrame']),
      inMpegFrame: serializer.fromJson<int?>(json['InMpegFrame']),
      inMpegAbs: serializer.fromJson<int?>(json['InMpegAbs']),
      outMsec: serializer.fromJson<int?>(json['OutMsec']),
      outFrame: serializer.fromJson<int?>(json['OutFrame']),
      outMpegFrame: serializer.fromJson<int?>(json['OutMpegFrame']),
      outMpegAbs: serializer.fromJson<int?>(json['OutMpegAbs']),
      kind: serializer.fromJson<int?>(json['Kind']),
      color: serializer.fromJson<int?>(json['Color']),
      colorTableIndex: serializer.fromJson<int?>(json['ColorTableIndex']),
      activeLoop: serializer.fromJson<int?>(json['ActiveLoop']),
      comment: serializer.fromJson<String?>(json['Comment']),
      beatLoopSize: serializer.fromJson<int?>(json['BeatLoopSize']),
      cueMicrosec: serializer.fromJson<int?>(json['CueMicrosec']),
      inPointSeekInfo: serializer.fromJson<String?>(json['InPointSeekInfo']),
      outPointSeekInfo: serializer.fromJson<String?>(json['OutPointSeekInfo']),
      contentUUID: serializer.fromJson<String?>(json['ContentUUID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'InMsec': serializer.toJson<int?>(inMsec),
      'InFrame': serializer.toJson<int?>(inFrame),
      'InMpegFrame': serializer.toJson<int?>(inMpegFrame),
      'InMpegAbs': serializer.toJson<int?>(inMpegAbs),
      'OutMsec': serializer.toJson<int?>(outMsec),
      'OutFrame': serializer.toJson<int?>(outFrame),
      'OutMpegFrame': serializer.toJson<int?>(outMpegFrame),
      'OutMpegAbs': serializer.toJson<int?>(outMpegAbs),
      'Kind': serializer.toJson<int?>(kind),
      'Color': serializer.toJson<int?>(color),
      'ColorTableIndex': serializer.toJson<int?>(colorTableIndex),
      'ActiveLoop': serializer.toJson<int?>(activeLoop),
      'Comment': serializer.toJson<String?>(comment),
      'BeatLoopSize': serializer.toJson<int?>(beatLoopSize),
      'CueMicrosec': serializer.toJson<int?>(cueMicrosec),
      'InPointSeekInfo': serializer.toJson<String?>(inPointSeekInfo),
      'OutPointSeekInfo': serializer.toJson<String?>(outPointSeekInfo),
      'ContentUUID': serializer.toJson<String?>(contentUUID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdCueData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> inMsec = const Value.absent(),
    Value<int?> inFrame = const Value.absent(),
    Value<int?> inMpegFrame = const Value.absent(),
    Value<int?> inMpegAbs = const Value.absent(),
    Value<int?> outMsec = const Value.absent(),
    Value<int?> outFrame = const Value.absent(),
    Value<int?> outMpegFrame = const Value.absent(),
    Value<int?> outMpegAbs = const Value.absent(),
    Value<int?> kind = const Value.absent(),
    Value<int?> color = const Value.absent(),
    Value<int?> colorTableIndex = const Value.absent(),
    Value<int?> activeLoop = const Value.absent(),
    Value<String?> comment = const Value.absent(),
    Value<int?> beatLoopSize = const Value.absent(),
    Value<int?> cueMicrosec = const Value.absent(),
    Value<String?> inPointSeekInfo = const Value.absent(),
    Value<String?> outPointSeekInfo = const Value.absent(),
    Value<String?> contentUUID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdCueData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    inMsec: inMsec.present ? inMsec.value : this.inMsec,
    inFrame: inFrame.present ? inFrame.value : this.inFrame,
    inMpegFrame: inMpegFrame.present ? inMpegFrame.value : this.inMpegFrame,
    inMpegAbs: inMpegAbs.present ? inMpegAbs.value : this.inMpegAbs,
    outMsec: outMsec.present ? outMsec.value : this.outMsec,
    outFrame: outFrame.present ? outFrame.value : this.outFrame,
    outMpegFrame: outMpegFrame.present ? outMpegFrame.value : this.outMpegFrame,
    outMpegAbs: outMpegAbs.present ? outMpegAbs.value : this.outMpegAbs,
    kind: kind.present ? kind.value : this.kind,
    color: color.present ? color.value : this.color,
    colorTableIndex: colorTableIndex.present
        ? colorTableIndex.value
        : this.colorTableIndex,
    activeLoop: activeLoop.present ? activeLoop.value : this.activeLoop,
    comment: comment.present ? comment.value : this.comment,
    beatLoopSize: beatLoopSize.present ? beatLoopSize.value : this.beatLoopSize,
    cueMicrosec: cueMicrosec.present ? cueMicrosec.value : this.cueMicrosec,
    inPointSeekInfo: inPointSeekInfo.present
        ? inPointSeekInfo.value
        : this.inPointSeekInfo,
    outPointSeekInfo: outPointSeekInfo.present
        ? outPointSeekInfo.value
        : this.outPointSeekInfo,
    contentUUID: contentUUID.present ? contentUUID.value : this.contentUUID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdCueData copyWithCompanion(DjmdCueCompanion data) {
    return DjmdCueData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      inMsec: data.inMsec.present ? data.inMsec.value : this.inMsec,
      inFrame: data.inFrame.present ? data.inFrame.value : this.inFrame,
      inMpegFrame: data.inMpegFrame.present
          ? data.inMpegFrame.value
          : this.inMpegFrame,
      inMpegAbs: data.inMpegAbs.present ? data.inMpegAbs.value : this.inMpegAbs,
      outMsec: data.outMsec.present ? data.outMsec.value : this.outMsec,
      outFrame: data.outFrame.present ? data.outFrame.value : this.outFrame,
      outMpegFrame: data.outMpegFrame.present
          ? data.outMpegFrame.value
          : this.outMpegFrame,
      outMpegAbs: data.outMpegAbs.present
          ? data.outMpegAbs.value
          : this.outMpegAbs,
      kind: data.kind.present ? data.kind.value : this.kind,
      color: data.color.present ? data.color.value : this.color,
      colorTableIndex: data.colorTableIndex.present
          ? data.colorTableIndex.value
          : this.colorTableIndex,
      activeLoop: data.activeLoop.present
          ? data.activeLoop.value
          : this.activeLoop,
      comment: data.comment.present ? data.comment.value : this.comment,
      beatLoopSize: data.beatLoopSize.present
          ? data.beatLoopSize.value
          : this.beatLoopSize,
      cueMicrosec: data.cueMicrosec.present
          ? data.cueMicrosec.value
          : this.cueMicrosec,
      inPointSeekInfo: data.inPointSeekInfo.present
          ? data.inPointSeekInfo.value
          : this.inPointSeekInfo,
      outPointSeekInfo: data.outPointSeekInfo.present
          ? data.outPointSeekInfo.value
          : this.outPointSeekInfo,
      contentUUID: data.contentUUID.present
          ? data.contentUUID.value
          : this.contentUUID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCueData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('inMsec: $inMsec, ')
          ..write('inFrame: $inFrame, ')
          ..write('inMpegFrame: $inMpegFrame, ')
          ..write('inMpegAbs: $inMpegAbs, ')
          ..write('outMsec: $outMsec, ')
          ..write('outFrame: $outFrame, ')
          ..write('outMpegFrame: $outMpegFrame, ')
          ..write('outMpegAbs: $outMpegAbs, ')
          ..write('kind: $kind, ')
          ..write('color: $color, ')
          ..write('colorTableIndex: $colorTableIndex, ')
          ..write('activeLoop: $activeLoop, ')
          ..write('comment: $comment, ')
          ..write('beatLoopSize: $beatLoopSize, ')
          ..write('cueMicrosec: $cueMicrosec, ')
          ..write('inPointSeekInfo: $inPointSeekInfo, ')
          ..write('outPointSeekInfo: $outPointSeekInfo, ')
          ..write('contentUUID: $contentUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    contentID,
    inMsec,
    inFrame,
    inMpegFrame,
    inMpegAbs,
    outMsec,
    outFrame,
    outMpegFrame,
    outMpegAbs,
    kind,
    color,
    colorTableIndex,
    activeLoop,
    comment,
    beatLoopSize,
    cueMicrosec,
    inPointSeekInfo,
    outPointSeekInfo,
    contentUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdCueData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.inMsec == this.inMsec &&
          other.inFrame == this.inFrame &&
          other.inMpegFrame == this.inMpegFrame &&
          other.inMpegAbs == this.inMpegAbs &&
          other.outMsec == this.outMsec &&
          other.outFrame == this.outFrame &&
          other.outMpegFrame == this.outMpegFrame &&
          other.outMpegAbs == this.outMpegAbs &&
          other.kind == this.kind &&
          other.color == this.color &&
          other.colorTableIndex == this.colorTableIndex &&
          other.activeLoop == this.activeLoop &&
          other.comment == this.comment &&
          other.beatLoopSize == this.beatLoopSize &&
          other.cueMicrosec == this.cueMicrosec &&
          other.inPointSeekInfo == this.inPointSeekInfo &&
          other.outPointSeekInfo == this.outPointSeekInfo &&
          other.contentUUID == this.contentUUID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdCueCompanion extends UpdateCompanion<DjmdCueData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<int?> inMsec;
  final Value<int?> inFrame;
  final Value<int?> inMpegFrame;
  final Value<int?> inMpegAbs;
  final Value<int?> outMsec;
  final Value<int?> outFrame;
  final Value<int?> outMpegFrame;
  final Value<int?> outMpegAbs;
  final Value<int?> kind;
  final Value<int?> color;
  final Value<int?> colorTableIndex;
  final Value<int?> activeLoop;
  final Value<String?> comment;
  final Value<int?> beatLoopSize;
  final Value<int?> cueMicrosec;
  final Value<String?> inPointSeekInfo;
  final Value<String?> outPointSeekInfo;
  final Value<String?> contentUUID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdCueCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.inFrame = const Value.absent(),
    this.inMpegFrame = const Value.absent(),
    this.inMpegAbs = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.outFrame = const Value.absent(),
    this.outMpegFrame = const Value.absent(),
    this.outMpegAbs = const Value.absent(),
    this.kind = const Value.absent(),
    this.color = const Value.absent(),
    this.colorTableIndex = const Value.absent(),
    this.activeLoop = const Value.absent(),
    this.comment = const Value.absent(),
    this.beatLoopSize = const Value.absent(),
    this.cueMicrosec = const Value.absent(),
    this.inPointSeekInfo = const Value.absent(),
    this.outPointSeekInfo = const Value.absent(),
    this.contentUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdCueCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.inFrame = const Value.absent(),
    this.inMpegFrame = const Value.absent(),
    this.inMpegAbs = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.outFrame = const Value.absent(),
    this.outMpegFrame = const Value.absent(),
    this.outMpegAbs = const Value.absent(),
    this.kind = const Value.absent(),
    this.color = const Value.absent(),
    this.colorTableIndex = const Value.absent(),
    this.activeLoop = const Value.absent(),
    this.comment = const Value.absent(),
    this.beatLoopSize = const Value.absent(),
    this.cueMicrosec = const Value.absent(),
    this.inPointSeekInfo = const Value.absent(),
    this.outPointSeekInfo = const Value.absent(),
    this.contentUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdCueData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<int>? inMsec,
    Expression<int>? inFrame,
    Expression<int>? inMpegFrame,
    Expression<int>? inMpegAbs,
    Expression<int>? outMsec,
    Expression<int>? outFrame,
    Expression<int>? outMpegFrame,
    Expression<int>? outMpegAbs,
    Expression<int>? kind,
    Expression<int>? color,
    Expression<int>? colorTableIndex,
    Expression<int>? activeLoop,
    Expression<String>? comment,
    Expression<int>? beatLoopSize,
    Expression<int>? cueMicrosec,
    Expression<String>? inPointSeekInfo,
    Expression<String>? outPointSeekInfo,
    Expression<String>? contentUUID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (inMsec != null) 'InMsec': inMsec,
      if (inFrame != null) 'InFrame': inFrame,
      if (inMpegFrame != null) 'InMpegFrame': inMpegFrame,
      if (inMpegAbs != null) 'InMpegAbs': inMpegAbs,
      if (outMsec != null) 'OutMsec': outMsec,
      if (outFrame != null) 'OutFrame': outFrame,
      if (outMpegFrame != null) 'OutMpegFrame': outMpegFrame,
      if (outMpegAbs != null) 'OutMpegAbs': outMpegAbs,
      if (kind != null) 'Kind': kind,
      if (color != null) 'Color': color,
      if (colorTableIndex != null) 'ColorTableIndex': colorTableIndex,
      if (activeLoop != null) 'ActiveLoop': activeLoop,
      if (comment != null) 'Comment': comment,
      if (beatLoopSize != null) 'BeatLoopSize': beatLoopSize,
      if (cueMicrosec != null) 'CueMicrosec': cueMicrosec,
      if (inPointSeekInfo != null) 'InPointSeekInfo': inPointSeekInfo,
      if (outPointSeekInfo != null) 'OutPointSeekInfo': outPointSeekInfo,
      if (contentUUID != null) 'ContentUUID': contentUUID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdCueCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<int?>? inMsec,
    Value<int?>? inFrame,
    Value<int?>? inMpegFrame,
    Value<int?>? inMpegAbs,
    Value<int?>? outMsec,
    Value<int?>? outFrame,
    Value<int?>? outMpegFrame,
    Value<int?>? outMpegAbs,
    Value<int?>? kind,
    Value<int?>? color,
    Value<int?>? colorTableIndex,
    Value<int?>? activeLoop,
    Value<String?>? comment,
    Value<int?>? beatLoopSize,
    Value<int?>? cueMicrosec,
    Value<String?>? inPointSeekInfo,
    Value<String?>? outPointSeekInfo,
    Value<String?>? contentUUID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdCueCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      inMsec: inMsec ?? this.inMsec,
      inFrame: inFrame ?? this.inFrame,
      inMpegFrame: inMpegFrame ?? this.inMpegFrame,
      inMpegAbs: inMpegAbs ?? this.inMpegAbs,
      outMsec: outMsec ?? this.outMsec,
      outFrame: outFrame ?? this.outFrame,
      outMpegFrame: outMpegFrame ?? this.outMpegFrame,
      outMpegAbs: outMpegAbs ?? this.outMpegAbs,
      kind: kind ?? this.kind,
      color: color ?? this.color,
      colorTableIndex: colorTableIndex ?? this.colorTableIndex,
      activeLoop: activeLoop ?? this.activeLoop,
      comment: comment ?? this.comment,
      beatLoopSize: beatLoopSize ?? this.beatLoopSize,
      cueMicrosec: cueMicrosec ?? this.cueMicrosec,
      inPointSeekInfo: inPointSeekInfo ?? this.inPointSeekInfo,
      outPointSeekInfo: outPointSeekInfo ?? this.outPointSeekInfo,
      contentUUID: contentUUID ?? this.contentUUID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (inMsec.present) {
      map['InMsec'] = Variable<int>(inMsec.value);
    }
    if (inFrame.present) {
      map['InFrame'] = Variable<int>(inFrame.value);
    }
    if (inMpegFrame.present) {
      map['InMpegFrame'] = Variable<int>(inMpegFrame.value);
    }
    if (inMpegAbs.present) {
      map['InMpegAbs'] = Variable<int>(inMpegAbs.value);
    }
    if (outMsec.present) {
      map['OutMsec'] = Variable<int>(outMsec.value);
    }
    if (outFrame.present) {
      map['OutFrame'] = Variable<int>(outFrame.value);
    }
    if (outMpegFrame.present) {
      map['OutMpegFrame'] = Variable<int>(outMpegFrame.value);
    }
    if (outMpegAbs.present) {
      map['OutMpegAbs'] = Variable<int>(outMpegAbs.value);
    }
    if (kind.present) {
      map['Kind'] = Variable<int>(kind.value);
    }
    if (color.present) {
      map['Color'] = Variable<int>(color.value);
    }
    if (colorTableIndex.present) {
      map['ColorTableIndex'] = Variable<int>(colorTableIndex.value);
    }
    if (activeLoop.present) {
      map['ActiveLoop'] = Variable<int>(activeLoop.value);
    }
    if (comment.present) {
      map['Comment'] = Variable<String>(comment.value);
    }
    if (beatLoopSize.present) {
      map['BeatLoopSize'] = Variable<int>(beatLoopSize.value);
    }
    if (cueMicrosec.present) {
      map['CueMicrosec'] = Variable<int>(cueMicrosec.value);
    }
    if (inPointSeekInfo.present) {
      map['InPointSeekInfo'] = Variable<String>(inPointSeekInfo.value);
    }
    if (outPointSeekInfo.present) {
      map['OutPointSeekInfo'] = Variable<String>(outPointSeekInfo.value);
    }
    if (contentUUID.present) {
      map['ContentUUID'] = Variable<String>(contentUUID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdCueCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('inMsec: $inMsec, ')
          ..write('inFrame: $inFrame, ')
          ..write('inMpegFrame: $inMpegFrame, ')
          ..write('inMpegAbs: $inMpegAbs, ')
          ..write('outMsec: $outMsec, ')
          ..write('outFrame: $outFrame, ')
          ..write('outMpegFrame: $outMpegFrame, ')
          ..write('outMpegAbs: $outMpegAbs, ')
          ..write('kind: $kind, ')
          ..write('color: $color, ')
          ..write('colorTableIndex: $colorTableIndex, ')
          ..write('activeLoop: $activeLoop, ')
          ..write('comment: $comment, ')
          ..write('beatLoopSize: $beatLoopSize, ')
          ..write('cueMicrosec: $cueMicrosec, ')
          ..write('inPointSeekInfo: $inPointSeekInfo, ')
          ..write('outPointSeekInfo: $outPointSeekInfo, ')
          ..write('contentUUID: $contentUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdDevice extends Table with TableInfo<DjmdDevice, DjmdDeviceData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdDevice(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _masterDBIDMeta = const VerificationMeta(
    'masterDBID',
  );
  late final GeneratedColumn<String> masterDBID = GeneratedColumn<String>(
    'MasterDBID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    masterDBID,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdDevice';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdDeviceData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('MasterDBID')) {
      context.handle(
        _masterDBIDMeta,
        masterDBID.isAcceptableOrUnknown(data['MasterDBID']!, _masterDBIDMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdDeviceData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdDeviceData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      masterDBID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MasterDBID'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdDevice createAlias(String alias) {
    return DjmdDevice(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdDeviceData extends DataClass implements Insertable<DjmdDeviceData> {
  final String? id;
  final String? masterDBID;
  final String? name;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdDeviceData({
    this.id,
    this.masterDBID,
    this.name,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || masterDBID != null) {
      map['MasterDBID'] = Variable<String>(masterDBID);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdDeviceCompanion toCompanion(bool nullToAbsent) {
    return DjmdDeviceCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      masterDBID: masterDBID == null && nullToAbsent
          ? const Value.absent()
          : Value(masterDBID),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdDeviceData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdDeviceData(
      id: serializer.fromJson<String?>(json['ID']),
      masterDBID: serializer.fromJson<String?>(json['MasterDBID']),
      name: serializer.fromJson<String?>(json['Name']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'MasterDBID': serializer.toJson<String?>(masterDBID),
      'Name': serializer.toJson<String?>(name),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdDeviceData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> masterDBID = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdDeviceData(
    id: id.present ? id.value : this.id,
    masterDBID: masterDBID.present ? masterDBID.value : this.masterDBID,
    name: name.present ? name.value : this.name,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdDeviceData copyWithCompanion(DjmdDeviceCompanion data) {
    return DjmdDeviceData(
      id: data.id.present ? data.id.value : this.id,
      masterDBID: data.masterDBID.present
          ? data.masterDBID.value
          : this.masterDBID,
      name: data.name.present ? data.name.value : this.name,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdDeviceData(')
          ..write('id: $id, ')
          ..write('masterDBID: $masterDBID, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    masterDBID,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdDeviceData &&
          other.id == this.id &&
          other.masterDBID == this.masterDBID &&
          other.name == this.name &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdDeviceCompanion extends UpdateCompanion<DjmdDeviceData> {
  final Value<String?> id;
  final Value<String?> masterDBID;
  final Value<String?> name;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdDeviceCompanion({
    this.id = const Value.absent(),
    this.masterDBID = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdDeviceCompanion.insert({
    this.id = const Value.absent(),
    this.masterDBID = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdDeviceData> custom({
    Expression<String>? id,
    Expression<String>? masterDBID,
    Expression<String>? name,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (masterDBID != null) 'MasterDBID': masterDBID,
      if (name != null) 'Name': name,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdDeviceCompanion copyWith({
    Value<String?>? id,
    Value<String?>? masterDBID,
    Value<String?>? name,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdDeviceCompanion(
      id: id ?? this.id,
      masterDBID: masterDBID ?? this.masterDBID,
      name: name ?? this.name,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (masterDBID.present) {
      map['MasterDBID'] = Variable<String>(masterDBID.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdDeviceCompanion(')
          ..write('id: $id, ')
          ..write('masterDBID: $masterDBID, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdGenre extends Table with TableInfo<DjmdGenre, DjmdGenreData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdGenre(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdGenre';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdGenreData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdGenreData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdGenreData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdGenre createAlias(String alias) {
    return DjmdGenre(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdGenreData extends DataClass implements Insertable<DjmdGenreData> {
  final String? id;
  final String? name;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdGenreData({
    this.id,
    this.name,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdGenreCompanion toCompanion(bool nullToAbsent) {
    return DjmdGenreCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdGenreData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdGenreData(
      id: serializer.fromJson<String?>(json['ID']),
      name: serializer.fromJson<String?>(json['Name']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Name': serializer.toJson<String?>(name),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdGenreData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdGenreData(
    id: id.present ? id.value : this.id,
    name: name.present ? name.value : this.name,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdGenreData copyWithCompanion(DjmdGenreCompanion data) {
    return DjmdGenreData(
      id: data.id.present ? data.id.value : this.id,
      name: data.name.present ? data.name.value : this.name,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdGenreData(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdGenreData &&
          other.id == this.id &&
          other.name == this.name &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdGenreCompanion extends UpdateCompanion<DjmdGenreData> {
  final Value<String?> id;
  final Value<String?> name;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdGenreCompanion({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdGenreCompanion.insert({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdGenreData> custom({
    Expression<String>? id,
    Expression<String>? name,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (name != null) 'Name': name,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdGenreCompanion copyWith({
    Value<String?>? id,
    Value<String?>? name,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdGenreCompanion(
      id: id ?? this.id,
      name: name ?? this.name,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdGenreCompanion(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdHistory extends Table with TableInfo<DjmdHistory, DjmdHistoryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdHistory(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _dateCreatedMeta = const VerificationMeta(
    'dateCreated',
  );
  late final GeneratedColumn<String> dateCreated = GeneratedColumn<String>(
    'DateCreated',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    attribute,
    parentID,
    dateCreated,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdHistory';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdHistoryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('DateCreated')) {
      context.handle(
        _dateCreatedMeta,
        dateCreated.isAcceptableOrUnknown(
          data['DateCreated']!,
          _dateCreatedMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdHistoryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdHistoryData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      dateCreated: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DateCreated'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdHistory createAlias(String alias) {
    return DjmdHistory(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdHistoryData extends DataClass implements Insertable<DjmdHistoryData> {
  final String? id;
  final int? seq;
  final String? name;
  final int? attribute;
  final String? parentID;
  final String? dateCreated;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdHistoryData({
    this.id,
    this.seq,
    this.name,
    this.attribute,
    this.parentID,
    this.dateCreated,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || dateCreated != null) {
      map['DateCreated'] = Variable<String>(dateCreated);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdHistoryCompanion toCompanion(bool nullToAbsent) {
    return DjmdHistoryCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      dateCreated: dateCreated == null && nullToAbsent
          ? const Value.absent()
          : Value(dateCreated),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdHistoryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdHistoryData(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      dateCreated: serializer.fromJson<String?>(json['DateCreated']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'DateCreated': serializer.toJson<String?>(dateCreated),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdHistoryData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> dateCreated = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdHistoryData(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    dateCreated: dateCreated.present ? dateCreated.value : this.dateCreated,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdHistoryData copyWithCompanion(DjmdHistoryCompanion data) {
    return DjmdHistoryData(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      dateCreated: data.dateCreated.present
          ? data.dateCreated.value
          : this.dateCreated,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdHistoryData(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('dateCreated: $dateCreated, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    attribute,
    parentID,
    dateCreated,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdHistoryData &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.dateCreated == this.dateCreated &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdHistoryCompanion extends UpdateCompanion<DjmdHistoryData> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> dateCreated;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdHistoryCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.dateCreated = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdHistoryCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.dateCreated = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdHistoryData> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? dateCreated,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (dateCreated != null) 'DateCreated': dateCreated,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdHistoryCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? dateCreated,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdHistoryCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      dateCreated: dateCreated ?? this.dateCreated,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (dateCreated.present) {
      map['DateCreated'] = Variable<String>(dateCreated.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdHistoryCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('dateCreated: $dateCreated, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdHotCueBanklist extends Table
    with TableInfo<DjmdHotCueBanklist, DjmdHotCueBanklistData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdHotCueBanklist(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imagePathMeta = const VerificationMeta(
    'imagePath',
  );
  late final GeneratedColumn<String> imagePath = GeneratedColumn<String>(
    'ImagePath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    imagePath,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdHotCueBanklist';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdHotCueBanklistData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('ImagePath')) {
      context.handle(
        _imagePathMeta,
        imagePath.isAcceptableOrUnknown(data['ImagePath']!, _imagePathMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdHotCueBanklistData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdHotCueBanklistData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      imagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ImagePath'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdHotCueBanklist createAlias(String alias) {
    return DjmdHotCueBanklist(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdHotCueBanklistData extends DataClass
    implements Insertable<DjmdHotCueBanklistData> {
  final String? id;
  final int? seq;
  final String? name;
  final String? imagePath;
  final int? attribute;
  final String? parentID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdHotCueBanklistData({
    this.id,
    this.seq,
    this.name,
    this.imagePath,
    this.attribute,
    this.parentID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || imagePath != null) {
      map['ImagePath'] = Variable<String>(imagePath);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdHotCueBanklistCompanion toCompanion(bool nullToAbsent) {
    return DjmdHotCueBanklistCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      imagePath: imagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(imagePath),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdHotCueBanklistData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdHotCueBanklistData(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      imagePath: serializer.fromJson<String?>(json['ImagePath']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'ImagePath': serializer.toJson<String?>(imagePath),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdHotCueBanklistData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> imagePath = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdHotCueBanklistData(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    imagePath: imagePath.present ? imagePath.value : this.imagePath,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdHotCueBanklistData copyWithCompanion(DjmdHotCueBanklistCompanion data) {
    return DjmdHotCueBanklistData(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      imagePath: data.imagePath.present ? data.imagePath.value : this.imagePath,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdHotCueBanklistData(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('imagePath: $imagePath, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    imagePath,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdHotCueBanklistData &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.imagePath == this.imagePath &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdHotCueBanklistCompanion
    extends UpdateCompanion<DjmdHotCueBanklistData> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<String?> imagePath;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdHotCueBanklistCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdHotCueBanklistCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdHotCueBanklistData> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<String>? imagePath,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (imagePath != null) 'ImagePath': imagePath,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdHotCueBanklistCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<String?>? imagePath,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdHotCueBanklistCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      imagePath: imagePath ?? this.imagePath,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (imagePath.present) {
      map['ImagePath'] = Variable<String>(imagePath.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdHotCueBanklistCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('imagePath: $imagePath, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdKey extends Table with TableInfo<DjmdKey, DjmdKeyData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdKey(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _scaleNameMeta = const VerificationMeta(
    'scaleName',
  );
  late final GeneratedColumn<String> scaleName = GeneratedColumn<String>(
    'ScaleName',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    scaleName,
    seq,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdKey';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdKeyData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ScaleName')) {
      context.handle(
        _scaleNameMeta,
        scaleName.isAcceptableOrUnknown(data['ScaleName']!, _scaleNameMeta),
      );
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdKeyData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdKeyData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      scaleName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ScaleName'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdKey createAlias(String alias) {
    return DjmdKey(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdKeyData extends DataClass implements Insertable<DjmdKeyData> {
  final String? id;
  final String? scaleName;
  final int? seq;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdKeyData({
    this.id,
    this.scaleName,
    this.seq,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || scaleName != null) {
      map['ScaleName'] = Variable<String>(scaleName);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdKeyCompanion toCompanion(bool nullToAbsent) {
    return DjmdKeyCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      scaleName: scaleName == null && nullToAbsent
          ? const Value.absent()
          : Value(scaleName),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdKeyData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdKeyData(
      id: serializer.fromJson<String?>(json['ID']),
      scaleName: serializer.fromJson<String?>(json['ScaleName']),
      seq: serializer.fromJson<int?>(json['Seq']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ScaleName': serializer.toJson<String?>(scaleName),
      'Seq': serializer.toJson<int?>(seq),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdKeyData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> scaleName = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdKeyData(
    id: id.present ? id.value : this.id,
    scaleName: scaleName.present ? scaleName.value : this.scaleName,
    seq: seq.present ? seq.value : this.seq,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdKeyData copyWithCompanion(DjmdKeyCompanion data) {
    return DjmdKeyData(
      id: data.id.present ? data.id.value : this.id,
      scaleName: data.scaleName.present ? data.scaleName.value : this.scaleName,
      seq: data.seq.present ? data.seq.value : this.seq,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdKeyData(')
          ..write('id: $id, ')
          ..write('scaleName: $scaleName, ')
          ..write('seq: $seq, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    scaleName,
    seq,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdKeyData &&
          other.id == this.id &&
          other.scaleName == this.scaleName &&
          other.seq == this.seq &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdKeyCompanion extends UpdateCompanion<DjmdKeyData> {
  final Value<String?> id;
  final Value<String?> scaleName;
  final Value<int?> seq;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdKeyCompanion({
    this.id = const Value.absent(),
    this.scaleName = const Value.absent(),
    this.seq = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdKeyCompanion.insert({
    this.id = const Value.absent(),
    this.scaleName = const Value.absent(),
    this.seq = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdKeyData> custom({
    Expression<String>? id,
    Expression<String>? scaleName,
    Expression<int>? seq,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (scaleName != null) 'ScaleName': scaleName,
      if (seq != null) 'Seq': seq,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdKeyCompanion copyWith({
    Value<String?>? id,
    Value<String?>? scaleName,
    Value<int?>? seq,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdKeyCompanion(
      id: id ?? this.id,
      scaleName: scaleName ?? this.scaleName,
      seq: seq ?? this.seq,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (scaleName.present) {
      map['ScaleName'] = Variable<String>(scaleName.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdKeyCompanion(')
          ..write('id: $id, ')
          ..write('scaleName: $scaleName, ')
          ..write('seq: $seq, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdLabel extends Table with TableInfo<DjmdLabel, DjmdLabelData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdLabel(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdLabel';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdLabelData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdLabelData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdLabelData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdLabel createAlias(String alias) {
    return DjmdLabel(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdLabelData extends DataClass implements Insertable<DjmdLabelData> {
  final String? id;
  final String? name;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdLabelData({
    this.id,
    this.name,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdLabelCompanion toCompanion(bool nullToAbsent) {
    return DjmdLabelCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdLabelData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdLabelData(
      id: serializer.fromJson<String?>(json['ID']),
      name: serializer.fromJson<String?>(json['Name']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Name': serializer.toJson<String?>(name),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdLabelData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdLabelData(
    id: id.present ? id.value : this.id,
    name: name.present ? name.value : this.name,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdLabelData copyWithCompanion(DjmdLabelCompanion data) {
    return DjmdLabelData(
      id: data.id.present ? data.id.value : this.id,
      name: data.name.present ? data.name.value : this.name,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdLabelData(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdLabelData &&
          other.id == this.id &&
          other.name == this.name &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdLabelCompanion extends UpdateCompanion<DjmdLabelData> {
  final Value<String?> id;
  final Value<String?> name;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdLabelCompanion({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdLabelCompanion.insert({
    this.id = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdLabelData> custom({
    Expression<String>? id,
    Expression<String>? name,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (name != null) 'Name': name,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdLabelCompanion copyWith({
    Value<String?>? id,
    Value<String?>? name,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdLabelCompanion(
      id: id ?? this.id,
      name: name ?? this.name,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdLabelCompanion(')
          ..write('id: $id, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdMenuItems extends Table with TableInfo<DjmdMenuItems, DjmdMenuItem> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdMenuItems(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _itemClassMeta = const VerificationMeta(
    'itemClass',
  );
  late final GeneratedColumn<int> itemClass = GeneratedColumn<int>(
    'ItemClass',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    itemClass,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdMenuItems';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdMenuItem> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ItemClass')) {
      context.handle(
        _itemClassMeta,
        itemClass.isAcceptableOrUnknown(data['ItemClass']!, _itemClassMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdMenuItem map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdMenuItem(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      itemClass: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ItemClass'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdMenuItems createAlias(String alias) {
    return DjmdMenuItems(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdMenuItem extends DataClass implements Insertable<DjmdMenuItem> {
  final String? id;
  final int? itemClass;
  final String? name;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdMenuItem({
    this.id,
    this.itemClass,
    this.name,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || itemClass != null) {
      map['ItemClass'] = Variable<int>(itemClass);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdMenuItemsCompanion toCompanion(bool nullToAbsent) {
    return DjmdMenuItemsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      itemClass: itemClass == null && nullToAbsent
          ? const Value.absent()
          : Value(itemClass),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdMenuItem.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdMenuItem(
      id: serializer.fromJson<String?>(json['ID']),
      itemClass: serializer.fromJson<int?>(json['ItemClass']),
      name: serializer.fromJson<String?>(json['Name']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ItemClass': serializer.toJson<int?>(itemClass),
      'Name': serializer.toJson<String?>(name),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdMenuItem copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> itemClass = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdMenuItem(
    id: id.present ? id.value : this.id,
    itemClass: itemClass.present ? itemClass.value : this.itemClass,
    name: name.present ? name.value : this.name,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdMenuItem copyWithCompanion(DjmdMenuItemsCompanion data) {
    return DjmdMenuItem(
      id: data.id.present ? data.id.value : this.id,
      itemClass: data.itemClass.present ? data.itemClass.value : this.itemClass,
      name: data.name.present ? data.name.value : this.name,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMenuItem(')
          ..write('id: $id, ')
          ..write('itemClass: $itemClass, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    itemClass,
    name,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdMenuItem &&
          other.id == this.id &&
          other.itemClass == this.itemClass &&
          other.name == this.name &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdMenuItemsCompanion extends UpdateCompanion<DjmdMenuItem> {
  final Value<String?> id;
  final Value<int?> itemClass;
  final Value<String?> name;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdMenuItemsCompanion({
    this.id = const Value.absent(),
    this.itemClass = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdMenuItemsCompanion.insert({
    this.id = const Value.absent(),
    this.itemClass = const Value.absent(),
    this.name = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdMenuItem> custom({
    Expression<String>? id,
    Expression<int>? itemClass,
    Expression<String>? name,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (itemClass != null) 'ItemClass': itemClass,
      if (name != null) 'Name': name,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdMenuItemsCompanion copyWith({
    Value<String?>? id,
    Value<int?>? itemClass,
    Value<String?>? name,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdMenuItemsCompanion(
      id: id ?? this.id,
      itemClass: itemClass ?? this.itemClass,
      name: name ?? this.name,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (itemClass.present) {
      map['ItemClass'] = Variable<int>(itemClass.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMenuItemsCompanion(')
          ..write('id: $id, ')
          ..write('itemClass: $itemClass, ')
          ..write('name: $name, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdMixerParam extends Table
    with TableInfo<DjmdMixerParam, DjmdMixerParamData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdMixerParam(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _gainHighMeta = const VerificationMeta(
    'gainHigh',
  );
  late final GeneratedColumn<int> gainHigh = GeneratedColumn<int>(
    'GainHigh',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _gainLowMeta = const VerificationMeta(
    'gainLow',
  );
  late final GeneratedColumn<int> gainLow = GeneratedColumn<int>(
    'GainLow',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _peakHighMeta = const VerificationMeta(
    'peakHigh',
  );
  late final GeneratedColumn<int> peakHigh = GeneratedColumn<int>(
    'PeakHigh',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _peakLowMeta = const VerificationMeta(
    'peakLow',
  );
  late final GeneratedColumn<int> peakLow = GeneratedColumn<int>(
    'PeakLow',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    gainHigh,
    gainLow,
    peakHigh,
    peakLow,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdMixerParam';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdMixerParamData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('GainHigh')) {
      context.handle(
        _gainHighMeta,
        gainHigh.isAcceptableOrUnknown(data['GainHigh']!, _gainHighMeta),
      );
    }
    if (data.containsKey('GainLow')) {
      context.handle(
        _gainLowMeta,
        gainLow.isAcceptableOrUnknown(data['GainLow']!, _gainLowMeta),
      );
    }
    if (data.containsKey('PeakHigh')) {
      context.handle(
        _peakHighMeta,
        peakHigh.isAcceptableOrUnknown(data['PeakHigh']!, _peakHighMeta),
      );
    }
    if (data.containsKey('PeakLow')) {
      context.handle(
        _peakLowMeta,
        peakLow.isAcceptableOrUnknown(data['PeakLow']!, _peakLowMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdMixerParamData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdMixerParamData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      gainHigh: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}GainHigh'],
      ),
      gainLow: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}GainLow'],
      ),
      peakHigh: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}PeakHigh'],
      ),
      peakLow: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}PeakLow'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdMixerParam createAlias(String alias) {
    return DjmdMixerParam(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdMixerParamData extends DataClass
    implements Insertable<DjmdMixerParamData> {
  final String? id;
  final String? contentID;
  final int? gainHigh;
  final int? gainLow;
  final int? peakHigh;
  final int? peakLow;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdMixerParamData({
    this.id,
    this.contentID,
    this.gainHigh,
    this.gainLow,
    this.peakHigh,
    this.peakLow,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || gainHigh != null) {
      map['GainHigh'] = Variable<int>(gainHigh);
    }
    if (!nullToAbsent || gainLow != null) {
      map['GainLow'] = Variable<int>(gainLow);
    }
    if (!nullToAbsent || peakHigh != null) {
      map['PeakHigh'] = Variable<int>(peakHigh);
    }
    if (!nullToAbsent || peakLow != null) {
      map['PeakLow'] = Variable<int>(peakLow);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdMixerParamCompanion toCompanion(bool nullToAbsent) {
    return DjmdMixerParamCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      gainHigh: gainHigh == null && nullToAbsent
          ? const Value.absent()
          : Value(gainHigh),
      gainLow: gainLow == null && nullToAbsent
          ? const Value.absent()
          : Value(gainLow),
      peakHigh: peakHigh == null && nullToAbsent
          ? const Value.absent()
          : Value(peakHigh),
      peakLow: peakLow == null && nullToAbsent
          ? const Value.absent()
          : Value(peakLow),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdMixerParamData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdMixerParamData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      gainHigh: serializer.fromJson<int?>(json['GainHigh']),
      gainLow: serializer.fromJson<int?>(json['GainLow']),
      peakHigh: serializer.fromJson<int?>(json['PeakHigh']),
      peakLow: serializer.fromJson<int?>(json['PeakLow']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'GainHigh': serializer.toJson<int?>(gainHigh),
      'GainLow': serializer.toJson<int?>(gainLow),
      'PeakHigh': serializer.toJson<int?>(peakHigh),
      'PeakLow': serializer.toJson<int?>(peakLow),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdMixerParamData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> gainHigh = const Value.absent(),
    Value<int?> gainLow = const Value.absent(),
    Value<int?> peakHigh = const Value.absent(),
    Value<int?> peakLow = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdMixerParamData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    gainHigh: gainHigh.present ? gainHigh.value : this.gainHigh,
    gainLow: gainLow.present ? gainLow.value : this.gainLow,
    peakHigh: peakHigh.present ? peakHigh.value : this.peakHigh,
    peakLow: peakLow.present ? peakLow.value : this.peakLow,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdMixerParamData copyWithCompanion(DjmdMixerParamCompanion data) {
    return DjmdMixerParamData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      gainHigh: data.gainHigh.present ? data.gainHigh.value : this.gainHigh,
      gainLow: data.gainLow.present ? data.gainLow.value : this.gainLow,
      peakHigh: data.peakHigh.present ? data.peakHigh.value : this.peakHigh,
      peakLow: data.peakLow.present ? data.peakLow.value : this.peakLow,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMixerParamData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('gainHigh: $gainHigh, ')
          ..write('gainLow: $gainLow, ')
          ..write('peakHigh: $peakHigh, ')
          ..write('peakLow: $peakLow, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID,
    gainHigh,
    gainLow,
    peakHigh,
    peakLow,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdMixerParamData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.gainHigh == this.gainHigh &&
          other.gainLow == this.gainLow &&
          other.peakHigh == this.peakHigh &&
          other.peakLow == this.peakLow &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdMixerParamCompanion extends UpdateCompanion<DjmdMixerParamData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<int?> gainHigh;
  final Value<int?> gainLow;
  final Value<int?> peakHigh;
  final Value<int?> peakLow;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdMixerParamCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.gainHigh = const Value.absent(),
    this.gainLow = const Value.absent(),
    this.peakHigh = const Value.absent(),
    this.peakLow = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdMixerParamCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.gainHigh = const Value.absent(),
    this.gainLow = const Value.absent(),
    this.peakHigh = const Value.absent(),
    this.peakLow = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdMixerParamData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<int>? gainHigh,
    Expression<int>? gainLow,
    Expression<int>? peakHigh,
    Expression<int>? peakLow,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (gainHigh != null) 'GainHigh': gainHigh,
      if (gainLow != null) 'GainLow': gainLow,
      if (peakHigh != null) 'PeakHigh': peakHigh,
      if (peakLow != null) 'PeakLow': peakLow,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdMixerParamCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<int?>? gainHigh,
    Value<int?>? gainLow,
    Value<int?>? peakHigh,
    Value<int?>? peakLow,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdMixerParamCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      gainHigh: gainHigh ?? this.gainHigh,
      gainLow: gainLow ?? this.gainLow,
      peakHigh: peakHigh ?? this.peakHigh,
      peakLow: peakLow ?? this.peakLow,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (gainHigh.present) {
      map['GainHigh'] = Variable<int>(gainHigh.value);
    }
    if (gainLow.present) {
      map['GainLow'] = Variable<int>(gainLow.value);
    }
    if (peakHigh.present) {
      map['PeakHigh'] = Variable<int>(peakHigh.value);
    }
    if (peakLow.present) {
      map['PeakLow'] = Variable<int>(peakLow.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMixerParamCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('gainHigh: $gainHigh, ')
          ..write('gainLow: $gainLow, ')
          ..write('peakHigh: $peakHigh, ')
          ..write('peakLow: $peakLow, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdMyTag extends Table with TableInfo<DjmdMyTag, DjmdMyTagData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdMyTag(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdMyTag';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdMyTagData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdMyTagData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdMyTagData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdMyTag createAlias(String alias) {
    return DjmdMyTag(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdMyTagData extends DataClass implements Insertable<DjmdMyTagData> {
  final String? id;
  final int? seq;
  final String? name;
  final int? attribute;
  final String? parentID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdMyTagData({
    this.id,
    this.seq,
    this.name,
    this.attribute,
    this.parentID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdMyTagCompanion toCompanion(bool nullToAbsent) {
    return DjmdMyTagCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdMyTagData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdMyTagData(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdMyTagData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdMyTagData(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdMyTagData copyWithCompanion(DjmdMyTagCompanion data) {
    return DjmdMyTagData(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMyTagData(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdMyTagData &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdMyTagCompanion extends UpdateCompanion<DjmdMyTagData> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdMyTagCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdMyTagCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdMyTagData> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdMyTagCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdMyTagCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdMyTagCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdPlaylist extends Table
    with TableInfo<DjmdPlaylist, DjmdPlaylistData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdPlaylist(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _imagePathMeta = const VerificationMeta(
    'imagePath',
  );
  late final GeneratedColumn<String> imagePath = GeneratedColumn<String>(
    'ImagePath',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _smartListMeta = const VerificationMeta(
    'smartList',
  );
  late final GeneratedColumn<String> smartList = GeneratedColumn<String>(
    'SmartList',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    imagePath,
    attribute,
    parentID,
    smartList,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdPlaylist';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdPlaylistData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('ImagePath')) {
      context.handle(
        _imagePathMeta,
        imagePath.isAcceptableOrUnknown(data['ImagePath']!, _imagePathMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('SmartList')) {
      context.handle(
        _smartListMeta,
        smartList.isAcceptableOrUnknown(data['SmartList']!, _smartListMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdPlaylistData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdPlaylistData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      imagePath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ImagePath'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      smartList: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SmartList'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdPlaylist createAlias(String alias) {
    return DjmdPlaylist(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdPlaylistData extends DataClass
    implements Insertable<DjmdPlaylistData> {
  final String? id;
  final int? seq;
  final String? name;
  final String? imagePath;
  final int? attribute;
  final String? parentID;
  final String? smartList;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdPlaylistData({
    this.id,
    this.seq,
    this.name,
    this.imagePath,
    this.attribute,
    this.parentID,
    this.smartList,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || imagePath != null) {
      map['ImagePath'] = Variable<String>(imagePath);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || smartList != null) {
      map['SmartList'] = Variable<String>(smartList);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdPlaylistCompanion toCompanion(bool nullToAbsent) {
    return DjmdPlaylistCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      imagePath: imagePath == null && nullToAbsent
          ? const Value.absent()
          : Value(imagePath),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      smartList: smartList == null && nullToAbsent
          ? const Value.absent()
          : Value(smartList),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdPlaylistData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdPlaylistData(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      imagePath: serializer.fromJson<String?>(json['ImagePath']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      smartList: serializer.fromJson<String?>(json['SmartList']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'ImagePath': serializer.toJson<String?>(imagePath),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'SmartList': serializer.toJson<String?>(smartList),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdPlaylistData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<String?> imagePath = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> smartList = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdPlaylistData(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    imagePath: imagePath.present ? imagePath.value : this.imagePath,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    smartList: smartList.present ? smartList.value : this.smartList,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdPlaylistData copyWithCompanion(DjmdPlaylistCompanion data) {
    return DjmdPlaylistData(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      imagePath: data.imagePath.present ? data.imagePath.value : this.imagePath,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      smartList: data.smartList.present ? data.smartList.value : this.smartList,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdPlaylistData(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('imagePath: $imagePath, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('smartList: $smartList, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    imagePath,
    attribute,
    parentID,
    smartList,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdPlaylistData &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.imagePath == this.imagePath &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.smartList == this.smartList &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdPlaylistCompanion extends UpdateCompanion<DjmdPlaylistData> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<String?> imagePath;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> smartList;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdPlaylistCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.smartList = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdPlaylistCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.imagePath = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.smartList = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdPlaylistData> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<String>? imagePath,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? smartList,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (imagePath != null) 'ImagePath': imagePath,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (smartList != null) 'SmartList': smartList,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdPlaylistCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<String?>? imagePath,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? smartList,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdPlaylistCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      imagePath: imagePath ?? this.imagePath,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      smartList: smartList ?? this.smartList,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (imagePath.present) {
      map['ImagePath'] = Variable<String>(imagePath.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (smartList.present) {
      map['SmartList'] = Variable<String>(smartList.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdPlaylistCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('imagePath: $imagePath, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('smartList: $smartList, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdProperty extends Table
    with TableInfo<DjmdProperty, DjmdPropertyData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdProperty(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _dbidMeta = const VerificationMeta('dbid');
  late final GeneratedColumn<String> dbid = GeneratedColumn<String>(
    'DBID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _dBVersionMeta = const VerificationMeta(
    'dBVersion',
  );
  late final GeneratedColumn<String> dBVersion = GeneratedColumn<String>(
    'DBVersion',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _baseDBDriveMeta = const VerificationMeta(
    'baseDBDrive',
  );
  late final GeneratedColumn<String> baseDBDrive = GeneratedColumn<String>(
    'BaseDBDrive',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _currentDBDriveMeta = const VerificationMeta(
    'currentDBDrive',
  );
  late final GeneratedColumn<String> currentDBDrive = GeneratedColumn<String>(
    'CurrentDBDrive',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _deviceIDMeta = const VerificationMeta(
    'deviceID',
  );
  late final GeneratedColumn<String> deviceID = GeneratedColumn<String>(
    'DeviceID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved1Meta = const VerificationMeta(
    'reserved1',
  );
  late final GeneratedColumn<String> reserved1 = GeneratedColumn<String>(
    'Reserved1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved2Meta = const VerificationMeta(
    'reserved2',
  );
  late final GeneratedColumn<String> reserved2 = GeneratedColumn<String>(
    'Reserved2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved3Meta = const VerificationMeta(
    'reserved3',
  );
  late final GeneratedColumn<String> reserved3 = GeneratedColumn<String>(
    'Reserved3',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved4Meta = const VerificationMeta(
    'reserved4',
  );
  late final GeneratedColumn<String> reserved4 = GeneratedColumn<String>(
    'Reserved4',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _reserved5Meta = const VerificationMeta(
    'reserved5',
  );
  late final GeneratedColumn<String> reserved5 = GeneratedColumn<String>(
    'Reserved5',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    dbid,
    dBVersion,
    baseDBDrive,
    currentDBDrive,
    deviceID,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    reserved5,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdProperty';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdPropertyData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('DBID')) {
      context.handle(
        _dbidMeta,
        dbid.isAcceptableOrUnknown(data['DBID']!, _dbidMeta),
      );
    }
    if (data.containsKey('DBVersion')) {
      context.handle(
        _dBVersionMeta,
        dBVersion.isAcceptableOrUnknown(data['DBVersion']!, _dBVersionMeta),
      );
    }
    if (data.containsKey('BaseDBDrive')) {
      context.handle(
        _baseDBDriveMeta,
        baseDBDrive.isAcceptableOrUnknown(
          data['BaseDBDrive']!,
          _baseDBDriveMeta,
        ),
      );
    }
    if (data.containsKey('CurrentDBDrive')) {
      context.handle(
        _currentDBDriveMeta,
        currentDBDrive.isAcceptableOrUnknown(
          data['CurrentDBDrive']!,
          _currentDBDriveMeta,
        ),
      );
    }
    if (data.containsKey('DeviceID')) {
      context.handle(
        _deviceIDMeta,
        deviceID.isAcceptableOrUnknown(data['DeviceID']!, _deviceIDMeta),
      );
    }
    if (data.containsKey('Reserved1')) {
      context.handle(
        _reserved1Meta,
        reserved1.isAcceptableOrUnknown(data['Reserved1']!, _reserved1Meta),
      );
    }
    if (data.containsKey('Reserved2')) {
      context.handle(
        _reserved2Meta,
        reserved2.isAcceptableOrUnknown(data['Reserved2']!, _reserved2Meta),
      );
    }
    if (data.containsKey('Reserved3')) {
      context.handle(
        _reserved3Meta,
        reserved3.isAcceptableOrUnknown(data['Reserved3']!, _reserved3Meta),
      );
    }
    if (data.containsKey('Reserved4')) {
      context.handle(
        _reserved4Meta,
        reserved4.isAcceptableOrUnknown(data['Reserved4']!, _reserved4Meta),
      );
    }
    if (data.containsKey('Reserved5')) {
      context.handle(
        _reserved5Meta,
        reserved5.isAcceptableOrUnknown(data['Reserved5']!, _reserved5Meta),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {dbid};
  @override
  DjmdPropertyData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdPropertyData(
      dbid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DBID'],
      ),
      dBVersion: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DBVersion'],
      ),
      baseDBDrive: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}BaseDBDrive'],
      ),
      currentDBDrive: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}CurrentDBDrive'],
      ),
      deviceID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}DeviceID'],
      ),
      reserved1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved1'],
      ),
      reserved2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved2'],
      ),
      reserved3: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved3'],
      ),
      reserved4: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved4'],
      ),
      reserved5: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Reserved5'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdProperty createAlias(String alias) {
    return DjmdProperty(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdPropertyData extends DataClass
    implements Insertable<DjmdPropertyData> {
  final String? dbid;
  final String? dBVersion;
  final String? baseDBDrive;
  final String? currentDBDrive;
  final String? deviceID;
  final String? reserved1;
  final String? reserved2;
  final String? reserved3;
  final String? reserved4;
  final String? reserved5;
  final String createdAt;
  final String updatedAt;
  const DjmdPropertyData({
    this.dbid,
    this.dBVersion,
    this.baseDBDrive,
    this.currentDBDrive,
    this.deviceID,
    this.reserved1,
    this.reserved2,
    this.reserved3,
    this.reserved4,
    this.reserved5,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || dbid != null) {
      map['DBID'] = Variable<String>(dbid);
    }
    if (!nullToAbsent || dBVersion != null) {
      map['DBVersion'] = Variable<String>(dBVersion);
    }
    if (!nullToAbsent || baseDBDrive != null) {
      map['BaseDBDrive'] = Variable<String>(baseDBDrive);
    }
    if (!nullToAbsent || currentDBDrive != null) {
      map['CurrentDBDrive'] = Variable<String>(currentDBDrive);
    }
    if (!nullToAbsent || deviceID != null) {
      map['DeviceID'] = Variable<String>(deviceID);
    }
    if (!nullToAbsent || reserved1 != null) {
      map['Reserved1'] = Variable<String>(reserved1);
    }
    if (!nullToAbsent || reserved2 != null) {
      map['Reserved2'] = Variable<String>(reserved2);
    }
    if (!nullToAbsent || reserved3 != null) {
      map['Reserved3'] = Variable<String>(reserved3);
    }
    if (!nullToAbsent || reserved4 != null) {
      map['Reserved4'] = Variable<String>(reserved4);
    }
    if (!nullToAbsent || reserved5 != null) {
      map['Reserved5'] = Variable<String>(reserved5);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdPropertyCompanion toCompanion(bool nullToAbsent) {
    return DjmdPropertyCompanion(
      dbid: dbid == null && nullToAbsent ? const Value.absent() : Value(dbid),
      dBVersion: dBVersion == null && nullToAbsent
          ? const Value.absent()
          : Value(dBVersion),
      baseDBDrive: baseDBDrive == null && nullToAbsent
          ? const Value.absent()
          : Value(baseDBDrive),
      currentDBDrive: currentDBDrive == null && nullToAbsent
          ? const Value.absent()
          : Value(currentDBDrive),
      deviceID: deviceID == null && nullToAbsent
          ? const Value.absent()
          : Value(deviceID),
      reserved1: reserved1 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved1),
      reserved2: reserved2 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved2),
      reserved3: reserved3 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved3),
      reserved4: reserved4 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved4),
      reserved5: reserved5 == null && nullToAbsent
          ? const Value.absent()
          : Value(reserved5),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdPropertyData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdPropertyData(
      dbid: serializer.fromJson<String?>(json['DBID']),
      dBVersion: serializer.fromJson<String?>(json['DBVersion']),
      baseDBDrive: serializer.fromJson<String?>(json['BaseDBDrive']),
      currentDBDrive: serializer.fromJson<String?>(json['CurrentDBDrive']),
      deviceID: serializer.fromJson<String?>(json['DeviceID']),
      reserved1: serializer.fromJson<String?>(json['Reserved1']),
      reserved2: serializer.fromJson<String?>(json['Reserved2']),
      reserved3: serializer.fromJson<String?>(json['Reserved3']),
      reserved4: serializer.fromJson<String?>(json['Reserved4']),
      reserved5: serializer.fromJson<String?>(json['Reserved5']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'DBID': serializer.toJson<String?>(dbid),
      'DBVersion': serializer.toJson<String?>(dBVersion),
      'BaseDBDrive': serializer.toJson<String?>(baseDBDrive),
      'CurrentDBDrive': serializer.toJson<String?>(currentDBDrive),
      'DeviceID': serializer.toJson<String?>(deviceID),
      'Reserved1': serializer.toJson<String?>(reserved1),
      'Reserved2': serializer.toJson<String?>(reserved2),
      'Reserved3': serializer.toJson<String?>(reserved3),
      'Reserved4': serializer.toJson<String?>(reserved4),
      'Reserved5': serializer.toJson<String?>(reserved5),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdPropertyData copyWith({
    Value<String?> dbid = const Value.absent(),
    Value<String?> dBVersion = const Value.absent(),
    Value<String?> baseDBDrive = const Value.absent(),
    Value<String?> currentDBDrive = const Value.absent(),
    Value<String?> deviceID = const Value.absent(),
    Value<String?> reserved1 = const Value.absent(),
    Value<String?> reserved2 = const Value.absent(),
    Value<String?> reserved3 = const Value.absent(),
    Value<String?> reserved4 = const Value.absent(),
    Value<String?> reserved5 = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdPropertyData(
    dbid: dbid.present ? dbid.value : this.dbid,
    dBVersion: dBVersion.present ? dBVersion.value : this.dBVersion,
    baseDBDrive: baseDBDrive.present ? baseDBDrive.value : this.baseDBDrive,
    currentDBDrive: currentDBDrive.present
        ? currentDBDrive.value
        : this.currentDBDrive,
    deviceID: deviceID.present ? deviceID.value : this.deviceID,
    reserved1: reserved1.present ? reserved1.value : this.reserved1,
    reserved2: reserved2.present ? reserved2.value : this.reserved2,
    reserved3: reserved3.present ? reserved3.value : this.reserved3,
    reserved4: reserved4.present ? reserved4.value : this.reserved4,
    reserved5: reserved5.present ? reserved5.value : this.reserved5,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdPropertyData copyWithCompanion(DjmdPropertyCompanion data) {
    return DjmdPropertyData(
      dbid: data.dbid.present ? data.dbid.value : this.dbid,
      dBVersion: data.dBVersion.present ? data.dBVersion.value : this.dBVersion,
      baseDBDrive: data.baseDBDrive.present
          ? data.baseDBDrive.value
          : this.baseDBDrive,
      currentDBDrive: data.currentDBDrive.present
          ? data.currentDBDrive.value
          : this.currentDBDrive,
      deviceID: data.deviceID.present ? data.deviceID.value : this.deviceID,
      reserved1: data.reserved1.present ? data.reserved1.value : this.reserved1,
      reserved2: data.reserved2.present ? data.reserved2.value : this.reserved2,
      reserved3: data.reserved3.present ? data.reserved3.value : this.reserved3,
      reserved4: data.reserved4.present ? data.reserved4.value : this.reserved4,
      reserved5: data.reserved5.present ? data.reserved5.value : this.reserved5,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdPropertyData(')
          ..write('dbid: $dbid, ')
          ..write('dBVersion: $dBVersion, ')
          ..write('baseDBDrive: $baseDBDrive, ')
          ..write('currentDBDrive: $currentDBDrive, ')
          ..write('deviceID: $deviceID, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('reserved5: $reserved5, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    dbid,
    dBVersion,
    baseDBDrive,
    currentDBDrive,
    deviceID,
    reserved1,
    reserved2,
    reserved3,
    reserved4,
    reserved5,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdPropertyData &&
          other.dbid == this.dbid &&
          other.dBVersion == this.dBVersion &&
          other.baseDBDrive == this.baseDBDrive &&
          other.currentDBDrive == this.currentDBDrive &&
          other.deviceID == this.deviceID &&
          other.reserved1 == this.reserved1 &&
          other.reserved2 == this.reserved2 &&
          other.reserved3 == this.reserved3 &&
          other.reserved4 == this.reserved4 &&
          other.reserved5 == this.reserved5 &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdPropertyCompanion extends UpdateCompanion<DjmdPropertyData> {
  final Value<String?> dbid;
  final Value<String?> dBVersion;
  final Value<String?> baseDBDrive;
  final Value<String?> currentDBDrive;
  final Value<String?> deviceID;
  final Value<String?> reserved1;
  final Value<String?> reserved2;
  final Value<String?> reserved3;
  final Value<String?> reserved4;
  final Value<String?> reserved5;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdPropertyCompanion({
    this.dbid = const Value.absent(),
    this.dBVersion = const Value.absent(),
    this.baseDBDrive = const Value.absent(),
    this.currentDBDrive = const Value.absent(),
    this.deviceID = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.reserved5 = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdPropertyCompanion.insert({
    this.dbid = const Value.absent(),
    this.dBVersion = const Value.absent(),
    this.baseDBDrive = const Value.absent(),
    this.currentDBDrive = const Value.absent(),
    this.deviceID = const Value.absent(),
    this.reserved1 = const Value.absent(),
    this.reserved2 = const Value.absent(),
    this.reserved3 = const Value.absent(),
    this.reserved4 = const Value.absent(),
    this.reserved5 = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdPropertyData> custom({
    Expression<String>? dbid,
    Expression<String>? dBVersion,
    Expression<String>? baseDBDrive,
    Expression<String>? currentDBDrive,
    Expression<String>? deviceID,
    Expression<String>? reserved1,
    Expression<String>? reserved2,
    Expression<String>? reserved3,
    Expression<String>? reserved4,
    Expression<String>? reserved5,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (dbid != null) 'DBID': dbid,
      if (dBVersion != null) 'DBVersion': dBVersion,
      if (baseDBDrive != null) 'BaseDBDrive': baseDBDrive,
      if (currentDBDrive != null) 'CurrentDBDrive': currentDBDrive,
      if (deviceID != null) 'DeviceID': deviceID,
      if (reserved1 != null) 'Reserved1': reserved1,
      if (reserved2 != null) 'Reserved2': reserved2,
      if (reserved3 != null) 'Reserved3': reserved3,
      if (reserved4 != null) 'Reserved4': reserved4,
      if (reserved5 != null) 'Reserved5': reserved5,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdPropertyCompanion copyWith({
    Value<String?>? dbid,
    Value<String?>? dBVersion,
    Value<String?>? baseDBDrive,
    Value<String?>? currentDBDrive,
    Value<String?>? deviceID,
    Value<String?>? reserved1,
    Value<String?>? reserved2,
    Value<String?>? reserved3,
    Value<String?>? reserved4,
    Value<String?>? reserved5,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdPropertyCompanion(
      dbid: dbid ?? this.dbid,
      dBVersion: dBVersion ?? this.dBVersion,
      baseDBDrive: baseDBDrive ?? this.baseDBDrive,
      currentDBDrive: currentDBDrive ?? this.currentDBDrive,
      deviceID: deviceID ?? this.deviceID,
      reserved1: reserved1 ?? this.reserved1,
      reserved2: reserved2 ?? this.reserved2,
      reserved3: reserved3 ?? this.reserved3,
      reserved4: reserved4 ?? this.reserved4,
      reserved5: reserved5 ?? this.reserved5,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (dbid.present) {
      map['DBID'] = Variable<String>(dbid.value);
    }
    if (dBVersion.present) {
      map['DBVersion'] = Variable<String>(dBVersion.value);
    }
    if (baseDBDrive.present) {
      map['BaseDBDrive'] = Variable<String>(baseDBDrive.value);
    }
    if (currentDBDrive.present) {
      map['CurrentDBDrive'] = Variable<String>(currentDBDrive.value);
    }
    if (deviceID.present) {
      map['DeviceID'] = Variable<String>(deviceID.value);
    }
    if (reserved1.present) {
      map['Reserved1'] = Variable<String>(reserved1.value);
    }
    if (reserved2.present) {
      map['Reserved2'] = Variable<String>(reserved2.value);
    }
    if (reserved3.present) {
      map['Reserved3'] = Variable<String>(reserved3.value);
    }
    if (reserved4.present) {
      map['Reserved4'] = Variable<String>(reserved4.value);
    }
    if (reserved5.present) {
      map['Reserved5'] = Variable<String>(reserved5.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdPropertyCompanion(')
          ..write('dbid: $dbid, ')
          ..write('dBVersion: $dBVersion, ')
          ..write('baseDBDrive: $baseDBDrive, ')
          ..write('currentDBDrive: $currentDBDrive, ')
          ..write('deviceID: $deviceID, ')
          ..write('reserved1: $reserved1, ')
          ..write('reserved2: $reserved2, ')
          ..write('reserved3: $reserved3, ')
          ..write('reserved4: $reserved4, ')
          ..write('reserved5: $reserved5, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdRecommendLike extends Table
    with TableInfo<DjmdRecommendLike, DjmdRecommendLikeData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdRecommendLike(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentID1Meta = const VerificationMeta(
    'contentID1',
  );
  late final GeneratedColumn<String> contentID1 = GeneratedColumn<String>(
    'ContentID1',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentID2Meta = const VerificationMeta(
    'contentID2',
  );
  late final GeneratedColumn<String> contentID2 = GeneratedColumn<String>(
    'ContentID2',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _likeRateMeta = const VerificationMeta(
    'likeRate',
  );
  late final GeneratedColumn<int> likeRate = GeneratedColumn<int>(
    'LikeRate',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _dataCreatedHMeta = const VerificationMeta(
    'dataCreatedH',
  );
  late final GeneratedColumn<int> dataCreatedH = GeneratedColumn<int>(
    'DataCreatedH',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _dataCreatedLMeta = const VerificationMeta(
    'dataCreatedL',
  );
  late final GeneratedColumn<int> dataCreatedL = GeneratedColumn<int>(
    'DataCreatedL',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID1,
    contentID2,
    likeRate,
    dataCreatedH,
    dataCreatedL,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdRecommendLike';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdRecommendLikeData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID1')) {
      context.handle(
        _contentID1Meta,
        contentID1.isAcceptableOrUnknown(data['ContentID1']!, _contentID1Meta),
      );
    }
    if (data.containsKey('ContentID2')) {
      context.handle(
        _contentID2Meta,
        contentID2.isAcceptableOrUnknown(data['ContentID2']!, _contentID2Meta),
      );
    }
    if (data.containsKey('LikeRate')) {
      context.handle(
        _likeRateMeta,
        likeRate.isAcceptableOrUnknown(data['LikeRate']!, _likeRateMeta),
      );
    }
    if (data.containsKey('DataCreatedH')) {
      context.handle(
        _dataCreatedHMeta,
        dataCreatedH.isAcceptableOrUnknown(
          data['DataCreatedH']!,
          _dataCreatedHMeta,
        ),
      );
    }
    if (data.containsKey('DataCreatedL')) {
      context.handle(
        _dataCreatedLMeta,
        dataCreatedL.isAcceptableOrUnknown(
          data['DataCreatedL']!,
          _dataCreatedLMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdRecommendLikeData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdRecommendLikeData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID1: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID1'],
      ),
      contentID2: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID2'],
      ),
      likeRate: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}LikeRate'],
      ),
      dataCreatedH: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}DataCreatedH'],
      ),
      dataCreatedL: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}DataCreatedL'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdRecommendLike createAlias(String alias) {
    return DjmdRecommendLike(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdRecommendLikeData extends DataClass
    implements Insertable<DjmdRecommendLikeData> {
  final String? id;
  final String? contentID1;
  final String? contentID2;
  final int? likeRate;
  final int? dataCreatedH;
  final int? dataCreatedL;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdRecommendLikeData({
    this.id,
    this.contentID1,
    this.contentID2,
    this.likeRate,
    this.dataCreatedH,
    this.dataCreatedL,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID1 != null) {
      map['ContentID1'] = Variable<String>(contentID1);
    }
    if (!nullToAbsent || contentID2 != null) {
      map['ContentID2'] = Variable<String>(contentID2);
    }
    if (!nullToAbsent || likeRate != null) {
      map['LikeRate'] = Variable<int>(likeRate);
    }
    if (!nullToAbsent || dataCreatedH != null) {
      map['DataCreatedH'] = Variable<int>(dataCreatedH);
    }
    if (!nullToAbsent || dataCreatedL != null) {
      map['DataCreatedL'] = Variable<int>(dataCreatedL);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdRecommendLikeCompanion toCompanion(bool nullToAbsent) {
    return DjmdRecommendLikeCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID1: contentID1 == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID1),
      contentID2: contentID2 == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID2),
      likeRate: likeRate == null && nullToAbsent
          ? const Value.absent()
          : Value(likeRate),
      dataCreatedH: dataCreatedH == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCreatedH),
      dataCreatedL: dataCreatedL == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCreatedL),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdRecommendLikeData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdRecommendLikeData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID1: serializer.fromJson<String?>(json['ContentID1']),
      contentID2: serializer.fromJson<String?>(json['ContentID2']),
      likeRate: serializer.fromJson<int?>(json['LikeRate']),
      dataCreatedH: serializer.fromJson<int?>(json['DataCreatedH']),
      dataCreatedL: serializer.fromJson<int?>(json['DataCreatedL']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID1': serializer.toJson<String?>(contentID1),
      'ContentID2': serializer.toJson<String?>(contentID2),
      'LikeRate': serializer.toJson<int?>(likeRate),
      'DataCreatedH': serializer.toJson<int?>(dataCreatedH),
      'DataCreatedL': serializer.toJson<int?>(dataCreatedL),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdRecommendLikeData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID1 = const Value.absent(),
    Value<String?> contentID2 = const Value.absent(),
    Value<int?> likeRate = const Value.absent(),
    Value<int?> dataCreatedH = const Value.absent(),
    Value<int?> dataCreatedL = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdRecommendLikeData(
    id: id.present ? id.value : this.id,
    contentID1: contentID1.present ? contentID1.value : this.contentID1,
    contentID2: contentID2.present ? contentID2.value : this.contentID2,
    likeRate: likeRate.present ? likeRate.value : this.likeRate,
    dataCreatedH: dataCreatedH.present ? dataCreatedH.value : this.dataCreatedH,
    dataCreatedL: dataCreatedL.present ? dataCreatedL.value : this.dataCreatedL,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdRecommendLikeData copyWithCompanion(DjmdRecommendLikeCompanion data) {
    return DjmdRecommendLikeData(
      id: data.id.present ? data.id.value : this.id,
      contentID1: data.contentID1.present
          ? data.contentID1.value
          : this.contentID1,
      contentID2: data.contentID2.present
          ? data.contentID2.value
          : this.contentID2,
      likeRate: data.likeRate.present ? data.likeRate.value : this.likeRate,
      dataCreatedH: data.dataCreatedH.present
          ? data.dataCreatedH.value
          : this.dataCreatedH,
      dataCreatedL: data.dataCreatedL.present
          ? data.dataCreatedL.value
          : this.dataCreatedL,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdRecommendLikeData(')
          ..write('id: $id, ')
          ..write('contentID1: $contentID1, ')
          ..write('contentID2: $contentID2, ')
          ..write('likeRate: $likeRate, ')
          ..write('dataCreatedH: $dataCreatedH, ')
          ..write('dataCreatedL: $dataCreatedL, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID1,
    contentID2,
    likeRate,
    dataCreatedH,
    dataCreatedL,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdRecommendLikeData &&
          other.id == this.id &&
          other.contentID1 == this.contentID1 &&
          other.contentID2 == this.contentID2 &&
          other.likeRate == this.likeRate &&
          other.dataCreatedH == this.dataCreatedH &&
          other.dataCreatedL == this.dataCreatedL &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdRecommendLikeCompanion
    extends UpdateCompanion<DjmdRecommendLikeData> {
  final Value<String?> id;
  final Value<String?> contentID1;
  final Value<String?> contentID2;
  final Value<int?> likeRate;
  final Value<int?> dataCreatedH;
  final Value<int?> dataCreatedL;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdRecommendLikeCompanion({
    this.id = const Value.absent(),
    this.contentID1 = const Value.absent(),
    this.contentID2 = const Value.absent(),
    this.likeRate = const Value.absent(),
    this.dataCreatedH = const Value.absent(),
    this.dataCreatedL = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdRecommendLikeCompanion.insert({
    this.id = const Value.absent(),
    this.contentID1 = const Value.absent(),
    this.contentID2 = const Value.absent(),
    this.likeRate = const Value.absent(),
    this.dataCreatedH = const Value.absent(),
    this.dataCreatedL = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdRecommendLikeData> custom({
    Expression<String>? id,
    Expression<String>? contentID1,
    Expression<String>? contentID2,
    Expression<int>? likeRate,
    Expression<int>? dataCreatedH,
    Expression<int>? dataCreatedL,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID1 != null) 'ContentID1': contentID1,
      if (contentID2 != null) 'ContentID2': contentID2,
      if (likeRate != null) 'LikeRate': likeRate,
      if (dataCreatedH != null) 'DataCreatedH': dataCreatedH,
      if (dataCreatedL != null) 'DataCreatedL': dataCreatedL,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdRecommendLikeCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID1,
    Value<String?>? contentID2,
    Value<int?>? likeRate,
    Value<int?>? dataCreatedH,
    Value<int?>? dataCreatedL,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdRecommendLikeCompanion(
      id: id ?? this.id,
      contentID1: contentID1 ?? this.contentID1,
      contentID2: contentID2 ?? this.contentID2,
      likeRate: likeRate ?? this.likeRate,
      dataCreatedH: dataCreatedH ?? this.dataCreatedH,
      dataCreatedL: dataCreatedL ?? this.dataCreatedL,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID1.present) {
      map['ContentID1'] = Variable<String>(contentID1.value);
    }
    if (contentID2.present) {
      map['ContentID2'] = Variable<String>(contentID2.value);
    }
    if (likeRate.present) {
      map['LikeRate'] = Variable<int>(likeRate.value);
    }
    if (dataCreatedH.present) {
      map['DataCreatedH'] = Variable<int>(dataCreatedH.value);
    }
    if (dataCreatedL.present) {
      map['DataCreatedL'] = Variable<int>(dataCreatedL.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdRecommendLikeCompanion(')
          ..write('id: $id, ')
          ..write('contentID1: $contentID1, ')
          ..write('contentID2: $contentID2, ')
          ..write('likeRate: $likeRate, ')
          ..write('dataCreatedH: $dataCreatedH, ')
          ..write('dataCreatedL: $dataCreatedL, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdRelatedTracks extends Table
    with TableInfo<DjmdRelatedTracks, DjmdRelatedTrack> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdRelatedTracks(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _criteriaMeta = const VerificationMeta(
    'criteria',
  );
  late final GeneratedColumn<String> criteria = GeneratedColumn<String>(
    'Criteria',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    attribute,
    parentID,
    criteria,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdRelatedTracks';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdRelatedTrack> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('Criteria')) {
      context.handle(
        _criteriaMeta,
        criteria.isAcceptableOrUnknown(data['Criteria']!, _criteriaMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdRelatedTrack map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdRelatedTrack(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      criteria: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Criteria'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdRelatedTracks createAlias(String alias) {
    return DjmdRelatedTracks(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdRelatedTrack extends DataClass
    implements Insertable<DjmdRelatedTrack> {
  final String? id;
  final int? seq;
  final String? name;
  final int? attribute;
  final String? parentID;
  final String? criteria;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdRelatedTrack({
    this.id,
    this.seq,
    this.name,
    this.attribute,
    this.parentID,
    this.criteria,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || criteria != null) {
      map['Criteria'] = Variable<String>(criteria);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdRelatedTracksCompanion toCompanion(bool nullToAbsent) {
    return DjmdRelatedTracksCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      criteria: criteria == null && nullToAbsent
          ? const Value.absent()
          : Value(criteria),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdRelatedTrack.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdRelatedTrack(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      criteria: serializer.fromJson<String?>(json['Criteria']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'Criteria': serializer.toJson<String?>(criteria),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdRelatedTrack copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> criteria = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdRelatedTrack(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    criteria: criteria.present ? criteria.value : this.criteria,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdRelatedTrack copyWithCompanion(DjmdRelatedTracksCompanion data) {
    return DjmdRelatedTrack(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      criteria: data.criteria.present ? data.criteria.value : this.criteria,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdRelatedTrack(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('criteria: $criteria, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    attribute,
    parentID,
    criteria,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdRelatedTrack &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.criteria == this.criteria &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdRelatedTracksCompanion extends UpdateCompanion<DjmdRelatedTrack> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> criteria;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdRelatedTracksCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.criteria = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdRelatedTracksCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.criteria = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdRelatedTrack> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? criteria,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (criteria != null) 'Criteria': criteria,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdRelatedTracksCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? criteria,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdRelatedTracksCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      criteria: criteria ?? this.criteria,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (criteria.present) {
      map['Criteria'] = Variable<String>(criteria.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdRelatedTracksCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('criteria: $criteria, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSampler extends Table with TableInfo<DjmdSampler, DjmdSamplerData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSampler(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<String> name = GeneratedColumn<String>(
    'Name',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _attributeMeta = const VerificationMeta(
    'attribute',
  );
  late final GeneratedColumn<int> attribute = GeneratedColumn<int>(
    'Attribute',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _parentIDMeta = const VerificationMeta(
    'parentID',
  );
  late final GeneratedColumn<String> parentID = GeneratedColumn<String>(
    'ParentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    seq,
    name,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSampler';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSamplerData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['Name']!, _nameMeta),
      );
    }
    if (data.containsKey('Attribute')) {
      context.handle(
        _attributeMeta,
        attribute.isAcceptableOrUnknown(data['Attribute']!, _attributeMeta),
      );
    }
    if (data.containsKey('ParentID')) {
      context.handle(
        _parentIDMeta,
        parentID.isAcceptableOrUnknown(data['ParentID']!, _parentIDMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSamplerData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSamplerData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Name'],
      ),
      attribute: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Attribute'],
      ),
      parentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ParentID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSampler createAlias(String alias) {
    return DjmdSampler(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSamplerData extends DataClass implements Insertable<DjmdSamplerData> {
  final String? id;
  final int? seq;
  final String? name;
  final int? attribute;
  final String? parentID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSamplerData({
    this.id,
    this.seq,
    this.name,
    this.attribute,
    this.parentID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || name != null) {
      map['Name'] = Variable<String>(name);
    }
    if (!nullToAbsent || attribute != null) {
      map['Attribute'] = Variable<int>(attribute);
    }
    if (!nullToAbsent || parentID != null) {
      map['ParentID'] = Variable<String>(parentID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSamplerCompanion toCompanion(bool nullToAbsent) {
    return DjmdSamplerCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      attribute: attribute == null && nullToAbsent
          ? const Value.absent()
          : Value(attribute),
      parentID: parentID == null && nullToAbsent
          ? const Value.absent()
          : Value(parentID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSamplerData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSamplerData(
      id: serializer.fromJson<String?>(json['ID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      name: serializer.fromJson<String?>(json['Name']),
      attribute: serializer.fromJson<int?>(json['Attribute']),
      parentID: serializer.fromJson<String?>(json['ParentID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Seq': serializer.toJson<int?>(seq),
      'Name': serializer.toJson<String?>(name),
      'Attribute': serializer.toJson<int?>(attribute),
      'ParentID': serializer.toJson<String?>(parentID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSamplerData copyWith({
    Value<String?> id = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<String?> name = const Value.absent(),
    Value<int?> attribute = const Value.absent(),
    Value<String?> parentID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSamplerData(
    id: id.present ? id.value : this.id,
    seq: seq.present ? seq.value : this.seq,
    name: name.present ? name.value : this.name,
    attribute: attribute.present ? attribute.value : this.attribute,
    parentID: parentID.present ? parentID.value : this.parentID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSamplerData copyWithCompanion(DjmdSamplerCompanion data) {
    return DjmdSamplerData(
      id: data.id.present ? data.id.value : this.id,
      seq: data.seq.present ? data.seq.value : this.seq,
      name: data.name.present ? data.name.value : this.name,
      attribute: data.attribute.present ? data.attribute.value : this.attribute,
      parentID: data.parentID.present ? data.parentID.value : this.parentID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSamplerData(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    seq,
    name,
    attribute,
    parentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSamplerData &&
          other.id == this.id &&
          other.seq == this.seq &&
          other.name == this.name &&
          other.attribute == this.attribute &&
          other.parentID == this.parentID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSamplerCompanion extends UpdateCompanion<DjmdSamplerData> {
  final Value<String?> id;
  final Value<int?> seq;
  final Value<String?> name;
  final Value<int?> attribute;
  final Value<String?> parentID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSamplerCompanion({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSamplerCompanion.insert({
    this.id = const Value.absent(),
    this.seq = const Value.absent(),
    this.name = const Value.absent(),
    this.attribute = const Value.absent(),
    this.parentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSamplerData> custom({
    Expression<String>? id,
    Expression<int>? seq,
    Expression<String>? name,
    Expression<int>? attribute,
    Expression<String>? parentID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (seq != null) 'Seq': seq,
      if (name != null) 'Name': name,
      if (attribute != null) 'Attribute': attribute,
      if (parentID != null) 'ParentID': parentID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSamplerCompanion copyWith({
    Value<String?>? id,
    Value<int?>? seq,
    Value<String?>? name,
    Value<int?>? attribute,
    Value<String?>? parentID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSamplerCompanion(
      id: id ?? this.id,
      seq: seq ?? this.seq,
      name: name ?? this.name,
      attribute: attribute ?? this.attribute,
      parentID: parentID ?? this.parentID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (name.present) {
      map['Name'] = Variable<String>(name.value);
    }
    if (attribute.present) {
      map['Attribute'] = Variable<int>(attribute.value);
    }
    if (parentID.present) {
      map['ParentID'] = Variable<String>(parentID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSamplerCompanion(')
          ..write('id: $id, ')
          ..write('seq: $seq, ')
          ..write('name: $name, ')
          ..write('attribute: $attribute, ')
          ..write('parentID: $parentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongHistory extends Table
    with TableInfo<DjmdSongHistory, DjmdSongHistoryData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongHistory(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _historyIDMeta = const VerificationMeta(
    'historyID',
  );
  late final GeneratedColumn<String> historyID = GeneratedColumn<String>(
    'HistoryID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    historyID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongHistory';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongHistoryData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('HistoryID')) {
      context.handle(
        _historyIDMeta,
        historyID.isAcceptableOrUnknown(data['HistoryID']!, _historyIDMeta),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongHistoryData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongHistoryData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      historyID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}HistoryID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongHistory createAlias(String alias) {
    return DjmdSongHistory(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongHistoryData extends DataClass
    implements Insertable<DjmdSongHistoryData> {
  final String? id;
  final String? historyID;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongHistoryData({
    this.id,
    this.historyID,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || historyID != null) {
      map['HistoryID'] = Variable<String>(historyID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongHistoryCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongHistoryCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      historyID: historyID == null && nullToAbsent
          ? const Value.absent()
          : Value(historyID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongHistoryData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongHistoryData(
      id: serializer.fromJson<String?>(json['ID']),
      historyID: serializer.fromJson<String?>(json['HistoryID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'HistoryID': serializer.toJson<String?>(historyID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongHistoryData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> historyID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongHistoryData(
    id: id.present ? id.value : this.id,
    historyID: historyID.present ? historyID.value : this.historyID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongHistoryData copyWithCompanion(DjmdSongHistoryCompanion data) {
    return DjmdSongHistoryData(
      id: data.id.present ? data.id.value : this.id,
      historyID: data.historyID.present ? data.historyID.value : this.historyID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongHistoryData(')
          ..write('id: $id, ')
          ..write('historyID: $historyID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    historyID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongHistoryData &&
          other.id == this.id &&
          other.historyID == this.historyID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongHistoryCompanion extends UpdateCompanion<DjmdSongHistoryData> {
  final Value<String?> id;
  final Value<String?> historyID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongHistoryCompanion({
    this.id = const Value.absent(),
    this.historyID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongHistoryCompanion.insert({
    this.id = const Value.absent(),
    this.historyID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongHistoryData> custom({
    Expression<String>? id,
    Expression<String>? historyID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (historyID != null) 'HistoryID': historyID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongHistoryCompanion copyWith({
    Value<String?>? id,
    Value<String?>? historyID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongHistoryCompanion(
      id: id ?? this.id,
      historyID: historyID ?? this.historyID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (historyID.present) {
      map['HistoryID'] = Variable<String>(historyID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongHistoryCompanion(')
          ..write('id: $id, ')
          ..write('historyID: $historyID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongHotCueBanklist extends Table
    with TableInfo<DjmdSongHotCueBanklist, DjmdSongHotCueBanklistData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongHotCueBanklist(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _hotCueBanklistIDMeta = const VerificationMeta(
    'hotCueBanklistID',
  );
  late final GeneratedColumn<String> hotCueBanklistID = GeneratedColumn<String>(
    'HotCueBanklistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cueIDMeta = const VerificationMeta('cueID');
  late final GeneratedColumn<String> cueID = GeneratedColumn<String>(
    'CueID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMsecMeta = const VerificationMeta('inMsec');
  late final GeneratedColumn<int> inMsec = GeneratedColumn<int>(
    'InMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inFrameMeta = const VerificationMeta(
    'inFrame',
  );
  late final GeneratedColumn<int> inFrame = GeneratedColumn<int>(
    'InFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMpegFrameMeta = const VerificationMeta(
    'inMpegFrame',
  );
  late final GeneratedColumn<int> inMpegFrame = GeneratedColumn<int>(
    'InMpegFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inMpegAbsMeta = const VerificationMeta(
    'inMpegAbs',
  );
  late final GeneratedColumn<int> inMpegAbs = GeneratedColumn<int>(
    'InMpegAbs',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMsecMeta = const VerificationMeta(
    'outMsec',
  );
  late final GeneratedColumn<int> outMsec = GeneratedColumn<int>(
    'OutMsec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outFrameMeta = const VerificationMeta(
    'outFrame',
  );
  late final GeneratedColumn<int> outFrame = GeneratedColumn<int>(
    'OutFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMpegFrameMeta = const VerificationMeta(
    'outMpegFrame',
  );
  late final GeneratedColumn<int> outMpegFrame = GeneratedColumn<int>(
    'OutMpegFrame',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outMpegAbsMeta = const VerificationMeta(
    'outMpegAbs',
  );
  late final GeneratedColumn<int> outMpegAbs = GeneratedColumn<int>(
    'OutMpegAbs',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _colorMeta = const VerificationMeta('color');
  late final GeneratedColumn<int> color = GeneratedColumn<int>(
    'Color',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _colorTableIndexMeta = const VerificationMeta(
    'colorTableIndex',
  );
  late final GeneratedColumn<int> colorTableIndex = GeneratedColumn<int>(
    'ColorTableIndex',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _activeLoopMeta = const VerificationMeta(
    'activeLoop',
  );
  late final GeneratedColumn<int> activeLoop = GeneratedColumn<int>(
    'ActiveLoop',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _commentMeta = const VerificationMeta(
    'comment',
  );
  late final GeneratedColumn<String> comment = GeneratedColumn<String>(
    'Comment',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _beatLoopSizeMeta = const VerificationMeta(
    'beatLoopSize',
  );
  late final GeneratedColumn<int> beatLoopSize = GeneratedColumn<int>(
    'BeatLoopSize',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cueMicrosecMeta = const VerificationMeta(
    'cueMicrosec',
  );
  late final GeneratedColumn<int> cueMicrosec = GeneratedColumn<int>(
    'CueMicrosec',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _inPointSeekInfoMeta = const VerificationMeta(
    'inPointSeekInfo',
  );
  late final GeneratedColumn<String> inPointSeekInfo = GeneratedColumn<String>(
    'InPointSeekInfo',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _outPointSeekInfoMeta = const VerificationMeta(
    'outPointSeekInfo',
  );
  late final GeneratedColumn<String> outPointSeekInfo = GeneratedColumn<String>(
    'OutPointSeekInfo',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _hotCueBanklistUUIDMeta =
      const VerificationMeta('hotCueBanklistUUID');
  late final GeneratedColumn<String> hotCueBanklistUUID =
      GeneratedColumn<String>(
        'HotCueBanklistUUID',
        aliasedName,
        true,
        type: DriftSqlType.string,
        requiredDuringInsert: false,
        $customConstraints: 'DEFAULT NULL',
        defaultValue: const CustomExpression('NULL'),
      );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    hotCueBanklistID,
    contentID,
    trackNo,
    cueID,
    inMsec,
    inFrame,
    inMpegFrame,
    inMpegAbs,
    outMsec,
    outFrame,
    outMpegFrame,
    outMpegAbs,
    color,
    colorTableIndex,
    activeLoop,
    comment,
    beatLoopSize,
    cueMicrosec,
    inPointSeekInfo,
    outPointSeekInfo,
    hotCueBanklistUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongHotCueBanklist';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongHotCueBanklistData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('HotCueBanklistID')) {
      context.handle(
        _hotCueBanklistIDMeta,
        hotCueBanklistID.isAcceptableOrUnknown(
          data['HotCueBanklistID']!,
          _hotCueBanklistIDMeta,
        ),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('CueID')) {
      context.handle(
        _cueIDMeta,
        cueID.isAcceptableOrUnknown(data['CueID']!, _cueIDMeta),
      );
    }
    if (data.containsKey('InMsec')) {
      context.handle(
        _inMsecMeta,
        inMsec.isAcceptableOrUnknown(data['InMsec']!, _inMsecMeta),
      );
    }
    if (data.containsKey('InFrame')) {
      context.handle(
        _inFrameMeta,
        inFrame.isAcceptableOrUnknown(data['InFrame']!, _inFrameMeta),
      );
    }
    if (data.containsKey('InMpegFrame')) {
      context.handle(
        _inMpegFrameMeta,
        inMpegFrame.isAcceptableOrUnknown(
          data['InMpegFrame']!,
          _inMpegFrameMeta,
        ),
      );
    }
    if (data.containsKey('InMpegAbs')) {
      context.handle(
        _inMpegAbsMeta,
        inMpegAbs.isAcceptableOrUnknown(data['InMpegAbs']!, _inMpegAbsMeta),
      );
    }
    if (data.containsKey('OutMsec')) {
      context.handle(
        _outMsecMeta,
        outMsec.isAcceptableOrUnknown(data['OutMsec']!, _outMsecMeta),
      );
    }
    if (data.containsKey('OutFrame')) {
      context.handle(
        _outFrameMeta,
        outFrame.isAcceptableOrUnknown(data['OutFrame']!, _outFrameMeta),
      );
    }
    if (data.containsKey('OutMpegFrame')) {
      context.handle(
        _outMpegFrameMeta,
        outMpegFrame.isAcceptableOrUnknown(
          data['OutMpegFrame']!,
          _outMpegFrameMeta,
        ),
      );
    }
    if (data.containsKey('OutMpegAbs')) {
      context.handle(
        _outMpegAbsMeta,
        outMpegAbs.isAcceptableOrUnknown(data['OutMpegAbs']!, _outMpegAbsMeta),
      );
    }
    if (data.containsKey('Color')) {
      context.handle(
        _colorMeta,
        color.isAcceptableOrUnknown(data['Color']!, _colorMeta),
      );
    }
    if (data.containsKey('ColorTableIndex')) {
      context.handle(
        _colorTableIndexMeta,
        colorTableIndex.isAcceptableOrUnknown(
          data['ColorTableIndex']!,
          _colorTableIndexMeta,
        ),
      );
    }
    if (data.containsKey('ActiveLoop')) {
      context.handle(
        _activeLoopMeta,
        activeLoop.isAcceptableOrUnknown(data['ActiveLoop']!, _activeLoopMeta),
      );
    }
    if (data.containsKey('Comment')) {
      context.handle(
        _commentMeta,
        comment.isAcceptableOrUnknown(data['Comment']!, _commentMeta),
      );
    }
    if (data.containsKey('BeatLoopSize')) {
      context.handle(
        _beatLoopSizeMeta,
        beatLoopSize.isAcceptableOrUnknown(
          data['BeatLoopSize']!,
          _beatLoopSizeMeta,
        ),
      );
    }
    if (data.containsKey('CueMicrosec')) {
      context.handle(
        _cueMicrosecMeta,
        cueMicrosec.isAcceptableOrUnknown(
          data['CueMicrosec']!,
          _cueMicrosecMeta,
        ),
      );
    }
    if (data.containsKey('InPointSeekInfo')) {
      context.handle(
        _inPointSeekInfoMeta,
        inPointSeekInfo.isAcceptableOrUnknown(
          data['InPointSeekInfo']!,
          _inPointSeekInfoMeta,
        ),
      );
    }
    if (data.containsKey('OutPointSeekInfo')) {
      context.handle(
        _outPointSeekInfoMeta,
        outPointSeekInfo.isAcceptableOrUnknown(
          data['OutPointSeekInfo']!,
          _outPointSeekInfoMeta,
        ),
      );
    }
    if (data.containsKey('HotCueBanklistUUID')) {
      context.handle(
        _hotCueBanklistUUIDMeta,
        hotCueBanklistUUID.isAcceptableOrUnknown(
          data['HotCueBanklistUUID']!,
          _hotCueBanklistUUIDMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongHotCueBanklistData map(
    Map<String, dynamic> data, {
    String? tablePrefix,
  }) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongHotCueBanklistData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      hotCueBanklistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}HotCueBanklistID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      cueID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}CueID'],
      ),
      inMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMsec'],
      ),
      inFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InFrame'],
      ),
      inMpegFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMpegFrame'],
      ),
      inMpegAbs: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}InMpegAbs'],
      ),
      outMsec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMsec'],
      ),
      outFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutFrame'],
      ),
      outMpegFrame: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMpegFrame'],
      ),
      outMpegAbs: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}OutMpegAbs'],
      ),
      color: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Color'],
      ),
      colorTableIndex: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ColorTableIndex'],
      ),
      activeLoop: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}ActiveLoop'],
      ),
      comment: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Comment'],
      ),
      beatLoopSize: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}BeatLoopSize'],
      ),
      cueMicrosec: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}CueMicrosec'],
      ),
      inPointSeekInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}InPointSeekInfo'],
      ),
      outPointSeekInfo: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}OutPointSeekInfo'],
      ),
      hotCueBanklistUUID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}HotCueBanklistUUID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongHotCueBanklist createAlias(String alias) {
    return DjmdSongHotCueBanklist(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongHotCueBanklistData extends DataClass
    implements Insertable<DjmdSongHotCueBanklistData> {
  final String? id;
  final String? hotCueBanklistID;
  final String? contentID;
  final int? trackNo;
  final String? cueID;
  final int? inMsec;
  final int? inFrame;
  final int? inMpegFrame;
  final int? inMpegAbs;
  final int? outMsec;
  final int? outFrame;
  final int? outMpegFrame;
  final int? outMpegAbs;
  final int? color;
  final int? colorTableIndex;
  final int? activeLoop;
  final String? comment;
  final int? beatLoopSize;
  final int? cueMicrosec;
  final String? inPointSeekInfo;
  final String? outPointSeekInfo;
  final String? hotCueBanklistUUID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongHotCueBanklistData({
    this.id,
    this.hotCueBanklistID,
    this.contentID,
    this.trackNo,
    this.cueID,
    this.inMsec,
    this.inFrame,
    this.inMpegFrame,
    this.inMpegAbs,
    this.outMsec,
    this.outFrame,
    this.outMpegFrame,
    this.outMpegAbs,
    this.color,
    this.colorTableIndex,
    this.activeLoop,
    this.comment,
    this.beatLoopSize,
    this.cueMicrosec,
    this.inPointSeekInfo,
    this.outPointSeekInfo,
    this.hotCueBanklistUUID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || hotCueBanklistID != null) {
      map['HotCueBanklistID'] = Variable<String>(hotCueBanklistID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || cueID != null) {
      map['CueID'] = Variable<String>(cueID);
    }
    if (!nullToAbsent || inMsec != null) {
      map['InMsec'] = Variable<int>(inMsec);
    }
    if (!nullToAbsent || inFrame != null) {
      map['InFrame'] = Variable<int>(inFrame);
    }
    if (!nullToAbsent || inMpegFrame != null) {
      map['InMpegFrame'] = Variable<int>(inMpegFrame);
    }
    if (!nullToAbsent || inMpegAbs != null) {
      map['InMpegAbs'] = Variable<int>(inMpegAbs);
    }
    if (!nullToAbsent || outMsec != null) {
      map['OutMsec'] = Variable<int>(outMsec);
    }
    if (!nullToAbsent || outFrame != null) {
      map['OutFrame'] = Variable<int>(outFrame);
    }
    if (!nullToAbsent || outMpegFrame != null) {
      map['OutMpegFrame'] = Variable<int>(outMpegFrame);
    }
    if (!nullToAbsent || outMpegAbs != null) {
      map['OutMpegAbs'] = Variable<int>(outMpegAbs);
    }
    if (!nullToAbsent || color != null) {
      map['Color'] = Variable<int>(color);
    }
    if (!nullToAbsent || colorTableIndex != null) {
      map['ColorTableIndex'] = Variable<int>(colorTableIndex);
    }
    if (!nullToAbsent || activeLoop != null) {
      map['ActiveLoop'] = Variable<int>(activeLoop);
    }
    if (!nullToAbsent || comment != null) {
      map['Comment'] = Variable<String>(comment);
    }
    if (!nullToAbsent || beatLoopSize != null) {
      map['BeatLoopSize'] = Variable<int>(beatLoopSize);
    }
    if (!nullToAbsent || cueMicrosec != null) {
      map['CueMicrosec'] = Variable<int>(cueMicrosec);
    }
    if (!nullToAbsent || inPointSeekInfo != null) {
      map['InPointSeekInfo'] = Variable<String>(inPointSeekInfo);
    }
    if (!nullToAbsent || outPointSeekInfo != null) {
      map['OutPointSeekInfo'] = Variable<String>(outPointSeekInfo);
    }
    if (!nullToAbsent || hotCueBanklistUUID != null) {
      map['HotCueBanklistUUID'] = Variable<String>(hotCueBanklistUUID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongHotCueBanklistCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongHotCueBanklistCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      hotCueBanklistID: hotCueBanklistID == null && nullToAbsent
          ? const Value.absent()
          : Value(hotCueBanklistID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      cueID: cueID == null && nullToAbsent
          ? const Value.absent()
          : Value(cueID),
      inMsec: inMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(inMsec),
      inFrame: inFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(inFrame),
      inMpegFrame: inMpegFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(inMpegFrame),
      inMpegAbs: inMpegAbs == null && nullToAbsent
          ? const Value.absent()
          : Value(inMpegAbs),
      outMsec: outMsec == null && nullToAbsent
          ? const Value.absent()
          : Value(outMsec),
      outFrame: outFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(outFrame),
      outMpegFrame: outMpegFrame == null && nullToAbsent
          ? const Value.absent()
          : Value(outMpegFrame),
      outMpegAbs: outMpegAbs == null && nullToAbsent
          ? const Value.absent()
          : Value(outMpegAbs),
      color: color == null && nullToAbsent
          ? const Value.absent()
          : Value(color),
      colorTableIndex: colorTableIndex == null && nullToAbsent
          ? const Value.absent()
          : Value(colorTableIndex),
      activeLoop: activeLoop == null && nullToAbsent
          ? const Value.absent()
          : Value(activeLoop),
      comment: comment == null && nullToAbsent
          ? const Value.absent()
          : Value(comment),
      beatLoopSize: beatLoopSize == null && nullToAbsent
          ? const Value.absent()
          : Value(beatLoopSize),
      cueMicrosec: cueMicrosec == null && nullToAbsent
          ? const Value.absent()
          : Value(cueMicrosec),
      inPointSeekInfo: inPointSeekInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(inPointSeekInfo),
      outPointSeekInfo: outPointSeekInfo == null && nullToAbsent
          ? const Value.absent()
          : Value(outPointSeekInfo),
      hotCueBanklistUUID: hotCueBanklistUUID == null && nullToAbsent
          ? const Value.absent()
          : Value(hotCueBanklistUUID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongHotCueBanklistData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongHotCueBanklistData(
      id: serializer.fromJson<String?>(json['ID']),
      hotCueBanklistID: serializer.fromJson<String?>(json['HotCueBanklistID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      cueID: serializer.fromJson<String?>(json['CueID']),
      inMsec: serializer.fromJson<int?>(json['InMsec']),
      inFrame: serializer.fromJson<int?>(json['InFrame']),
      inMpegFrame: serializer.fromJson<int?>(json['InMpegFrame']),
      inMpegAbs: serializer.fromJson<int?>(json['InMpegAbs']),
      outMsec: serializer.fromJson<int?>(json['OutMsec']),
      outFrame: serializer.fromJson<int?>(json['OutFrame']),
      outMpegFrame: serializer.fromJson<int?>(json['OutMpegFrame']),
      outMpegAbs: serializer.fromJson<int?>(json['OutMpegAbs']),
      color: serializer.fromJson<int?>(json['Color']),
      colorTableIndex: serializer.fromJson<int?>(json['ColorTableIndex']),
      activeLoop: serializer.fromJson<int?>(json['ActiveLoop']),
      comment: serializer.fromJson<String?>(json['Comment']),
      beatLoopSize: serializer.fromJson<int?>(json['BeatLoopSize']),
      cueMicrosec: serializer.fromJson<int?>(json['CueMicrosec']),
      inPointSeekInfo: serializer.fromJson<String?>(json['InPointSeekInfo']),
      outPointSeekInfo: serializer.fromJson<String?>(json['OutPointSeekInfo']),
      hotCueBanklistUUID: serializer.fromJson<String?>(
        json['HotCueBanklistUUID'],
      ),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'HotCueBanklistID': serializer.toJson<String?>(hotCueBanklistID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'CueID': serializer.toJson<String?>(cueID),
      'InMsec': serializer.toJson<int?>(inMsec),
      'InFrame': serializer.toJson<int?>(inFrame),
      'InMpegFrame': serializer.toJson<int?>(inMpegFrame),
      'InMpegAbs': serializer.toJson<int?>(inMpegAbs),
      'OutMsec': serializer.toJson<int?>(outMsec),
      'OutFrame': serializer.toJson<int?>(outFrame),
      'OutMpegFrame': serializer.toJson<int?>(outMpegFrame),
      'OutMpegAbs': serializer.toJson<int?>(outMpegAbs),
      'Color': serializer.toJson<int?>(color),
      'ColorTableIndex': serializer.toJson<int?>(colorTableIndex),
      'ActiveLoop': serializer.toJson<int?>(activeLoop),
      'Comment': serializer.toJson<String?>(comment),
      'BeatLoopSize': serializer.toJson<int?>(beatLoopSize),
      'CueMicrosec': serializer.toJson<int?>(cueMicrosec),
      'InPointSeekInfo': serializer.toJson<String?>(inPointSeekInfo),
      'OutPointSeekInfo': serializer.toJson<String?>(outPointSeekInfo),
      'HotCueBanklistUUID': serializer.toJson<String?>(hotCueBanklistUUID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongHotCueBanklistData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> hotCueBanklistID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> cueID = const Value.absent(),
    Value<int?> inMsec = const Value.absent(),
    Value<int?> inFrame = const Value.absent(),
    Value<int?> inMpegFrame = const Value.absent(),
    Value<int?> inMpegAbs = const Value.absent(),
    Value<int?> outMsec = const Value.absent(),
    Value<int?> outFrame = const Value.absent(),
    Value<int?> outMpegFrame = const Value.absent(),
    Value<int?> outMpegAbs = const Value.absent(),
    Value<int?> color = const Value.absent(),
    Value<int?> colorTableIndex = const Value.absent(),
    Value<int?> activeLoop = const Value.absent(),
    Value<String?> comment = const Value.absent(),
    Value<int?> beatLoopSize = const Value.absent(),
    Value<int?> cueMicrosec = const Value.absent(),
    Value<String?> inPointSeekInfo = const Value.absent(),
    Value<String?> outPointSeekInfo = const Value.absent(),
    Value<String?> hotCueBanklistUUID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongHotCueBanklistData(
    id: id.present ? id.value : this.id,
    hotCueBanklistID: hotCueBanklistID.present
        ? hotCueBanklistID.value
        : this.hotCueBanklistID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    cueID: cueID.present ? cueID.value : this.cueID,
    inMsec: inMsec.present ? inMsec.value : this.inMsec,
    inFrame: inFrame.present ? inFrame.value : this.inFrame,
    inMpegFrame: inMpegFrame.present ? inMpegFrame.value : this.inMpegFrame,
    inMpegAbs: inMpegAbs.present ? inMpegAbs.value : this.inMpegAbs,
    outMsec: outMsec.present ? outMsec.value : this.outMsec,
    outFrame: outFrame.present ? outFrame.value : this.outFrame,
    outMpegFrame: outMpegFrame.present ? outMpegFrame.value : this.outMpegFrame,
    outMpegAbs: outMpegAbs.present ? outMpegAbs.value : this.outMpegAbs,
    color: color.present ? color.value : this.color,
    colorTableIndex: colorTableIndex.present
        ? colorTableIndex.value
        : this.colorTableIndex,
    activeLoop: activeLoop.present ? activeLoop.value : this.activeLoop,
    comment: comment.present ? comment.value : this.comment,
    beatLoopSize: beatLoopSize.present ? beatLoopSize.value : this.beatLoopSize,
    cueMicrosec: cueMicrosec.present ? cueMicrosec.value : this.cueMicrosec,
    inPointSeekInfo: inPointSeekInfo.present
        ? inPointSeekInfo.value
        : this.inPointSeekInfo,
    outPointSeekInfo: outPointSeekInfo.present
        ? outPointSeekInfo.value
        : this.outPointSeekInfo,
    hotCueBanklistUUID: hotCueBanklistUUID.present
        ? hotCueBanklistUUID.value
        : this.hotCueBanklistUUID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongHotCueBanklistData copyWithCompanion(
    DjmdSongHotCueBanklistCompanion data,
  ) {
    return DjmdSongHotCueBanklistData(
      id: data.id.present ? data.id.value : this.id,
      hotCueBanklistID: data.hotCueBanklistID.present
          ? data.hotCueBanklistID.value
          : this.hotCueBanklistID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      cueID: data.cueID.present ? data.cueID.value : this.cueID,
      inMsec: data.inMsec.present ? data.inMsec.value : this.inMsec,
      inFrame: data.inFrame.present ? data.inFrame.value : this.inFrame,
      inMpegFrame: data.inMpegFrame.present
          ? data.inMpegFrame.value
          : this.inMpegFrame,
      inMpegAbs: data.inMpegAbs.present ? data.inMpegAbs.value : this.inMpegAbs,
      outMsec: data.outMsec.present ? data.outMsec.value : this.outMsec,
      outFrame: data.outFrame.present ? data.outFrame.value : this.outFrame,
      outMpegFrame: data.outMpegFrame.present
          ? data.outMpegFrame.value
          : this.outMpegFrame,
      outMpegAbs: data.outMpegAbs.present
          ? data.outMpegAbs.value
          : this.outMpegAbs,
      color: data.color.present ? data.color.value : this.color,
      colorTableIndex: data.colorTableIndex.present
          ? data.colorTableIndex.value
          : this.colorTableIndex,
      activeLoop: data.activeLoop.present
          ? data.activeLoop.value
          : this.activeLoop,
      comment: data.comment.present ? data.comment.value : this.comment,
      beatLoopSize: data.beatLoopSize.present
          ? data.beatLoopSize.value
          : this.beatLoopSize,
      cueMicrosec: data.cueMicrosec.present
          ? data.cueMicrosec.value
          : this.cueMicrosec,
      inPointSeekInfo: data.inPointSeekInfo.present
          ? data.inPointSeekInfo.value
          : this.inPointSeekInfo,
      outPointSeekInfo: data.outPointSeekInfo.present
          ? data.outPointSeekInfo.value
          : this.outPointSeekInfo,
      hotCueBanklistUUID: data.hotCueBanklistUUID.present
          ? data.hotCueBanklistUUID.value
          : this.hotCueBanklistUUID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongHotCueBanklistData(')
          ..write('id: $id, ')
          ..write('hotCueBanklistID: $hotCueBanklistID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('cueID: $cueID, ')
          ..write('inMsec: $inMsec, ')
          ..write('inFrame: $inFrame, ')
          ..write('inMpegFrame: $inMpegFrame, ')
          ..write('inMpegAbs: $inMpegAbs, ')
          ..write('outMsec: $outMsec, ')
          ..write('outFrame: $outFrame, ')
          ..write('outMpegFrame: $outMpegFrame, ')
          ..write('outMpegAbs: $outMpegAbs, ')
          ..write('color: $color, ')
          ..write('colorTableIndex: $colorTableIndex, ')
          ..write('activeLoop: $activeLoop, ')
          ..write('comment: $comment, ')
          ..write('beatLoopSize: $beatLoopSize, ')
          ..write('cueMicrosec: $cueMicrosec, ')
          ..write('inPointSeekInfo: $inPointSeekInfo, ')
          ..write('outPointSeekInfo: $outPointSeekInfo, ')
          ..write('hotCueBanklistUUID: $hotCueBanklistUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    hotCueBanklistID,
    contentID,
    trackNo,
    cueID,
    inMsec,
    inFrame,
    inMpegFrame,
    inMpegAbs,
    outMsec,
    outFrame,
    outMpegFrame,
    outMpegAbs,
    color,
    colorTableIndex,
    activeLoop,
    comment,
    beatLoopSize,
    cueMicrosec,
    inPointSeekInfo,
    outPointSeekInfo,
    hotCueBanklistUUID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongHotCueBanklistData &&
          other.id == this.id &&
          other.hotCueBanklistID == this.hotCueBanklistID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.cueID == this.cueID &&
          other.inMsec == this.inMsec &&
          other.inFrame == this.inFrame &&
          other.inMpegFrame == this.inMpegFrame &&
          other.inMpegAbs == this.inMpegAbs &&
          other.outMsec == this.outMsec &&
          other.outFrame == this.outFrame &&
          other.outMpegFrame == this.outMpegFrame &&
          other.outMpegAbs == this.outMpegAbs &&
          other.color == this.color &&
          other.colorTableIndex == this.colorTableIndex &&
          other.activeLoop == this.activeLoop &&
          other.comment == this.comment &&
          other.beatLoopSize == this.beatLoopSize &&
          other.cueMicrosec == this.cueMicrosec &&
          other.inPointSeekInfo == this.inPointSeekInfo &&
          other.outPointSeekInfo == this.outPointSeekInfo &&
          other.hotCueBanklistUUID == this.hotCueBanklistUUID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongHotCueBanklistCompanion
    extends UpdateCompanion<DjmdSongHotCueBanklistData> {
  final Value<String?> id;
  final Value<String?> hotCueBanklistID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> cueID;
  final Value<int?> inMsec;
  final Value<int?> inFrame;
  final Value<int?> inMpegFrame;
  final Value<int?> inMpegAbs;
  final Value<int?> outMsec;
  final Value<int?> outFrame;
  final Value<int?> outMpegFrame;
  final Value<int?> outMpegAbs;
  final Value<int?> color;
  final Value<int?> colorTableIndex;
  final Value<int?> activeLoop;
  final Value<String?> comment;
  final Value<int?> beatLoopSize;
  final Value<int?> cueMicrosec;
  final Value<String?> inPointSeekInfo;
  final Value<String?> outPointSeekInfo;
  final Value<String?> hotCueBanklistUUID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongHotCueBanklistCompanion({
    this.id = const Value.absent(),
    this.hotCueBanklistID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.cueID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.inFrame = const Value.absent(),
    this.inMpegFrame = const Value.absent(),
    this.inMpegAbs = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.outFrame = const Value.absent(),
    this.outMpegFrame = const Value.absent(),
    this.outMpegAbs = const Value.absent(),
    this.color = const Value.absent(),
    this.colorTableIndex = const Value.absent(),
    this.activeLoop = const Value.absent(),
    this.comment = const Value.absent(),
    this.beatLoopSize = const Value.absent(),
    this.cueMicrosec = const Value.absent(),
    this.inPointSeekInfo = const Value.absent(),
    this.outPointSeekInfo = const Value.absent(),
    this.hotCueBanklistUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongHotCueBanklistCompanion.insert({
    this.id = const Value.absent(),
    this.hotCueBanklistID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.cueID = const Value.absent(),
    this.inMsec = const Value.absent(),
    this.inFrame = const Value.absent(),
    this.inMpegFrame = const Value.absent(),
    this.inMpegAbs = const Value.absent(),
    this.outMsec = const Value.absent(),
    this.outFrame = const Value.absent(),
    this.outMpegFrame = const Value.absent(),
    this.outMpegAbs = const Value.absent(),
    this.color = const Value.absent(),
    this.colorTableIndex = const Value.absent(),
    this.activeLoop = const Value.absent(),
    this.comment = const Value.absent(),
    this.beatLoopSize = const Value.absent(),
    this.cueMicrosec = const Value.absent(),
    this.inPointSeekInfo = const Value.absent(),
    this.outPointSeekInfo = const Value.absent(),
    this.hotCueBanklistUUID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongHotCueBanklistData> custom({
    Expression<String>? id,
    Expression<String>? hotCueBanklistID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? cueID,
    Expression<int>? inMsec,
    Expression<int>? inFrame,
    Expression<int>? inMpegFrame,
    Expression<int>? inMpegAbs,
    Expression<int>? outMsec,
    Expression<int>? outFrame,
    Expression<int>? outMpegFrame,
    Expression<int>? outMpegAbs,
    Expression<int>? color,
    Expression<int>? colorTableIndex,
    Expression<int>? activeLoop,
    Expression<String>? comment,
    Expression<int>? beatLoopSize,
    Expression<int>? cueMicrosec,
    Expression<String>? inPointSeekInfo,
    Expression<String>? outPointSeekInfo,
    Expression<String>? hotCueBanklistUUID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (hotCueBanklistID != null) 'HotCueBanklistID': hotCueBanklistID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (cueID != null) 'CueID': cueID,
      if (inMsec != null) 'InMsec': inMsec,
      if (inFrame != null) 'InFrame': inFrame,
      if (inMpegFrame != null) 'InMpegFrame': inMpegFrame,
      if (inMpegAbs != null) 'InMpegAbs': inMpegAbs,
      if (outMsec != null) 'OutMsec': outMsec,
      if (outFrame != null) 'OutFrame': outFrame,
      if (outMpegFrame != null) 'OutMpegFrame': outMpegFrame,
      if (outMpegAbs != null) 'OutMpegAbs': outMpegAbs,
      if (color != null) 'Color': color,
      if (colorTableIndex != null) 'ColorTableIndex': colorTableIndex,
      if (activeLoop != null) 'ActiveLoop': activeLoop,
      if (comment != null) 'Comment': comment,
      if (beatLoopSize != null) 'BeatLoopSize': beatLoopSize,
      if (cueMicrosec != null) 'CueMicrosec': cueMicrosec,
      if (inPointSeekInfo != null) 'InPointSeekInfo': inPointSeekInfo,
      if (outPointSeekInfo != null) 'OutPointSeekInfo': outPointSeekInfo,
      if (hotCueBanklistUUID != null) 'HotCueBanklistUUID': hotCueBanklistUUID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongHotCueBanklistCompanion copyWith({
    Value<String?>? id,
    Value<String?>? hotCueBanklistID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? cueID,
    Value<int?>? inMsec,
    Value<int?>? inFrame,
    Value<int?>? inMpegFrame,
    Value<int?>? inMpegAbs,
    Value<int?>? outMsec,
    Value<int?>? outFrame,
    Value<int?>? outMpegFrame,
    Value<int?>? outMpegAbs,
    Value<int?>? color,
    Value<int?>? colorTableIndex,
    Value<int?>? activeLoop,
    Value<String?>? comment,
    Value<int?>? beatLoopSize,
    Value<int?>? cueMicrosec,
    Value<String?>? inPointSeekInfo,
    Value<String?>? outPointSeekInfo,
    Value<String?>? hotCueBanklistUUID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongHotCueBanklistCompanion(
      id: id ?? this.id,
      hotCueBanklistID: hotCueBanklistID ?? this.hotCueBanklistID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      cueID: cueID ?? this.cueID,
      inMsec: inMsec ?? this.inMsec,
      inFrame: inFrame ?? this.inFrame,
      inMpegFrame: inMpegFrame ?? this.inMpegFrame,
      inMpegAbs: inMpegAbs ?? this.inMpegAbs,
      outMsec: outMsec ?? this.outMsec,
      outFrame: outFrame ?? this.outFrame,
      outMpegFrame: outMpegFrame ?? this.outMpegFrame,
      outMpegAbs: outMpegAbs ?? this.outMpegAbs,
      color: color ?? this.color,
      colorTableIndex: colorTableIndex ?? this.colorTableIndex,
      activeLoop: activeLoop ?? this.activeLoop,
      comment: comment ?? this.comment,
      beatLoopSize: beatLoopSize ?? this.beatLoopSize,
      cueMicrosec: cueMicrosec ?? this.cueMicrosec,
      inPointSeekInfo: inPointSeekInfo ?? this.inPointSeekInfo,
      outPointSeekInfo: outPointSeekInfo ?? this.outPointSeekInfo,
      hotCueBanklistUUID: hotCueBanklistUUID ?? this.hotCueBanklistUUID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (hotCueBanklistID.present) {
      map['HotCueBanklistID'] = Variable<String>(hotCueBanklistID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (cueID.present) {
      map['CueID'] = Variable<String>(cueID.value);
    }
    if (inMsec.present) {
      map['InMsec'] = Variable<int>(inMsec.value);
    }
    if (inFrame.present) {
      map['InFrame'] = Variable<int>(inFrame.value);
    }
    if (inMpegFrame.present) {
      map['InMpegFrame'] = Variable<int>(inMpegFrame.value);
    }
    if (inMpegAbs.present) {
      map['InMpegAbs'] = Variable<int>(inMpegAbs.value);
    }
    if (outMsec.present) {
      map['OutMsec'] = Variable<int>(outMsec.value);
    }
    if (outFrame.present) {
      map['OutFrame'] = Variable<int>(outFrame.value);
    }
    if (outMpegFrame.present) {
      map['OutMpegFrame'] = Variable<int>(outMpegFrame.value);
    }
    if (outMpegAbs.present) {
      map['OutMpegAbs'] = Variable<int>(outMpegAbs.value);
    }
    if (color.present) {
      map['Color'] = Variable<int>(color.value);
    }
    if (colorTableIndex.present) {
      map['ColorTableIndex'] = Variable<int>(colorTableIndex.value);
    }
    if (activeLoop.present) {
      map['ActiveLoop'] = Variable<int>(activeLoop.value);
    }
    if (comment.present) {
      map['Comment'] = Variable<String>(comment.value);
    }
    if (beatLoopSize.present) {
      map['BeatLoopSize'] = Variable<int>(beatLoopSize.value);
    }
    if (cueMicrosec.present) {
      map['CueMicrosec'] = Variable<int>(cueMicrosec.value);
    }
    if (inPointSeekInfo.present) {
      map['InPointSeekInfo'] = Variable<String>(inPointSeekInfo.value);
    }
    if (outPointSeekInfo.present) {
      map['OutPointSeekInfo'] = Variable<String>(outPointSeekInfo.value);
    }
    if (hotCueBanklistUUID.present) {
      map['HotCueBanklistUUID'] = Variable<String>(hotCueBanklistUUID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongHotCueBanklistCompanion(')
          ..write('id: $id, ')
          ..write('hotCueBanklistID: $hotCueBanklistID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('cueID: $cueID, ')
          ..write('inMsec: $inMsec, ')
          ..write('inFrame: $inFrame, ')
          ..write('inMpegFrame: $inMpegFrame, ')
          ..write('inMpegAbs: $inMpegAbs, ')
          ..write('outMsec: $outMsec, ')
          ..write('outFrame: $outFrame, ')
          ..write('outMpegFrame: $outMpegFrame, ')
          ..write('outMpegAbs: $outMpegAbs, ')
          ..write('color: $color, ')
          ..write('colorTableIndex: $colorTableIndex, ')
          ..write('activeLoop: $activeLoop, ')
          ..write('comment: $comment, ')
          ..write('beatLoopSize: $beatLoopSize, ')
          ..write('cueMicrosec: $cueMicrosec, ')
          ..write('inPointSeekInfo: $inPointSeekInfo, ')
          ..write('outPointSeekInfo: $outPointSeekInfo, ')
          ..write('hotCueBanklistUUID: $hotCueBanklistUUID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongMyTag extends Table
    with TableInfo<DjmdSongMyTag, DjmdSongMyTagData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongMyTag(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _myTagIDMeta = const VerificationMeta(
    'myTagID',
  );
  late final GeneratedColumn<String> myTagID = GeneratedColumn<String>(
    'MyTagID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    myTagID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongMyTag';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongMyTagData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('MyTagID')) {
      context.handle(
        _myTagIDMeta,
        myTagID.isAcceptableOrUnknown(data['MyTagID']!, _myTagIDMeta),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongMyTagData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongMyTagData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      myTagID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MyTagID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongMyTag createAlias(String alias) {
    return DjmdSongMyTag(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongMyTagData extends DataClass
    implements Insertable<DjmdSongMyTagData> {
  final String? id;
  final String? myTagID;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongMyTagData({
    this.id,
    this.myTagID,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || myTagID != null) {
      map['MyTagID'] = Variable<String>(myTagID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongMyTagCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongMyTagCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      myTagID: myTagID == null && nullToAbsent
          ? const Value.absent()
          : Value(myTagID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongMyTagData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongMyTagData(
      id: serializer.fromJson<String?>(json['ID']),
      myTagID: serializer.fromJson<String?>(json['MyTagID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'MyTagID': serializer.toJson<String?>(myTagID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongMyTagData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> myTagID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongMyTagData(
    id: id.present ? id.value : this.id,
    myTagID: myTagID.present ? myTagID.value : this.myTagID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongMyTagData copyWithCompanion(DjmdSongMyTagCompanion data) {
    return DjmdSongMyTagData(
      id: data.id.present ? data.id.value : this.id,
      myTagID: data.myTagID.present ? data.myTagID.value : this.myTagID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongMyTagData(')
          ..write('id: $id, ')
          ..write('myTagID: $myTagID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    myTagID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongMyTagData &&
          other.id == this.id &&
          other.myTagID == this.myTagID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongMyTagCompanion extends UpdateCompanion<DjmdSongMyTagData> {
  final Value<String?> id;
  final Value<String?> myTagID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongMyTagCompanion({
    this.id = const Value.absent(),
    this.myTagID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongMyTagCompanion.insert({
    this.id = const Value.absent(),
    this.myTagID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongMyTagData> custom({
    Expression<String>? id,
    Expression<String>? myTagID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (myTagID != null) 'MyTagID': myTagID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongMyTagCompanion copyWith({
    Value<String?>? id,
    Value<String?>? myTagID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongMyTagCompanion(
      id: id ?? this.id,
      myTagID: myTagID ?? this.myTagID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (myTagID.present) {
      map['MyTagID'] = Variable<String>(myTagID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongMyTagCompanion(')
          ..write('id: $id, ')
          ..write('myTagID: $myTagID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongPlaylist extends Table
    with TableInfo<DjmdSongPlaylist, DjmdSongPlaylistData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongPlaylist(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _playlistIDMeta = const VerificationMeta(
    'playlistID',
  );
  late final GeneratedColumn<String> playlistID = GeneratedColumn<String>(
    'PlaylistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    playlistID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongPlaylist';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongPlaylistData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('PlaylistID')) {
      context.handle(
        _playlistIDMeta,
        playlistID.isAcceptableOrUnknown(data['PlaylistID']!, _playlistIDMeta),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongPlaylistData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongPlaylistData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      playlistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}PlaylistID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongPlaylist createAlias(String alias) {
    return DjmdSongPlaylist(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongPlaylistData extends DataClass
    implements Insertable<DjmdSongPlaylistData> {
  final String? id;
  final String? playlistID;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongPlaylistData({
    this.id,
    this.playlistID,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || playlistID != null) {
      map['PlaylistID'] = Variable<String>(playlistID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongPlaylistCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongPlaylistCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      playlistID: playlistID == null && nullToAbsent
          ? const Value.absent()
          : Value(playlistID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongPlaylistData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongPlaylistData(
      id: serializer.fromJson<String?>(json['ID']),
      playlistID: serializer.fromJson<String?>(json['PlaylistID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'PlaylistID': serializer.toJson<String?>(playlistID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongPlaylistData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> playlistID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongPlaylistData(
    id: id.present ? id.value : this.id,
    playlistID: playlistID.present ? playlistID.value : this.playlistID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongPlaylistData copyWithCompanion(DjmdSongPlaylistCompanion data) {
    return DjmdSongPlaylistData(
      id: data.id.present ? data.id.value : this.id,
      playlistID: data.playlistID.present
          ? data.playlistID.value
          : this.playlistID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongPlaylistData(')
          ..write('id: $id, ')
          ..write('playlistID: $playlistID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    playlistID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongPlaylistData &&
          other.id == this.id &&
          other.playlistID == this.playlistID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongPlaylistCompanion extends UpdateCompanion<DjmdSongPlaylistData> {
  final Value<String?> id;
  final Value<String?> playlistID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongPlaylistCompanion({
    this.id = const Value.absent(),
    this.playlistID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongPlaylistCompanion.insert({
    this.id = const Value.absent(),
    this.playlistID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongPlaylistData> custom({
    Expression<String>? id,
    Expression<String>? playlistID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (playlistID != null) 'PlaylistID': playlistID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongPlaylistCompanion copyWith({
    Value<String?>? id,
    Value<String?>? playlistID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongPlaylistCompanion(
      id: id ?? this.id,
      playlistID: playlistID ?? this.playlistID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (playlistID.present) {
      map['PlaylistID'] = Variable<String>(playlistID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongPlaylistCompanion(')
          ..write('id: $id, ')
          ..write('playlistID: $playlistID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongRelatedTracks extends Table
    with TableInfo<DjmdSongRelatedTracks, DjmdSongRelatedTrack> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongRelatedTracks(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _relatedTracksIDMeta = const VerificationMeta(
    'relatedTracksID',
  );
  late final GeneratedColumn<String> relatedTracksID = GeneratedColumn<String>(
    'RelatedTracksID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    relatedTracksID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongRelatedTracks';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongRelatedTrack> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('RelatedTracksID')) {
      context.handle(
        _relatedTracksIDMeta,
        relatedTracksID.isAcceptableOrUnknown(
          data['RelatedTracksID']!,
          _relatedTracksIDMeta,
        ),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongRelatedTrack map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongRelatedTrack(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      relatedTracksID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}RelatedTracksID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongRelatedTracks createAlias(String alias) {
    return DjmdSongRelatedTracks(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongRelatedTrack extends DataClass
    implements Insertable<DjmdSongRelatedTrack> {
  final String? id;
  final String? relatedTracksID;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongRelatedTrack({
    this.id,
    this.relatedTracksID,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || relatedTracksID != null) {
      map['RelatedTracksID'] = Variable<String>(relatedTracksID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongRelatedTracksCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongRelatedTracksCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      relatedTracksID: relatedTracksID == null && nullToAbsent
          ? const Value.absent()
          : Value(relatedTracksID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongRelatedTrack.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongRelatedTrack(
      id: serializer.fromJson<String?>(json['ID']),
      relatedTracksID: serializer.fromJson<String?>(json['RelatedTracksID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'RelatedTracksID': serializer.toJson<String?>(relatedTracksID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongRelatedTrack copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> relatedTracksID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongRelatedTrack(
    id: id.present ? id.value : this.id,
    relatedTracksID: relatedTracksID.present
        ? relatedTracksID.value
        : this.relatedTracksID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongRelatedTrack copyWithCompanion(DjmdSongRelatedTracksCompanion data) {
    return DjmdSongRelatedTrack(
      id: data.id.present ? data.id.value : this.id,
      relatedTracksID: data.relatedTracksID.present
          ? data.relatedTracksID.value
          : this.relatedTracksID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongRelatedTrack(')
          ..write('id: $id, ')
          ..write('relatedTracksID: $relatedTracksID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    relatedTracksID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongRelatedTrack &&
          other.id == this.id &&
          other.relatedTracksID == this.relatedTracksID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongRelatedTracksCompanion
    extends UpdateCompanion<DjmdSongRelatedTrack> {
  final Value<String?> id;
  final Value<String?> relatedTracksID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongRelatedTracksCompanion({
    this.id = const Value.absent(),
    this.relatedTracksID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongRelatedTracksCompanion.insert({
    this.id = const Value.absent(),
    this.relatedTracksID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongRelatedTrack> custom({
    Expression<String>? id,
    Expression<String>? relatedTracksID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (relatedTracksID != null) 'RelatedTracksID': relatedTracksID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongRelatedTracksCompanion copyWith({
    Value<String?>? id,
    Value<String?>? relatedTracksID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongRelatedTracksCompanion(
      id: id ?? this.id,
      relatedTracksID: relatedTracksID ?? this.relatedTracksID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (relatedTracksID.present) {
      map['RelatedTracksID'] = Variable<String>(relatedTracksID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongRelatedTracksCompanion(')
          ..write('id: $id, ')
          ..write('relatedTracksID: $relatedTracksID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongSampler extends Table
    with TableInfo<DjmdSongSampler, DjmdSongSamplerData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongSampler(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _samplerIDMeta = const VerificationMeta(
    'samplerID',
  );
  late final GeneratedColumn<String> samplerID = GeneratedColumn<String>(
    'SamplerID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    samplerID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongSampler';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongSamplerData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('SamplerID')) {
      context.handle(
        _samplerIDMeta,
        samplerID.isAcceptableOrUnknown(data['SamplerID']!, _samplerIDMeta),
      );
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongSamplerData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongSamplerData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      samplerID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}SamplerID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongSampler createAlias(String alias) {
    return DjmdSongSampler(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongSamplerData extends DataClass
    implements Insertable<DjmdSongSamplerData> {
  final String? id;
  final String? samplerID;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongSamplerData({
    this.id,
    this.samplerID,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || samplerID != null) {
      map['SamplerID'] = Variable<String>(samplerID);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongSamplerCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongSamplerCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      samplerID: samplerID == null && nullToAbsent
          ? const Value.absent()
          : Value(samplerID),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongSamplerData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongSamplerData(
      id: serializer.fromJson<String?>(json['ID']),
      samplerID: serializer.fromJson<String?>(json['SamplerID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'SamplerID': serializer.toJson<String?>(samplerID),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongSamplerData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> samplerID = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongSamplerData(
    id: id.present ? id.value : this.id,
    samplerID: samplerID.present ? samplerID.value : this.samplerID,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongSamplerData copyWithCompanion(DjmdSongSamplerCompanion data) {
    return DjmdSongSamplerData(
      id: data.id.present ? data.id.value : this.id,
      samplerID: data.samplerID.present ? data.samplerID.value : this.samplerID,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongSamplerData(')
          ..write('id: $id, ')
          ..write('samplerID: $samplerID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    samplerID,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongSamplerData &&
          other.id == this.id &&
          other.samplerID == this.samplerID &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongSamplerCompanion extends UpdateCompanion<DjmdSongSamplerData> {
  final Value<String?> id;
  final Value<String?> samplerID;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongSamplerCompanion({
    this.id = const Value.absent(),
    this.samplerID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongSamplerCompanion.insert({
    this.id = const Value.absent(),
    this.samplerID = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongSamplerData> custom({
    Expression<String>? id,
    Expression<String>? samplerID,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (samplerID != null) 'SamplerID': samplerID,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongSamplerCompanion copyWith({
    Value<String?>? id,
    Value<String?>? samplerID,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongSamplerCompanion(
      id: id ?? this.id,
      samplerID: samplerID ?? this.samplerID,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (samplerID.present) {
      map['SamplerID'] = Variable<String>(samplerID.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongSamplerCompanion(')
          ..write('id: $id, ')
          ..write('samplerID: $samplerID, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSongTagList extends Table
    with TableInfo<DjmdSongTagList, DjmdSongTagListData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSongTagList(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _contentIDMeta = const VerificationMeta(
    'contentID',
  );
  late final GeneratedColumn<String> contentID = GeneratedColumn<String>(
    'ContentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _trackNoMeta = const VerificationMeta(
    'trackNo',
  );
  late final GeneratedColumn<int> trackNo = GeneratedColumn<int>(
    'TrackNo',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSongTagList';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSongTagListData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ContentID')) {
      context.handle(
        _contentIDMeta,
        contentID.isAcceptableOrUnknown(data['ContentID']!, _contentIDMeta),
      );
    }
    if (data.containsKey('TrackNo')) {
      context.handle(
        _trackNoMeta,
        trackNo.isAcceptableOrUnknown(data['TrackNo']!, _trackNoMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSongTagListData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSongTagListData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      contentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ContentID'],
      ),
      trackNo: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}TrackNo'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSongTagList createAlias(String alias) {
    return DjmdSongTagList(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSongTagListData extends DataClass
    implements Insertable<DjmdSongTagListData> {
  final String? id;
  final String? contentID;
  final int? trackNo;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSongTagListData({
    this.id,
    this.contentID,
    this.trackNo,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || contentID != null) {
      map['ContentID'] = Variable<String>(contentID);
    }
    if (!nullToAbsent || trackNo != null) {
      map['TrackNo'] = Variable<int>(trackNo);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSongTagListCompanion toCompanion(bool nullToAbsent) {
    return DjmdSongTagListCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      contentID: contentID == null && nullToAbsent
          ? const Value.absent()
          : Value(contentID),
      trackNo: trackNo == null && nullToAbsent
          ? const Value.absent()
          : Value(trackNo),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSongTagListData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSongTagListData(
      id: serializer.fromJson<String?>(json['ID']),
      contentID: serializer.fromJson<String?>(json['ContentID']),
      trackNo: serializer.fromJson<int?>(json['TrackNo']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'ContentID': serializer.toJson<String?>(contentID),
      'TrackNo': serializer.toJson<int?>(trackNo),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSongTagListData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> contentID = const Value.absent(),
    Value<int?> trackNo = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSongTagListData(
    id: id.present ? id.value : this.id,
    contentID: contentID.present ? contentID.value : this.contentID,
    trackNo: trackNo.present ? trackNo.value : this.trackNo,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSongTagListData copyWithCompanion(DjmdSongTagListCompanion data) {
    return DjmdSongTagListData(
      id: data.id.present ? data.id.value : this.id,
      contentID: data.contentID.present ? data.contentID.value : this.contentID,
      trackNo: data.trackNo.present ? data.trackNo.value : this.trackNo,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongTagListData(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    contentID,
    trackNo,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSongTagListData &&
          other.id == this.id &&
          other.contentID == this.contentID &&
          other.trackNo == this.trackNo &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSongTagListCompanion extends UpdateCompanion<DjmdSongTagListData> {
  final Value<String?> id;
  final Value<String?> contentID;
  final Value<int?> trackNo;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSongTagListCompanion({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSongTagListCompanion.insert({
    this.id = const Value.absent(),
    this.contentID = const Value.absent(),
    this.trackNo = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSongTagListData> custom({
    Expression<String>? id,
    Expression<String>? contentID,
    Expression<int>? trackNo,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (contentID != null) 'ContentID': contentID,
      if (trackNo != null) 'TrackNo': trackNo,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSongTagListCompanion copyWith({
    Value<String?>? id,
    Value<String?>? contentID,
    Value<int?>? trackNo,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSongTagListCompanion(
      id: id ?? this.id,
      contentID: contentID ?? this.contentID,
      trackNo: trackNo ?? this.trackNo,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (contentID.present) {
      map['ContentID'] = Variable<String>(contentID.value);
    }
    if (trackNo.present) {
      map['TrackNo'] = Variable<int>(trackNo.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSongTagListCompanion(')
          ..write('id: $id, ')
          ..write('contentID: $contentID, ')
          ..write('trackNo: $trackNo, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class DjmdSort extends Table with TableInfo<DjmdSort, DjmdSortData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  DjmdSort(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _menuItemIDMeta = const VerificationMeta(
    'menuItemID',
  );
  late final GeneratedColumn<String> menuItemID = GeneratedColumn<String>(
    'MenuItemID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<int> seq = GeneratedColumn<int>(
    'Seq',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _disableMeta = const VerificationMeta(
    'disable',
  );
  late final GeneratedColumn<int> disable = GeneratedColumn<int>(
    'Disable',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    menuItemID,
    seq,
    disable,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'djmdSort';
  @override
  VerificationContext validateIntegrity(
    Insertable<DjmdSortData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('MenuItemID')) {
      context.handle(
        _menuItemIDMeta,
        menuItemID.isAcceptableOrUnknown(data['MenuItemID']!, _menuItemIDMeta),
      );
    }
    if (data.containsKey('Seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['Seq']!, _seqMeta),
      );
    }
    if (data.containsKey('Disable')) {
      context.handle(
        _disableMeta,
        disable.isAcceptableOrUnknown(data['Disable']!, _disableMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DjmdSortData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return DjmdSortData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      menuItemID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}MenuItemID'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Seq'],
      ),
      disable: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Disable'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  DjmdSort createAlias(String alias) {
    return DjmdSort(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class DjmdSortData extends DataClass implements Insertable<DjmdSortData> {
  final String? id;
  final String? menuItemID;
  final int? seq;
  final int? disable;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const DjmdSortData({
    this.id,
    this.menuItemID,
    this.seq,
    this.disable,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || menuItemID != null) {
      map['MenuItemID'] = Variable<String>(menuItemID);
    }
    if (!nullToAbsent || seq != null) {
      map['Seq'] = Variable<int>(seq);
    }
    if (!nullToAbsent || disable != null) {
      map['Disable'] = Variable<int>(disable);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  DjmdSortCompanion toCompanion(bool nullToAbsent) {
    return DjmdSortCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      menuItemID: menuItemID == null && nullToAbsent
          ? const Value.absent()
          : Value(menuItemID),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
      disable: disable == null && nullToAbsent
          ? const Value.absent()
          : Value(disable),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory DjmdSortData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DjmdSortData(
      id: serializer.fromJson<String?>(json['ID']),
      menuItemID: serializer.fromJson<String?>(json['MenuItemID']),
      seq: serializer.fromJson<int?>(json['Seq']),
      disable: serializer.fromJson<int?>(json['Disable']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'MenuItemID': serializer.toJson<String?>(menuItemID),
      'Seq': serializer.toJson<int?>(seq),
      'Disable': serializer.toJson<int?>(disable),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  DjmdSortData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> menuItemID = const Value.absent(),
    Value<int?> seq = const Value.absent(),
    Value<int?> disable = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => DjmdSortData(
    id: id.present ? id.value : this.id,
    menuItemID: menuItemID.present ? menuItemID.value : this.menuItemID,
    seq: seq.present ? seq.value : this.seq,
    disable: disable.present ? disable.value : this.disable,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  DjmdSortData copyWithCompanion(DjmdSortCompanion data) {
    return DjmdSortData(
      id: data.id.present ? data.id.value : this.id,
      menuItemID: data.menuItemID.present
          ? data.menuItemID.value
          : this.menuItemID,
      seq: data.seq.present ? data.seq.value : this.seq,
      disable: data.disable.present ? data.disable.value : this.disable,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSortData(')
          ..write('id: $id, ')
          ..write('menuItemID: $menuItemID, ')
          ..write('seq: $seq, ')
          ..write('disable: $disable, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    menuItemID,
    seq,
    disable,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DjmdSortData &&
          other.id == this.id &&
          other.menuItemID == this.menuItemID &&
          other.seq == this.seq &&
          other.disable == this.disable &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class DjmdSortCompanion extends UpdateCompanion<DjmdSortData> {
  final Value<String?> id;
  final Value<String?> menuItemID;
  final Value<int?> seq;
  final Value<int?> disable;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const DjmdSortCompanion({
    this.id = const Value.absent(),
    this.menuItemID = const Value.absent(),
    this.seq = const Value.absent(),
    this.disable = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  DjmdSortCompanion.insert({
    this.id = const Value.absent(),
    this.menuItemID = const Value.absent(),
    this.seq = const Value.absent(),
    this.disable = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<DjmdSortData> custom({
    Expression<String>? id,
    Expression<String>? menuItemID,
    Expression<int>? seq,
    Expression<int>? disable,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (menuItemID != null) 'MenuItemID': menuItemID,
      if (seq != null) 'Seq': seq,
      if (disable != null) 'Disable': disable,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  DjmdSortCompanion copyWith({
    Value<String?>? id,
    Value<String?>? menuItemID,
    Value<int?>? seq,
    Value<int?>? disable,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return DjmdSortCompanion(
      id: id ?? this.id,
      menuItemID: menuItemID ?? this.menuItemID,
      seq: seq ?? this.seq,
      disable: disable ?? this.disable,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (menuItemID.present) {
      map['MenuItemID'] = Variable<String>(menuItemID.value);
    }
    if (seq.present) {
      map['Seq'] = Variable<int>(seq.value);
    }
    if (disable.present) {
      map['Disable'] = Variable<int>(disable.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DjmdSortCompanion(')
          ..write('id: $id, ')
          ..write('menuItemID: $menuItemID, ')
          ..write('seq: $seq, ')
          ..write('disable: $disable, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class HotCueBanklistCue extends Table
    with TableInfo<HotCueBanklistCue, HotCueBanklistCueData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  HotCueBanklistCue(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _hotCueBanklistIDMeta = const VerificationMeta(
    'hotCueBanklistID',
  );
  late final GeneratedColumn<String> hotCueBanklistID = GeneratedColumn<String>(
    'HotCueBanklistID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _cuesMeta = const VerificationMeta('cues');
  late final GeneratedColumn<String> cues = GeneratedColumn<String>(
    'Cues',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbCueCountMeta = const VerificationMeta(
    'rbCueCount',
  );
  late final GeneratedColumn<int> rbCueCount = GeneratedColumn<int>(
    'rb_cue_count',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    hotCueBanklistID,
    cues,
    rbCueCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'hotCueBanklistCue';
  @override
  VerificationContext validateIntegrity(
    Insertable<HotCueBanklistCueData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('HotCueBanklistID')) {
      context.handle(
        _hotCueBanklistIDMeta,
        hotCueBanklistID.isAcceptableOrUnknown(
          data['HotCueBanklistID']!,
          _hotCueBanklistIDMeta,
        ),
      );
    }
    if (data.containsKey('Cues')) {
      context.handle(
        _cuesMeta,
        cues.isAcceptableOrUnknown(data['Cues']!, _cuesMeta),
      );
    }
    if (data.containsKey('rb_cue_count')) {
      context.handle(
        _rbCueCountMeta,
        rbCueCount.isAcceptableOrUnknown(
          data['rb_cue_count']!,
          _rbCueCountMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  HotCueBanklistCueData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return HotCueBanklistCueData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      hotCueBanklistID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}HotCueBanklistID'],
      ),
      cues: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Cues'],
      ),
      rbCueCount: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_cue_count'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  HotCueBanklistCue createAlias(String alias) {
    return HotCueBanklistCue(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class HotCueBanklistCueData extends DataClass
    implements Insertable<HotCueBanklistCueData> {
  final String? id;
  final String? hotCueBanklistID;
  final String? cues;
  final int? rbCueCount;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const HotCueBanklistCueData({
    this.id,
    this.hotCueBanklistID,
    this.cues,
    this.rbCueCount,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || hotCueBanklistID != null) {
      map['HotCueBanklistID'] = Variable<String>(hotCueBanklistID);
    }
    if (!nullToAbsent || cues != null) {
      map['Cues'] = Variable<String>(cues);
    }
    if (!nullToAbsent || rbCueCount != null) {
      map['rb_cue_count'] = Variable<int>(rbCueCount);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  HotCueBanklistCueCompanion toCompanion(bool nullToAbsent) {
    return HotCueBanklistCueCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      hotCueBanklistID: hotCueBanklistID == null && nullToAbsent
          ? const Value.absent()
          : Value(hotCueBanklistID),
      cues: cues == null && nullToAbsent ? const Value.absent() : Value(cues),
      rbCueCount: rbCueCount == null && nullToAbsent
          ? const Value.absent()
          : Value(rbCueCount),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory HotCueBanklistCueData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return HotCueBanklistCueData(
      id: serializer.fromJson<String?>(json['ID']),
      hotCueBanklistID: serializer.fromJson<String?>(json['HotCueBanklistID']),
      cues: serializer.fromJson<String?>(json['Cues']),
      rbCueCount: serializer.fromJson<int?>(json['rb_cue_count']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'HotCueBanklistID': serializer.toJson<String?>(hotCueBanklistID),
      'Cues': serializer.toJson<String?>(cues),
      'rb_cue_count': serializer.toJson<int?>(rbCueCount),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  HotCueBanklistCueData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> hotCueBanklistID = const Value.absent(),
    Value<String?> cues = const Value.absent(),
    Value<int?> rbCueCount = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => HotCueBanklistCueData(
    id: id.present ? id.value : this.id,
    hotCueBanklistID: hotCueBanklistID.present
        ? hotCueBanklistID.value
        : this.hotCueBanklistID,
    cues: cues.present ? cues.value : this.cues,
    rbCueCount: rbCueCount.present ? rbCueCount.value : this.rbCueCount,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  HotCueBanklistCueData copyWithCompanion(HotCueBanklistCueCompanion data) {
    return HotCueBanklistCueData(
      id: data.id.present ? data.id.value : this.id,
      hotCueBanklistID: data.hotCueBanklistID.present
          ? data.hotCueBanklistID.value
          : this.hotCueBanklistID,
      cues: data.cues.present ? data.cues.value : this.cues,
      rbCueCount: data.rbCueCount.present
          ? data.rbCueCount.value
          : this.rbCueCount,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('HotCueBanklistCueData(')
          ..write('id: $id, ')
          ..write('hotCueBanklistID: $hotCueBanklistID, ')
          ..write('cues: $cues, ')
          ..write('rbCueCount: $rbCueCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    hotCueBanklistID,
    cues,
    rbCueCount,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is HotCueBanklistCueData &&
          other.id == this.id &&
          other.hotCueBanklistID == this.hotCueBanklistID &&
          other.cues == this.cues &&
          other.rbCueCount == this.rbCueCount &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class HotCueBanklistCueCompanion
    extends UpdateCompanion<HotCueBanklistCueData> {
  final Value<String?> id;
  final Value<String?> hotCueBanklistID;
  final Value<String?> cues;
  final Value<int?> rbCueCount;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const HotCueBanklistCueCompanion({
    this.id = const Value.absent(),
    this.hotCueBanklistID = const Value.absent(),
    this.cues = const Value.absent(),
    this.rbCueCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  HotCueBanklistCueCompanion.insert({
    this.id = const Value.absent(),
    this.hotCueBanklistID = const Value.absent(),
    this.cues = const Value.absent(),
    this.rbCueCount = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<HotCueBanklistCueData> custom({
    Expression<String>? id,
    Expression<String>? hotCueBanklistID,
    Expression<String>? cues,
    Expression<int>? rbCueCount,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (hotCueBanklistID != null) 'HotCueBanklistID': hotCueBanklistID,
      if (cues != null) 'Cues': cues,
      if (rbCueCount != null) 'rb_cue_count': rbCueCount,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  HotCueBanklistCueCompanion copyWith({
    Value<String?>? id,
    Value<String?>? hotCueBanklistID,
    Value<String?>? cues,
    Value<int?>? rbCueCount,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return HotCueBanklistCueCompanion(
      id: id ?? this.id,
      hotCueBanklistID: hotCueBanklistID ?? this.hotCueBanklistID,
      cues: cues ?? this.cues,
      rbCueCount: rbCueCount ?? this.rbCueCount,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (hotCueBanklistID.present) {
      map['HotCueBanklistID'] = Variable<String>(hotCueBanklistID.value);
    }
    if (cues.present) {
      map['Cues'] = Variable<String>(cues.value);
    }
    if (rbCueCount.present) {
      map['rb_cue_count'] = Variable<int>(rbCueCount.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('HotCueBanklistCueCompanion(')
          ..write('id: $id, ')
          ..write('hotCueBanklistID: $hotCueBanklistID, ')
          ..write('cues: $cues, ')
          ..write('rbCueCount: $rbCueCount, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class ImageFile extends Table with TableInfo<ImageFile, ImageFileData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  ImageFile(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _entityTableNameMeta = const VerificationMeta(
    'entityTableName',
  );
  late final GeneratedColumn<String> entityTableName = GeneratedColumn<String>(
    'EntityTableName',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _targetUUIDMeta = const VerificationMeta(
    'targetUUID',
  );
  late final GeneratedColumn<String> targetUUID = GeneratedColumn<String>(
    'TargetUUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _targetIDMeta = const VerificationMeta(
    'targetID',
  );
  late final GeneratedColumn<String> targetID = GeneratedColumn<String>(
    'TargetID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _pathMeta = const VerificationMeta('path');
  late final GeneratedColumn<String> path = GeneratedColumn<String>(
    'Path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _hashMeta = const VerificationMeta('hash');
  late final GeneratedColumn<String> hash = GeneratedColumn<String>(
    'Hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _sizeMeta = const VerificationMeta('size');
  late final GeneratedColumn<int> size = GeneratedColumn<int>(
    'Size',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalPathMeta = const VerificationMeta(
    'rbLocalPath',
  );
  late final GeneratedColumn<String> rbLocalPath = GeneratedColumn<String>(
    'rb_local_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncHashMeta = const VerificationMeta(
    'rbInsyncHash',
  );
  late final GeneratedColumn<String> rbInsyncHash = GeneratedColumn<String>(
    'rb_insync_hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncLocalUsnMeta = const VerificationMeta(
    'rbInsyncLocalUsn',
  );
  late final GeneratedColumn<int> rbInsyncLocalUsn = GeneratedColumn<int>(
    'rb_insync_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbFileHashDirtyMeta = const VerificationMeta(
    'rbFileHashDirty',
  );
  late final GeneratedColumn<int> rbFileHashDirty = GeneratedColumn<int>(
    'rb_file_hash_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalFileStatusMeta = const VerificationMeta(
    'rbLocalFileStatus',
  );
  late final GeneratedColumn<int> rbLocalFileStatus = GeneratedColumn<int>(
    'rb_local_file_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbInProgressMeta = const VerificationMeta(
    'rbInProgress',
  );
  late final GeneratedColumn<int> rbInProgress = GeneratedColumn<int>(
    'rb_in_progress',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbProcessTypeMeta = const VerificationMeta(
    'rbProcessType',
  );
  late final GeneratedColumn<int> rbProcessType = GeneratedColumn<int>(
    'rb_process_type',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbTempPathMeta = const VerificationMeta(
    'rbTempPath',
  );
  late final GeneratedColumn<String> rbTempPath = GeneratedColumn<String>(
    'rb_temp_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbPriorityMeta = const VerificationMeta(
    'rbPriority',
  );
  late final GeneratedColumn<int> rbPriority = GeneratedColumn<int>(
    'rb_priority',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 50',
    defaultValue: const CustomExpression('50'),
  );
  static const VerificationMeta _rbFileSizeDirtyMeta = const VerificationMeta(
    'rbFileSizeDirty',
  );
  late final GeneratedColumn<int> rbFileSizeDirty = GeneratedColumn<int>(
    'rb_file_size_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    entityTableName,
    targetUUID,
    targetID,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbLocalFileStatus,
    rbInProgress,
    rbProcessType,
    rbTempPath,
    rbPriority,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'imageFile';
  @override
  VerificationContext validateIntegrity(
    Insertable<ImageFileData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('EntityTableName')) {
      context.handle(
        _entityTableNameMeta,
        entityTableName.isAcceptableOrUnknown(
          data['EntityTableName']!,
          _entityTableNameMeta,
        ),
      );
    }
    if (data.containsKey('TargetUUID')) {
      context.handle(
        _targetUUIDMeta,
        targetUUID.isAcceptableOrUnknown(data['TargetUUID']!, _targetUUIDMeta),
      );
    }
    if (data.containsKey('TargetID')) {
      context.handle(
        _targetIDMeta,
        targetID.isAcceptableOrUnknown(data['TargetID']!, _targetIDMeta),
      );
    }
    if (data.containsKey('Path')) {
      context.handle(
        _pathMeta,
        path.isAcceptableOrUnknown(data['Path']!, _pathMeta),
      );
    }
    if (data.containsKey('Hash')) {
      context.handle(
        _hashMeta,
        hash.isAcceptableOrUnknown(data['Hash']!, _hashMeta),
      );
    }
    if (data.containsKey('Size')) {
      context.handle(
        _sizeMeta,
        size.isAcceptableOrUnknown(data['Size']!, _sizeMeta),
      );
    }
    if (data.containsKey('rb_local_path')) {
      context.handle(
        _rbLocalPathMeta,
        rbLocalPath.isAcceptableOrUnknown(
          data['rb_local_path']!,
          _rbLocalPathMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_hash')) {
      context.handle(
        _rbInsyncHashMeta,
        rbInsyncHash.isAcceptableOrUnknown(
          data['rb_insync_hash']!,
          _rbInsyncHashMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_local_usn')) {
      context.handle(
        _rbInsyncLocalUsnMeta,
        rbInsyncLocalUsn.isAcceptableOrUnknown(
          data['rb_insync_local_usn']!,
          _rbInsyncLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('rb_file_hash_dirty')) {
      context.handle(
        _rbFileHashDirtyMeta,
        rbFileHashDirty.isAcceptableOrUnknown(
          data['rb_file_hash_dirty']!,
          _rbFileHashDirtyMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_file_status')) {
      context.handle(
        _rbLocalFileStatusMeta,
        rbLocalFileStatus.isAcceptableOrUnknown(
          data['rb_local_file_status']!,
          _rbLocalFileStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_in_progress')) {
      context.handle(
        _rbInProgressMeta,
        rbInProgress.isAcceptableOrUnknown(
          data['rb_in_progress']!,
          _rbInProgressMeta,
        ),
      );
    }
    if (data.containsKey('rb_process_type')) {
      context.handle(
        _rbProcessTypeMeta,
        rbProcessType.isAcceptableOrUnknown(
          data['rb_process_type']!,
          _rbProcessTypeMeta,
        ),
      );
    }
    if (data.containsKey('rb_temp_path')) {
      context.handle(
        _rbTempPathMeta,
        rbTempPath.isAcceptableOrUnknown(
          data['rb_temp_path']!,
          _rbTempPathMeta,
        ),
      );
    }
    if (data.containsKey('rb_priority')) {
      context.handle(
        _rbPriorityMeta,
        rbPriority.isAcceptableOrUnknown(data['rb_priority']!, _rbPriorityMeta),
      );
    }
    if (data.containsKey('rb_file_size_dirty')) {
      context.handle(
        _rbFileSizeDirtyMeta,
        rbFileSizeDirty.isAcceptableOrUnknown(
          data['rb_file_size_dirty']!,
          _rbFileSizeDirtyMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ImageFileData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return ImageFileData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      entityTableName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}EntityTableName'],
      ),
      targetUUID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}TargetUUID'],
      ),
      targetID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}TargetID'],
      ),
      path: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Path'],
      ),
      hash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Hash'],
      ),
      size: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Size'],
      ),
      rbLocalPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_local_path'],
      ),
      rbInsyncHash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_insync_hash'],
      ),
      rbInsyncLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_insync_local_usn'],
      ),
      rbFileHashDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_hash_dirty'],
      ),
      rbLocalFileStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_file_status'],
      ),
      rbInProgress: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_in_progress'],
      ),
      rbProcessType: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_process_type'],
      ),
      rbTempPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_temp_path'],
      ),
      rbPriority: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_priority'],
      ),
      rbFileSizeDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_size_dirty'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  ImageFile createAlias(String alias) {
    return ImageFile(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class ImageFileData extends DataClass implements Insertable<ImageFileData> {
  final String? id;
  final String? entityTableName;
  final String? targetUUID;
  final String? targetID;
  final String? path;
  final String? hash;
  final int? size;
  final String? rbLocalPath;
  final String? rbInsyncHash;
  final int? rbInsyncLocalUsn;
  final int? rbFileHashDirty;
  final int? rbLocalFileStatus;
  final int? rbInProgress;
  final int? rbProcessType;
  final String? rbTempPath;
  final int? rbPriority;
  final int? rbFileSizeDirty;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const ImageFileData({
    this.id,
    this.entityTableName,
    this.targetUUID,
    this.targetID,
    this.path,
    this.hash,
    this.size,
    this.rbLocalPath,
    this.rbInsyncHash,
    this.rbInsyncLocalUsn,
    this.rbFileHashDirty,
    this.rbLocalFileStatus,
    this.rbInProgress,
    this.rbProcessType,
    this.rbTempPath,
    this.rbPriority,
    this.rbFileSizeDirty,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || entityTableName != null) {
      map['EntityTableName'] = Variable<String>(entityTableName);
    }
    if (!nullToAbsent || targetUUID != null) {
      map['TargetUUID'] = Variable<String>(targetUUID);
    }
    if (!nullToAbsent || targetID != null) {
      map['TargetID'] = Variable<String>(targetID);
    }
    if (!nullToAbsent || path != null) {
      map['Path'] = Variable<String>(path);
    }
    if (!nullToAbsent || hash != null) {
      map['Hash'] = Variable<String>(hash);
    }
    if (!nullToAbsent || size != null) {
      map['Size'] = Variable<int>(size);
    }
    if (!nullToAbsent || rbLocalPath != null) {
      map['rb_local_path'] = Variable<String>(rbLocalPath);
    }
    if (!nullToAbsent || rbInsyncHash != null) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash);
    }
    if (!nullToAbsent || rbInsyncLocalUsn != null) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn);
    }
    if (!nullToAbsent || rbFileHashDirty != null) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty);
    }
    if (!nullToAbsent || rbLocalFileStatus != null) {
      map['rb_local_file_status'] = Variable<int>(rbLocalFileStatus);
    }
    if (!nullToAbsent || rbInProgress != null) {
      map['rb_in_progress'] = Variable<int>(rbInProgress);
    }
    if (!nullToAbsent || rbProcessType != null) {
      map['rb_process_type'] = Variable<int>(rbProcessType);
    }
    if (!nullToAbsent || rbTempPath != null) {
      map['rb_temp_path'] = Variable<String>(rbTempPath);
    }
    if (!nullToAbsent || rbPriority != null) {
      map['rb_priority'] = Variable<int>(rbPriority);
    }
    if (!nullToAbsent || rbFileSizeDirty != null) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  ImageFileCompanion toCompanion(bool nullToAbsent) {
    return ImageFileCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      entityTableName: entityTableName == null && nullToAbsent
          ? const Value.absent()
          : Value(entityTableName),
      targetUUID: targetUUID == null && nullToAbsent
          ? const Value.absent()
          : Value(targetUUID),
      targetID: targetID == null && nullToAbsent
          ? const Value.absent()
          : Value(targetID),
      path: path == null && nullToAbsent ? const Value.absent() : Value(path),
      hash: hash == null && nullToAbsent ? const Value.absent() : Value(hash),
      size: size == null && nullToAbsent ? const Value.absent() : Value(size),
      rbLocalPath: rbLocalPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalPath),
      rbInsyncHash: rbInsyncHash == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncHash),
      rbInsyncLocalUsn: rbInsyncLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncLocalUsn),
      rbFileHashDirty: rbFileHashDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileHashDirty),
      rbLocalFileStatus: rbLocalFileStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalFileStatus),
      rbInProgress: rbInProgress == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInProgress),
      rbProcessType: rbProcessType == null && nullToAbsent
          ? const Value.absent()
          : Value(rbProcessType),
      rbTempPath: rbTempPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbTempPath),
      rbPriority: rbPriority == null && nullToAbsent
          ? const Value.absent()
          : Value(rbPriority),
      rbFileSizeDirty: rbFileSizeDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileSizeDirty),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory ImageFileData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ImageFileData(
      id: serializer.fromJson<String?>(json['ID']),
      entityTableName: serializer.fromJson<String?>(json['EntityTableName']),
      targetUUID: serializer.fromJson<String?>(json['TargetUUID']),
      targetID: serializer.fromJson<String?>(json['TargetID']),
      path: serializer.fromJson<String?>(json['Path']),
      hash: serializer.fromJson<String?>(json['Hash']),
      size: serializer.fromJson<int?>(json['Size']),
      rbLocalPath: serializer.fromJson<String?>(json['rb_local_path']),
      rbInsyncHash: serializer.fromJson<String?>(json['rb_insync_hash']),
      rbInsyncLocalUsn: serializer.fromJson<int?>(json['rb_insync_local_usn']),
      rbFileHashDirty: serializer.fromJson<int?>(json['rb_file_hash_dirty']),
      rbLocalFileStatus: serializer.fromJson<int?>(
        json['rb_local_file_status'],
      ),
      rbInProgress: serializer.fromJson<int?>(json['rb_in_progress']),
      rbProcessType: serializer.fromJson<int?>(json['rb_process_type']),
      rbTempPath: serializer.fromJson<String?>(json['rb_temp_path']),
      rbPriority: serializer.fromJson<int?>(json['rb_priority']),
      rbFileSizeDirty: serializer.fromJson<int?>(json['rb_file_size_dirty']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'EntityTableName': serializer.toJson<String?>(entityTableName),
      'TargetUUID': serializer.toJson<String?>(targetUUID),
      'TargetID': serializer.toJson<String?>(targetID),
      'Path': serializer.toJson<String?>(path),
      'Hash': serializer.toJson<String?>(hash),
      'Size': serializer.toJson<int?>(size),
      'rb_local_path': serializer.toJson<String?>(rbLocalPath),
      'rb_insync_hash': serializer.toJson<String?>(rbInsyncHash),
      'rb_insync_local_usn': serializer.toJson<int?>(rbInsyncLocalUsn),
      'rb_file_hash_dirty': serializer.toJson<int?>(rbFileHashDirty),
      'rb_local_file_status': serializer.toJson<int?>(rbLocalFileStatus),
      'rb_in_progress': serializer.toJson<int?>(rbInProgress),
      'rb_process_type': serializer.toJson<int?>(rbProcessType),
      'rb_temp_path': serializer.toJson<String?>(rbTempPath),
      'rb_priority': serializer.toJson<int?>(rbPriority),
      'rb_file_size_dirty': serializer.toJson<int?>(rbFileSizeDirty),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  ImageFileData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> entityTableName = const Value.absent(),
    Value<String?> targetUUID = const Value.absent(),
    Value<String?> targetID = const Value.absent(),
    Value<String?> path = const Value.absent(),
    Value<String?> hash = const Value.absent(),
    Value<int?> size = const Value.absent(),
    Value<String?> rbLocalPath = const Value.absent(),
    Value<String?> rbInsyncHash = const Value.absent(),
    Value<int?> rbInsyncLocalUsn = const Value.absent(),
    Value<int?> rbFileHashDirty = const Value.absent(),
    Value<int?> rbLocalFileStatus = const Value.absent(),
    Value<int?> rbInProgress = const Value.absent(),
    Value<int?> rbProcessType = const Value.absent(),
    Value<String?> rbTempPath = const Value.absent(),
    Value<int?> rbPriority = const Value.absent(),
    Value<int?> rbFileSizeDirty = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => ImageFileData(
    id: id.present ? id.value : this.id,
    entityTableName: entityTableName.present
        ? entityTableName.value
        : this.entityTableName,
    targetUUID: targetUUID.present ? targetUUID.value : this.targetUUID,
    targetID: targetID.present ? targetID.value : this.targetID,
    path: path.present ? path.value : this.path,
    hash: hash.present ? hash.value : this.hash,
    size: size.present ? size.value : this.size,
    rbLocalPath: rbLocalPath.present ? rbLocalPath.value : this.rbLocalPath,
    rbInsyncHash: rbInsyncHash.present ? rbInsyncHash.value : this.rbInsyncHash,
    rbInsyncLocalUsn: rbInsyncLocalUsn.present
        ? rbInsyncLocalUsn.value
        : this.rbInsyncLocalUsn,
    rbFileHashDirty: rbFileHashDirty.present
        ? rbFileHashDirty.value
        : this.rbFileHashDirty,
    rbLocalFileStatus: rbLocalFileStatus.present
        ? rbLocalFileStatus.value
        : this.rbLocalFileStatus,
    rbInProgress: rbInProgress.present ? rbInProgress.value : this.rbInProgress,
    rbProcessType: rbProcessType.present
        ? rbProcessType.value
        : this.rbProcessType,
    rbTempPath: rbTempPath.present ? rbTempPath.value : this.rbTempPath,
    rbPriority: rbPriority.present ? rbPriority.value : this.rbPriority,
    rbFileSizeDirty: rbFileSizeDirty.present
        ? rbFileSizeDirty.value
        : this.rbFileSizeDirty,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  ImageFileData copyWithCompanion(ImageFileCompanion data) {
    return ImageFileData(
      id: data.id.present ? data.id.value : this.id,
      entityTableName: data.entityTableName.present
          ? data.entityTableName.value
          : this.entityTableName,
      targetUUID: data.targetUUID.present
          ? data.targetUUID.value
          : this.targetUUID,
      targetID: data.targetID.present ? data.targetID.value : this.targetID,
      path: data.path.present ? data.path.value : this.path,
      hash: data.hash.present ? data.hash.value : this.hash,
      size: data.size.present ? data.size.value : this.size,
      rbLocalPath: data.rbLocalPath.present
          ? data.rbLocalPath.value
          : this.rbLocalPath,
      rbInsyncHash: data.rbInsyncHash.present
          ? data.rbInsyncHash.value
          : this.rbInsyncHash,
      rbInsyncLocalUsn: data.rbInsyncLocalUsn.present
          ? data.rbInsyncLocalUsn.value
          : this.rbInsyncLocalUsn,
      rbFileHashDirty: data.rbFileHashDirty.present
          ? data.rbFileHashDirty.value
          : this.rbFileHashDirty,
      rbLocalFileStatus: data.rbLocalFileStatus.present
          ? data.rbLocalFileStatus.value
          : this.rbLocalFileStatus,
      rbInProgress: data.rbInProgress.present
          ? data.rbInProgress.value
          : this.rbInProgress,
      rbProcessType: data.rbProcessType.present
          ? data.rbProcessType.value
          : this.rbProcessType,
      rbTempPath: data.rbTempPath.present
          ? data.rbTempPath.value
          : this.rbTempPath,
      rbPriority: data.rbPriority.present
          ? data.rbPriority.value
          : this.rbPriority,
      rbFileSizeDirty: data.rbFileSizeDirty.present
          ? data.rbFileSizeDirty.value
          : this.rbFileSizeDirty,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('ImageFileData(')
          ..write('id: $id, ')
          ..write('entityTableName: $entityTableName, ')
          ..write('targetUUID: $targetUUID, ')
          ..write('targetID: $targetID, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbLocalFileStatus: $rbLocalFileStatus, ')
          ..write('rbInProgress: $rbInProgress, ')
          ..write('rbProcessType: $rbProcessType, ')
          ..write('rbTempPath: $rbTempPath, ')
          ..write('rbPriority: $rbPriority, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
    id,
    entityTableName,
    targetUUID,
    targetID,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbLocalFileStatus,
    rbInProgress,
    rbProcessType,
    rbTempPath,
    rbPriority,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ImageFileData &&
          other.id == this.id &&
          other.entityTableName == this.entityTableName &&
          other.targetUUID == this.targetUUID &&
          other.targetID == this.targetID &&
          other.path == this.path &&
          other.hash == this.hash &&
          other.size == this.size &&
          other.rbLocalPath == this.rbLocalPath &&
          other.rbInsyncHash == this.rbInsyncHash &&
          other.rbInsyncLocalUsn == this.rbInsyncLocalUsn &&
          other.rbFileHashDirty == this.rbFileHashDirty &&
          other.rbLocalFileStatus == this.rbLocalFileStatus &&
          other.rbInProgress == this.rbInProgress &&
          other.rbProcessType == this.rbProcessType &&
          other.rbTempPath == this.rbTempPath &&
          other.rbPriority == this.rbPriority &&
          other.rbFileSizeDirty == this.rbFileSizeDirty &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class ImageFileCompanion extends UpdateCompanion<ImageFileData> {
  final Value<String?> id;
  final Value<String?> entityTableName;
  final Value<String?> targetUUID;
  final Value<String?> targetID;
  final Value<String?> path;
  final Value<String?> hash;
  final Value<int?> size;
  final Value<String?> rbLocalPath;
  final Value<String?> rbInsyncHash;
  final Value<int?> rbInsyncLocalUsn;
  final Value<int?> rbFileHashDirty;
  final Value<int?> rbLocalFileStatus;
  final Value<int?> rbInProgress;
  final Value<int?> rbProcessType;
  final Value<String?> rbTempPath;
  final Value<int?> rbPriority;
  final Value<int?> rbFileSizeDirty;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const ImageFileCompanion({
    this.id = const Value.absent(),
    this.entityTableName = const Value.absent(),
    this.targetUUID = const Value.absent(),
    this.targetID = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbLocalFileStatus = const Value.absent(),
    this.rbInProgress = const Value.absent(),
    this.rbProcessType = const Value.absent(),
    this.rbTempPath = const Value.absent(),
    this.rbPriority = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  ImageFileCompanion.insert({
    this.id = const Value.absent(),
    this.entityTableName = const Value.absent(),
    this.targetUUID = const Value.absent(),
    this.targetID = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbLocalFileStatus = const Value.absent(),
    this.rbInProgress = const Value.absent(),
    this.rbProcessType = const Value.absent(),
    this.rbTempPath = const Value.absent(),
    this.rbPriority = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<ImageFileData> custom({
    Expression<String>? id,
    Expression<String>? entityTableName,
    Expression<String>? targetUUID,
    Expression<String>? targetID,
    Expression<String>? path,
    Expression<String>? hash,
    Expression<int>? size,
    Expression<String>? rbLocalPath,
    Expression<String>? rbInsyncHash,
    Expression<int>? rbInsyncLocalUsn,
    Expression<int>? rbFileHashDirty,
    Expression<int>? rbLocalFileStatus,
    Expression<int>? rbInProgress,
    Expression<int>? rbProcessType,
    Expression<String>? rbTempPath,
    Expression<int>? rbPriority,
    Expression<int>? rbFileSizeDirty,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (entityTableName != null) 'EntityTableName': entityTableName,
      if (targetUUID != null) 'TargetUUID': targetUUID,
      if (targetID != null) 'TargetID': targetID,
      if (path != null) 'Path': path,
      if (hash != null) 'Hash': hash,
      if (size != null) 'Size': size,
      if (rbLocalPath != null) 'rb_local_path': rbLocalPath,
      if (rbInsyncHash != null) 'rb_insync_hash': rbInsyncHash,
      if (rbInsyncLocalUsn != null) 'rb_insync_local_usn': rbInsyncLocalUsn,
      if (rbFileHashDirty != null) 'rb_file_hash_dirty': rbFileHashDirty,
      if (rbLocalFileStatus != null) 'rb_local_file_status': rbLocalFileStatus,
      if (rbInProgress != null) 'rb_in_progress': rbInProgress,
      if (rbProcessType != null) 'rb_process_type': rbProcessType,
      if (rbTempPath != null) 'rb_temp_path': rbTempPath,
      if (rbPriority != null) 'rb_priority': rbPriority,
      if (rbFileSizeDirty != null) 'rb_file_size_dirty': rbFileSizeDirty,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  ImageFileCompanion copyWith({
    Value<String?>? id,
    Value<String?>? entityTableName,
    Value<String?>? targetUUID,
    Value<String?>? targetID,
    Value<String?>? path,
    Value<String?>? hash,
    Value<int?>? size,
    Value<String?>? rbLocalPath,
    Value<String?>? rbInsyncHash,
    Value<int?>? rbInsyncLocalUsn,
    Value<int?>? rbFileHashDirty,
    Value<int?>? rbLocalFileStatus,
    Value<int?>? rbInProgress,
    Value<int?>? rbProcessType,
    Value<String?>? rbTempPath,
    Value<int?>? rbPriority,
    Value<int?>? rbFileSizeDirty,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return ImageFileCompanion(
      id: id ?? this.id,
      entityTableName: entityTableName ?? this.entityTableName,
      targetUUID: targetUUID ?? this.targetUUID,
      targetID: targetID ?? this.targetID,
      path: path ?? this.path,
      hash: hash ?? this.hash,
      size: size ?? this.size,
      rbLocalPath: rbLocalPath ?? this.rbLocalPath,
      rbInsyncHash: rbInsyncHash ?? this.rbInsyncHash,
      rbInsyncLocalUsn: rbInsyncLocalUsn ?? this.rbInsyncLocalUsn,
      rbFileHashDirty: rbFileHashDirty ?? this.rbFileHashDirty,
      rbLocalFileStatus: rbLocalFileStatus ?? this.rbLocalFileStatus,
      rbInProgress: rbInProgress ?? this.rbInProgress,
      rbProcessType: rbProcessType ?? this.rbProcessType,
      rbTempPath: rbTempPath ?? this.rbTempPath,
      rbPriority: rbPriority ?? this.rbPriority,
      rbFileSizeDirty: rbFileSizeDirty ?? this.rbFileSizeDirty,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (entityTableName.present) {
      map['EntityTableName'] = Variable<String>(entityTableName.value);
    }
    if (targetUUID.present) {
      map['TargetUUID'] = Variable<String>(targetUUID.value);
    }
    if (targetID.present) {
      map['TargetID'] = Variable<String>(targetID.value);
    }
    if (path.present) {
      map['Path'] = Variable<String>(path.value);
    }
    if (hash.present) {
      map['Hash'] = Variable<String>(hash.value);
    }
    if (size.present) {
      map['Size'] = Variable<int>(size.value);
    }
    if (rbLocalPath.present) {
      map['rb_local_path'] = Variable<String>(rbLocalPath.value);
    }
    if (rbInsyncHash.present) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash.value);
    }
    if (rbInsyncLocalUsn.present) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn.value);
    }
    if (rbFileHashDirty.present) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty.value);
    }
    if (rbLocalFileStatus.present) {
      map['rb_local_file_status'] = Variable<int>(rbLocalFileStatus.value);
    }
    if (rbInProgress.present) {
      map['rb_in_progress'] = Variable<int>(rbInProgress.value);
    }
    if (rbProcessType.present) {
      map['rb_process_type'] = Variable<int>(rbProcessType.value);
    }
    if (rbTempPath.present) {
      map['rb_temp_path'] = Variable<String>(rbTempPath.value);
    }
    if (rbPriority.present) {
      map['rb_priority'] = Variable<int>(rbPriority.value);
    }
    if (rbFileSizeDirty.present) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ImageFileCompanion(')
          ..write('id: $id, ')
          ..write('entityTableName: $entityTableName, ')
          ..write('targetUUID: $targetUUID, ')
          ..write('targetID: $targetID, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbLocalFileStatus: $rbLocalFileStatus, ')
          ..write('rbInProgress: $rbInProgress, ')
          ..write('rbProcessType: $rbProcessType, ')
          ..write('rbTempPath: $rbTempPath, ')
          ..write('rbPriority: $rbPriority, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class SettingFile extends Table with TableInfo<SettingFile, SettingFileData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  SettingFile(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _pathMeta = const VerificationMeta('path');
  late final GeneratedColumn<String> path = GeneratedColumn<String>(
    'Path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _hashMeta = const VerificationMeta('hash');
  late final GeneratedColumn<String> hash = GeneratedColumn<String>(
    'Hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _sizeMeta = const VerificationMeta('size');
  late final GeneratedColumn<int> size = GeneratedColumn<int>(
    'Size',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalPathMeta = const VerificationMeta(
    'rbLocalPath',
  );
  late final GeneratedColumn<String> rbLocalPath = GeneratedColumn<String>(
    'rb_local_path',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncHashMeta = const VerificationMeta(
    'rbInsyncHash',
  );
  late final GeneratedColumn<String> rbInsyncHash = GeneratedColumn<String>(
    'rb_insync_hash',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbInsyncLocalUsnMeta = const VerificationMeta(
    'rbInsyncLocalUsn',
  );
  late final GeneratedColumn<int> rbInsyncLocalUsn = GeneratedColumn<int>(
    'rb_insync_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbFileHashDirtyMeta = const VerificationMeta(
    'rbFileHashDirty',
  );
  late final GeneratedColumn<int> rbFileHashDirty = GeneratedColumn<int>(
    'rb_file_hash_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbFileSizeDirtyMeta = const VerificationMeta(
    'rbFileSizeDirty',
  );
  late final GeneratedColumn<int> rbFileSizeDirty = GeneratedColumn<int>(
    'rb_file_size_dirty',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'settingFile';
  @override
  VerificationContext validateIntegrity(
    Insertable<SettingFileData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('Path')) {
      context.handle(
        _pathMeta,
        path.isAcceptableOrUnknown(data['Path']!, _pathMeta),
      );
    }
    if (data.containsKey('Hash')) {
      context.handle(
        _hashMeta,
        hash.isAcceptableOrUnknown(data['Hash']!, _hashMeta),
      );
    }
    if (data.containsKey('Size')) {
      context.handle(
        _sizeMeta,
        size.isAcceptableOrUnknown(data['Size']!, _sizeMeta),
      );
    }
    if (data.containsKey('rb_local_path')) {
      context.handle(
        _rbLocalPathMeta,
        rbLocalPath.isAcceptableOrUnknown(
          data['rb_local_path']!,
          _rbLocalPathMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_hash')) {
      context.handle(
        _rbInsyncHashMeta,
        rbInsyncHash.isAcceptableOrUnknown(
          data['rb_insync_hash']!,
          _rbInsyncHashMeta,
        ),
      );
    }
    if (data.containsKey('rb_insync_local_usn')) {
      context.handle(
        _rbInsyncLocalUsnMeta,
        rbInsyncLocalUsn.isAcceptableOrUnknown(
          data['rb_insync_local_usn']!,
          _rbInsyncLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('rb_file_hash_dirty')) {
      context.handle(
        _rbFileHashDirtyMeta,
        rbFileHashDirty.isAcceptableOrUnknown(
          data['rb_file_hash_dirty']!,
          _rbFileHashDirtyMeta,
        ),
      );
    }
    if (data.containsKey('rb_file_size_dirty')) {
      context.handle(
        _rbFileSizeDirtyMeta,
        rbFileSizeDirty.isAcceptableOrUnknown(
          data['rb_file_size_dirty']!,
          _rbFileSizeDirtyMeta,
        ),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  SettingFileData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return SettingFileData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      path: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Path'],
      ),
      hash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}Hash'],
      ),
      size: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}Size'],
      ),
      rbLocalPath: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_local_path'],
      ),
      rbInsyncHash: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}rb_insync_hash'],
      ),
      rbInsyncLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_insync_local_usn'],
      ),
      rbFileHashDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_hash_dirty'],
      ),
      rbFileSizeDirty: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_file_size_dirty'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  SettingFile createAlias(String alias) {
    return SettingFile(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class SettingFileData extends DataClass implements Insertable<SettingFileData> {
  final String? id;
  final String? path;
  final String? hash;
  final int? size;
  final String? rbLocalPath;
  final String? rbInsyncHash;
  final int? rbInsyncLocalUsn;
  final int? rbFileHashDirty;
  final int? rbFileSizeDirty;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const SettingFileData({
    this.id,
    this.path,
    this.hash,
    this.size,
    this.rbLocalPath,
    this.rbInsyncHash,
    this.rbInsyncLocalUsn,
    this.rbFileHashDirty,
    this.rbFileSizeDirty,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || path != null) {
      map['Path'] = Variable<String>(path);
    }
    if (!nullToAbsent || hash != null) {
      map['Hash'] = Variable<String>(hash);
    }
    if (!nullToAbsent || size != null) {
      map['Size'] = Variable<int>(size);
    }
    if (!nullToAbsent || rbLocalPath != null) {
      map['rb_local_path'] = Variable<String>(rbLocalPath);
    }
    if (!nullToAbsent || rbInsyncHash != null) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash);
    }
    if (!nullToAbsent || rbInsyncLocalUsn != null) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn);
    }
    if (!nullToAbsent || rbFileHashDirty != null) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty);
    }
    if (!nullToAbsent || rbFileSizeDirty != null) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  SettingFileCompanion toCompanion(bool nullToAbsent) {
    return SettingFileCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      path: path == null && nullToAbsent ? const Value.absent() : Value(path),
      hash: hash == null && nullToAbsent ? const Value.absent() : Value(hash),
      size: size == null && nullToAbsent ? const Value.absent() : Value(size),
      rbLocalPath: rbLocalPath == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalPath),
      rbInsyncHash: rbInsyncHash == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncHash),
      rbInsyncLocalUsn: rbInsyncLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbInsyncLocalUsn),
      rbFileHashDirty: rbFileHashDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileHashDirty),
      rbFileSizeDirty: rbFileSizeDirty == null && nullToAbsent
          ? const Value.absent()
          : Value(rbFileSizeDirty),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory SettingFileData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return SettingFileData(
      id: serializer.fromJson<String?>(json['ID']),
      path: serializer.fromJson<String?>(json['Path']),
      hash: serializer.fromJson<String?>(json['Hash']),
      size: serializer.fromJson<int?>(json['Size']),
      rbLocalPath: serializer.fromJson<String?>(json['rb_local_path']),
      rbInsyncHash: serializer.fromJson<String?>(json['rb_insync_hash']),
      rbInsyncLocalUsn: serializer.fromJson<int?>(json['rb_insync_local_usn']),
      rbFileHashDirty: serializer.fromJson<int?>(json['rb_file_hash_dirty']),
      rbFileSizeDirty: serializer.fromJson<int?>(json['rb_file_size_dirty']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'Path': serializer.toJson<String?>(path),
      'Hash': serializer.toJson<String?>(hash),
      'Size': serializer.toJson<int?>(size),
      'rb_local_path': serializer.toJson<String?>(rbLocalPath),
      'rb_insync_hash': serializer.toJson<String?>(rbInsyncHash),
      'rb_insync_local_usn': serializer.toJson<int?>(rbInsyncLocalUsn),
      'rb_file_hash_dirty': serializer.toJson<int?>(rbFileHashDirty),
      'rb_file_size_dirty': serializer.toJson<int?>(rbFileSizeDirty),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  SettingFileData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> path = const Value.absent(),
    Value<String?> hash = const Value.absent(),
    Value<int?> size = const Value.absent(),
    Value<String?> rbLocalPath = const Value.absent(),
    Value<String?> rbInsyncHash = const Value.absent(),
    Value<int?> rbInsyncLocalUsn = const Value.absent(),
    Value<int?> rbFileHashDirty = const Value.absent(),
    Value<int?> rbFileSizeDirty = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => SettingFileData(
    id: id.present ? id.value : this.id,
    path: path.present ? path.value : this.path,
    hash: hash.present ? hash.value : this.hash,
    size: size.present ? size.value : this.size,
    rbLocalPath: rbLocalPath.present ? rbLocalPath.value : this.rbLocalPath,
    rbInsyncHash: rbInsyncHash.present ? rbInsyncHash.value : this.rbInsyncHash,
    rbInsyncLocalUsn: rbInsyncLocalUsn.present
        ? rbInsyncLocalUsn.value
        : this.rbInsyncLocalUsn,
    rbFileHashDirty: rbFileHashDirty.present
        ? rbFileHashDirty.value
        : this.rbFileHashDirty,
    rbFileSizeDirty: rbFileSizeDirty.present
        ? rbFileSizeDirty.value
        : this.rbFileSizeDirty,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  SettingFileData copyWithCompanion(SettingFileCompanion data) {
    return SettingFileData(
      id: data.id.present ? data.id.value : this.id,
      path: data.path.present ? data.path.value : this.path,
      hash: data.hash.present ? data.hash.value : this.hash,
      size: data.size.present ? data.size.value : this.size,
      rbLocalPath: data.rbLocalPath.present
          ? data.rbLocalPath.value
          : this.rbLocalPath,
      rbInsyncHash: data.rbInsyncHash.present
          ? data.rbInsyncHash.value
          : this.rbInsyncHash,
      rbInsyncLocalUsn: data.rbInsyncLocalUsn.present
          ? data.rbInsyncLocalUsn.value
          : this.rbInsyncLocalUsn,
      rbFileHashDirty: data.rbFileHashDirty.present
          ? data.rbFileHashDirty.value
          : this.rbFileHashDirty,
      rbFileSizeDirty: data.rbFileSizeDirty.present
          ? data.rbFileSizeDirty.value
          : this.rbFileSizeDirty,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('SettingFileData(')
          ..write('id: $id, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    path,
    hash,
    size,
    rbLocalPath,
    rbInsyncHash,
    rbInsyncLocalUsn,
    rbFileHashDirty,
    rbFileSizeDirty,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SettingFileData &&
          other.id == this.id &&
          other.path == this.path &&
          other.hash == this.hash &&
          other.size == this.size &&
          other.rbLocalPath == this.rbLocalPath &&
          other.rbInsyncHash == this.rbInsyncHash &&
          other.rbInsyncLocalUsn == this.rbInsyncLocalUsn &&
          other.rbFileHashDirty == this.rbFileHashDirty &&
          other.rbFileSizeDirty == this.rbFileSizeDirty &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class SettingFileCompanion extends UpdateCompanion<SettingFileData> {
  final Value<String?> id;
  final Value<String?> path;
  final Value<String?> hash;
  final Value<int?> size;
  final Value<String?> rbLocalPath;
  final Value<String?> rbInsyncHash;
  final Value<int?> rbInsyncLocalUsn;
  final Value<int?> rbFileHashDirty;
  final Value<int?> rbFileSizeDirty;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const SettingFileCompanion({
    this.id = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  SettingFileCompanion.insert({
    this.id = const Value.absent(),
    this.path = const Value.absent(),
    this.hash = const Value.absent(),
    this.size = const Value.absent(),
    this.rbLocalPath = const Value.absent(),
    this.rbInsyncHash = const Value.absent(),
    this.rbInsyncLocalUsn = const Value.absent(),
    this.rbFileHashDirty = const Value.absent(),
    this.rbFileSizeDirty = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<SettingFileData> custom({
    Expression<String>? id,
    Expression<String>? path,
    Expression<String>? hash,
    Expression<int>? size,
    Expression<String>? rbLocalPath,
    Expression<String>? rbInsyncHash,
    Expression<int>? rbInsyncLocalUsn,
    Expression<int>? rbFileHashDirty,
    Expression<int>? rbFileSizeDirty,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (path != null) 'Path': path,
      if (hash != null) 'Hash': hash,
      if (size != null) 'Size': size,
      if (rbLocalPath != null) 'rb_local_path': rbLocalPath,
      if (rbInsyncHash != null) 'rb_insync_hash': rbInsyncHash,
      if (rbInsyncLocalUsn != null) 'rb_insync_local_usn': rbInsyncLocalUsn,
      if (rbFileHashDirty != null) 'rb_file_hash_dirty': rbFileHashDirty,
      if (rbFileSizeDirty != null) 'rb_file_size_dirty': rbFileSizeDirty,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  SettingFileCompanion copyWith({
    Value<String?>? id,
    Value<String?>? path,
    Value<String?>? hash,
    Value<int?>? size,
    Value<String?>? rbLocalPath,
    Value<String?>? rbInsyncHash,
    Value<int?>? rbInsyncLocalUsn,
    Value<int?>? rbFileHashDirty,
    Value<int?>? rbFileSizeDirty,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return SettingFileCompanion(
      id: id ?? this.id,
      path: path ?? this.path,
      hash: hash ?? this.hash,
      size: size ?? this.size,
      rbLocalPath: rbLocalPath ?? this.rbLocalPath,
      rbInsyncHash: rbInsyncHash ?? this.rbInsyncHash,
      rbInsyncLocalUsn: rbInsyncLocalUsn ?? this.rbInsyncLocalUsn,
      rbFileHashDirty: rbFileHashDirty ?? this.rbFileHashDirty,
      rbFileSizeDirty: rbFileSizeDirty ?? this.rbFileSizeDirty,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (path.present) {
      map['Path'] = Variable<String>(path.value);
    }
    if (hash.present) {
      map['Hash'] = Variable<String>(hash.value);
    }
    if (size.present) {
      map['Size'] = Variable<int>(size.value);
    }
    if (rbLocalPath.present) {
      map['rb_local_path'] = Variable<String>(rbLocalPath.value);
    }
    if (rbInsyncHash.present) {
      map['rb_insync_hash'] = Variable<String>(rbInsyncHash.value);
    }
    if (rbInsyncLocalUsn.present) {
      map['rb_insync_local_usn'] = Variable<int>(rbInsyncLocalUsn.value);
    }
    if (rbFileHashDirty.present) {
      map['rb_file_hash_dirty'] = Variable<int>(rbFileHashDirty.value);
    }
    if (rbFileSizeDirty.present) {
      map['rb_file_size_dirty'] = Variable<int>(rbFileSizeDirty.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SettingFileCompanion(')
          ..write('id: $id, ')
          ..write('path: $path, ')
          ..write('hash: $hash, ')
          ..write('size: $size, ')
          ..write('rbLocalPath: $rbLocalPath, ')
          ..write('rbInsyncHash: $rbInsyncHash, ')
          ..write('rbInsyncLocalUsn: $rbInsyncLocalUsn, ')
          ..write('rbFileHashDirty: $rbFileHashDirty, ')
          ..write('rbFileSizeDirty: $rbFileSizeDirty, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class SqliteSequence extends Table
    with TableInfo<SqliteSequence, SqliteSequenceData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  SqliteSequence(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _nameMeta = const VerificationMeta('name');
  late final GeneratedColumn<Uint8List> name = GeneratedColumn<Uint8List>(
    'name',
    aliasedName,
    true,
    type: DriftSqlType.blob,
    requiredDuringInsert: false,
    $customConstraints: '',
  );
  static const VerificationMeta _seqMeta = const VerificationMeta('seq');
  late final GeneratedColumn<Uint8List> seq = GeneratedColumn<Uint8List>(
    'seq',
    aliasedName,
    true,
    type: DriftSqlType.blob,
    requiredDuringInsert: false,
    $customConstraints: '',
  );
  @override
  List<GeneratedColumn> get $columns => [name, seq];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'sqlite_sequence';
  @override
  VerificationContext validateIntegrity(
    Insertable<SqliteSequenceData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('name')) {
      context.handle(
        _nameMeta,
        name.isAcceptableOrUnknown(data['name']!, _nameMeta),
      );
    }
    if (data.containsKey('seq')) {
      context.handle(
        _seqMeta,
        seq.isAcceptableOrUnknown(data['seq']!, _seqMeta),
      );
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => const {};
  @override
  SqliteSequenceData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return SqliteSequenceData(
      name: attachedDatabase.typeMapping.read(
        DriftSqlType.blob,
        data['${effectivePrefix}name'],
      ),
      seq: attachedDatabase.typeMapping.read(
        DriftSqlType.blob,
        data['${effectivePrefix}seq'],
      ),
    );
  }

  @override
  SqliteSequence createAlias(String alias) {
    return SqliteSequence(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class SqliteSequenceData extends DataClass
    implements Insertable<SqliteSequenceData> {
  final Uint8List? name;
  final Uint8List? seq;
  const SqliteSequenceData({this.name, this.seq});
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || name != null) {
      map['name'] = Variable<Uint8List>(name);
    }
    if (!nullToAbsent || seq != null) {
      map['seq'] = Variable<Uint8List>(seq);
    }
    return map;
  }

  SqliteSequenceCompanion toCompanion(bool nullToAbsent) {
    return SqliteSequenceCompanion(
      name: name == null && nullToAbsent ? const Value.absent() : Value(name),
      seq: seq == null && nullToAbsent ? const Value.absent() : Value(seq),
    );
  }

  factory SqliteSequenceData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return SqliteSequenceData(
      name: serializer.fromJson<Uint8List?>(json['name']),
      seq: serializer.fromJson<Uint8List?>(json['seq']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'name': serializer.toJson<Uint8List?>(name),
      'seq': serializer.toJson<Uint8List?>(seq),
    };
  }

  SqliteSequenceData copyWith({
    Value<Uint8List?> name = const Value.absent(),
    Value<Uint8List?> seq = const Value.absent(),
  }) => SqliteSequenceData(
    name: name.present ? name.value : this.name,
    seq: seq.present ? seq.value : this.seq,
  );
  SqliteSequenceData copyWithCompanion(SqliteSequenceCompanion data) {
    return SqliteSequenceData(
      name: data.name.present ? data.name.value : this.name,
      seq: data.seq.present ? data.seq.value : this.seq,
    );
  }

  @override
  String toString() {
    return (StringBuffer('SqliteSequenceData(')
          ..write('name: $name, ')
          ..write('seq: $seq')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash($driftBlobEquality.hash(name), $driftBlobEquality.hash(seq));
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is SqliteSequenceData &&
          $driftBlobEquality.equals(other.name, this.name) &&
          $driftBlobEquality.equals(other.seq, this.seq));
}

class SqliteSequenceCompanion extends UpdateCompanion<SqliteSequenceData> {
  final Value<Uint8List?> name;
  final Value<Uint8List?> seq;
  final Value<int> rowid;
  const SqliteSequenceCompanion({
    this.name = const Value.absent(),
    this.seq = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  SqliteSequenceCompanion.insert({
    this.name = const Value.absent(),
    this.seq = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  static Insertable<SqliteSequenceData> custom({
    Expression<Uint8List>? name,
    Expression<Uint8List>? seq,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (name != null) 'name': name,
      if (seq != null) 'seq': seq,
      if (rowid != null) 'rowid': rowid,
    });
  }

  SqliteSequenceCompanion copyWith({
    Value<Uint8List?>? name,
    Value<Uint8List?>? seq,
    Value<int>? rowid,
  }) {
    return SqliteSequenceCompanion(
      name: name ?? this.name,
      seq: seq ?? this.seq,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (name.present) {
      map['name'] = Variable<Uint8List>(name.value);
    }
    if (seq.present) {
      map['seq'] = Variable<Uint8List>(seq.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('SqliteSequenceCompanion(')
          ..write('name: $name, ')
          ..write('seq: $seq, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

class UuidIDMap extends Table with TableInfo<UuidIDMap, UuidIDMapData> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  UuidIDMap(this.attachedDatabase, [this._alias]);
  static const VerificationMeta _idMeta = const VerificationMeta('id');
  late final GeneratedColumn<String> id = GeneratedColumn<String>(
    'ID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'PRIMARY KEY',
  );
  static const VerificationMeta _entityTableNameMeta = const VerificationMeta(
    'entityTableName',
  );
  late final GeneratedColumn<String> entityTableName = GeneratedColumn<String>(
    'EntityTableName',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _targetUUIDMeta = const VerificationMeta(
    'targetUUID',
  );
  late final GeneratedColumn<String> targetUUID = GeneratedColumn<String>(
    'TargetUUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _currentIDMeta = const VerificationMeta(
    'currentID',
  );
  late final GeneratedColumn<String> currentID = GeneratedColumn<String>(
    'CurrentID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _uuidMeta = const VerificationMeta('uuid');
  late final GeneratedColumn<String> uuid = GeneratedColumn<String>(
    'UUID',
    aliasedName,
    true,
    type: DriftSqlType.string,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbDataStatusMeta = const VerificationMeta(
    'rbDataStatus',
  );
  late final GeneratedColumn<int> rbDataStatus = GeneratedColumn<int>(
    'rb_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDataStatusMeta = const VerificationMeta(
    'rbLocalDataStatus',
  );
  late final GeneratedColumn<int> rbLocalDataStatus = GeneratedColumn<int>(
    'rb_local_data_status',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalDeletedMeta = const VerificationMeta(
    'rbLocalDeleted',
  );
  late final GeneratedColumn<int> rbLocalDeleted = GeneratedColumn<int>(
    'rb_local_deleted',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _rbLocalSyncedMeta = const VerificationMeta(
    'rbLocalSynced',
  );
  late final GeneratedColumn<int> rbLocalSynced = GeneratedColumn<int>(
    'rb_local_synced',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT 0',
    defaultValue: const CustomExpression('0'),
  );
  static const VerificationMeta _usnMeta = const VerificationMeta('usn');
  late final GeneratedColumn<int> usn = GeneratedColumn<int>(
    'usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _rbLocalUsnMeta = const VerificationMeta(
    'rbLocalUsn',
  );
  late final GeneratedColumn<int> rbLocalUsn = GeneratedColumn<int>(
    'rb_local_usn',
    aliasedName,
    true,
    type: DriftSqlType.int,
    requiredDuringInsert: false,
    $customConstraints: 'DEFAULT NULL',
    defaultValue: const CustomExpression('NULL'),
  );
  static const VerificationMeta _createdAtMeta = const VerificationMeta(
    'createdAt',
  );
  late final GeneratedColumn<String> createdAt = GeneratedColumn<String>(
    'created_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  static const VerificationMeta _updatedAtMeta = const VerificationMeta(
    'updatedAt',
  );
  late final GeneratedColumn<String> updatedAt = GeneratedColumn<String>(
    'updated_at',
    aliasedName,
    false,
    type: DriftSqlType.string,
    requiredDuringInsert: true,
    $customConstraints: 'NOT NULL',
  );
  @override
  List<GeneratedColumn> get $columns => [
    id,
    entityTableName,
    targetUUID,
    currentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  ];
  @override
  String get aliasedName => _alias ?? actualTableName;
  @override
  String get actualTableName => $name;
  static const String $name = 'uuidIDMap';
  @override
  VerificationContext validateIntegrity(
    Insertable<UuidIDMapData> instance, {
    bool isInserting = false,
  }) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('EntityTableName')) {
      context.handle(
        _entityTableNameMeta,
        entityTableName.isAcceptableOrUnknown(
          data['EntityTableName']!,
          _entityTableNameMeta,
        ),
      );
    }
    if (data.containsKey('TargetUUID')) {
      context.handle(
        _targetUUIDMeta,
        targetUUID.isAcceptableOrUnknown(data['TargetUUID']!, _targetUUIDMeta),
      );
    }
    if (data.containsKey('CurrentID')) {
      context.handle(
        _currentIDMeta,
        currentID.isAcceptableOrUnknown(data['CurrentID']!, _currentIDMeta),
      );
    }
    if (data.containsKey('UUID')) {
      context.handle(
        _uuidMeta,
        uuid.isAcceptableOrUnknown(data['UUID']!, _uuidMeta),
      );
    }
    if (data.containsKey('rb_data_status')) {
      context.handle(
        _rbDataStatusMeta,
        rbDataStatus.isAcceptableOrUnknown(
          data['rb_data_status']!,
          _rbDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_data_status')) {
      context.handle(
        _rbLocalDataStatusMeta,
        rbLocalDataStatus.isAcceptableOrUnknown(
          data['rb_local_data_status']!,
          _rbLocalDataStatusMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_deleted')) {
      context.handle(
        _rbLocalDeletedMeta,
        rbLocalDeleted.isAcceptableOrUnknown(
          data['rb_local_deleted']!,
          _rbLocalDeletedMeta,
        ),
      );
    }
    if (data.containsKey('rb_local_synced')) {
      context.handle(
        _rbLocalSyncedMeta,
        rbLocalSynced.isAcceptableOrUnknown(
          data['rb_local_synced']!,
          _rbLocalSyncedMeta,
        ),
      );
    }
    if (data.containsKey('usn')) {
      context.handle(
        _usnMeta,
        usn.isAcceptableOrUnknown(data['usn']!, _usnMeta),
      );
    }
    if (data.containsKey('rb_local_usn')) {
      context.handle(
        _rbLocalUsnMeta,
        rbLocalUsn.isAcceptableOrUnknown(
          data['rb_local_usn']!,
          _rbLocalUsnMeta,
        ),
      );
    }
    if (data.containsKey('created_at')) {
      context.handle(
        _createdAtMeta,
        createdAt.isAcceptableOrUnknown(data['created_at']!, _createdAtMeta),
      );
    } else if (isInserting) {
      context.missing(_createdAtMeta);
    }
    if (data.containsKey('updated_at')) {
      context.handle(
        _updatedAtMeta,
        updatedAt.isAcceptableOrUnknown(data['updated_at']!, _updatedAtMeta),
      );
    } else if (isInserting) {
      context.missing(_updatedAtMeta);
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  UuidIDMapData map(Map<String, dynamic> data, {String? tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : '';
    return UuidIDMapData(
      id: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}ID'],
      ),
      entityTableName: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}EntityTableName'],
      ),
      targetUUID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}TargetUUID'],
      ),
      currentID: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}CurrentID'],
      ),
      uuid: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}UUID'],
      ),
      rbDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_data_status'],
      ),
      rbLocalDataStatus: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_data_status'],
      ),
      rbLocalDeleted: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_deleted'],
      ),
      rbLocalSynced: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_synced'],
      ),
      usn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}usn'],
      ),
      rbLocalUsn: attachedDatabase.typeMapping.read(
        DriftSqlType.int,
        data['${effectivePrefix}rb_local_usn'],
      ),
      createdAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}created_at'],
      )!,
      updatedAt: attachedDatabase.typeMapping.read(
        DriftSqlType.string,
        data['${effectivePrefix}updated_at'],
      )!,
    );
  }

  @override
  UuidIDMap createAlias(String alias) {
    return UuidIDMap(attachedDatabase, alias);
  }

  @override
  bool get dontWriteConstraints => true;
}

class UuidIDMapData extends DataClass implements Insertable<UuidIDMapData> {
  final String? id;
  final String? entityTableName;
  final String? targetUUID;
  final String? currentID;
  final String? uuid;
  final int? rbDataStatus;
  final int? rbLocalDataStatus;
  final int? rbLocalDeleted;
  final int? rbLocalSynced;
  final int? usn;
  final int? rbLocalUsn;
  final String createdAt;
  final String updatedAt;
  const UuidIDMapData({
    this.id,
    this.entityTableName,
    this.targetUUID,
    this.currentID,
    this.uuid,
    this.rbDataStatus,
    this.rbLocalDataStatus,
    this.rbLocalDeleted,
    this.rbLocalSynced,
    this.usn,
    this.rbLocalUsn,
    required this.createdAt,
    required this.updatedAt,
  });
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<String>(id);
    }
    if (!nullToAbsent || entityTableName != null) {
      map['EntityTableName'] = Variable<String>(entityTableName);
    }
    if (!nullToAbsent || targetUUID != null) {
      map['TargetUUID'] = Variable<String>(targetUUID);
    }
    if (!nullToAbsent || currentID != null) {
      map['CurrentID'] = Variable<String>(currentID);
    }
    if (!nullToAbsent || uuid != null) {
      map['UUID'] = Variable<String>(uuid);
    }
    if (!nullToAbsent || rbDataStatus != null) {
      map['rb_data_status'] = Variable<int>(rbDataStatus);
    }
    if (!nullToAbsent || rbLocalDataStatus != null) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus);
    }
    if (!nullToAbsent || rbLocalDeleted != null) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted);
    }
    if (!nullToAbsent || rbLocalSynced != null) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced);
    }
    if (!nullToAbsent || usn != null) {
      map['usn'] = Variable<int>(usn);
    }
    if (!nullToAbsent || rbLocalUsn != null) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn);
    }
    map['created_at'] = Variable<String>(createdAt);
    map['updated_at'] = Variable<String>(updatedAt);
    return map;
  }

  UuidIDMapCompanion toCompanion(bool nullToAbsent) {
    return UuidIDMapCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      entityTableName: entityTableName == null && nullToAbsent
          ? const Value.absent()
          : Value(entityTableName),
      targetUUID: targetUUID == null && nullToAbsent
          ? const Value.absent()
          : Value(targetUUID),
      currentID: currentID == null && nullToAbsent
          ? const Value.absent()
          : Value(currentID),
      uuid: uuid == null && nullToAbsent ? const Value.absent() : Value(uuid),
      rbDataStatus: rbDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbDataStatus),
      rbLocalDataStatus: rbLocalDataStatus == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDataStatus),
      rbLocalDeleted: rbLocalDeleted == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalDeleted),
      rbLocalSynced: rbLocalSynced == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalSynced),
      usn: usn == null && nullToAbsent ? const Value.absent() : Value(usn),
      rbLocalUsn: rbLocalUsn == null && nullToAbsent
          ? const Value.absent()
          : Value(rbLocalUsn),
      createdAt: Value(createdAt),
      updatedAt: Value(updatedAt),
    );
  }

  factory UuidIDMapData.fromJson(
    Map<String, dynamic> json, {
    ValueSerializer? serializer,
  }) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return UuidIDMapData(
      id: serializer.fromJson<String?>(json['ID']),
      entityTableName: serializer.fromJson<String?>(json['EntityTableName']),
      targetUUID: serializer.fromJson<String?>(json['TargetUUID']),
      currentID: serializer.fromJson<String?>(json['CurrentID']),
      uuid: serializer.fromJson<String?>(json['UUID']),
      rbDataStatus: serializer.fromJson<int?>(json['rb_data_status']),
      rbLocalDataStatus: serializer.fromJson<int?>(
        json['rb_local_data_status'],
      ),
      rbLocalDeleted: serializer.fromJson<int?>(json['rb_local_deleted']),
      rbLocalSynced: serializer.fromJson<int?>(json['rb_local_synced']),
      usn: serializer.fromJson<int?>(json['usn']),
      rbLocalUsn: serializer.fromJson<int?>(json['rb_local_usn']),
      createdAt: serializer.fromJson<String>(json['created_at']),
      updatedAt: serializer.fromJson<String>(json['updated_at']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'ID': serializer.toJson<String?>(id),
      'EntityTableName': serializer.toJson<String?>(entityTableName),
      'TargetUUID': serializer.toJson<String?>(targetUUID),
      'CurrentID': serializer.toJson<String?>(currentID),
      'UUID': serializer.toJson<String?>(uuid),
      'rb_data_status': serializer.toJson<int?>(rbDataStatus),
      'rb_local_data_status': serializer.toJson<int?>(rbLocalDataStatus),
      'rb_local_deleted': serializer.toJson<int?>(rbLocalDeleted),
      'rb_local_synced': serializer.toJson<int?>(rbLocalSynced),
      'usn': serializer.toJson<int?>(usn),
      'rb_local_usn': serializer.toJson<int?>(rbLocalUsn),
      'created_at': serializer.toJson<String>(createdAt),
      'updated_at': serializer.toJson<String>(updatedAt),
    };
  }

  UuidIDMapData copyWith({
    Value<String?> id = const Value.absent(),
    Value<String?> entityTableName = const Value.absent(),
    Value<String?> targetUUID = const Value.absent(),
    Value<String?> currentID = const Value.absent(),
    Value<String?> uuid = const Value.absent(),
    Value<int?> rbDataStatus = const Value.absent(),
    Value<int?> rbLocalDataStatus = const Value.absent(),
    Value<int?> rbLocalDeleted = const Value.absent(),
    Value<int?> rbLocalSynced = const Value.absent(),
    Value<int?> usn = const Value.absent(),
    Value<int?> rbLocalUsn = const Value.absent(),
    String? createdAt,
    String? updatedAt,
  }) => UuidIDMapData(
    id: id.present ? id.value : this.id,
    entityTableName: entityTableName.present
        ? entityTableName.value
        : this.entityTableName,
    targetUUID: targetUUID.present ? targetUUID.value : this.targetUUID,
    currentID: currentID.present ? currentID.value : this.currentID,
    uuid: uuid.present ? uuid.value : this.uuid,
    rbDataStatus: rbDataStatus.present ? rbDataStatus.value : this.rbDataStatus,
    rbLocalDataStatus: rbLocalDataStatus.present
        ? rbLocalDataStatus.value
        : this.rbLocalDataStatus,
    rbLocalDeleted: rbLocalDeleted.present
        ? rbLocalDeleted.value
        : this.rbLocalDeleted,
    rbLocalSynced: rbLocalSynced.present
        ? rbLocalSynced.value
        : this.rbLocalSynced,
    usn: usn.present ? usn.value : this.usn,
    rbLocalUsn: rbLocalUsn.present ? rbLocalUsn.value : this.rbLocalUsn,
    createdAt: createdAt ?? this.createdAt,
    updatedAt: updatedAt ?? this.updatedAt,
  );
  UuidIDMapData copyWithCompanion(UuidIDMapCompanion data) {
    return UuidIDMapData(
      id: data.id.present ? data.id.value : this.id,
      entityTableName: data.entityTableName.present
          ? data.entityTableName.value
          : this.entityTableName,
      targetUUID: data.targetUUID.present
          ? data.targetUUID.value
          : this.targetUUID,
      currentID: data.currentID.present ? data.currentID.value : this.currentID,
      uuid: data.uuid.present ? data.uuid.value : this.uuid,
      rbDataStatus: data.rbDataStatus.present
          ? data.rbDataStatus.value
          : this.rbDataStatus,
      rbLocalDataStatus: data.rbLocalDataStatus.present
          ? data.rbLocalDataStatus.value
          : this.rbLocalDataStatus,
      rbLocalDeleted: data.rbLocalDeleted.present
          ? data.rbLocalDeleted.value
          : this.rbLocalDeleted,
      rbLocalSynced: data.rbLocalSynced.present
          ? data.rbLocalSynced.value
          : this.rbLocalSynced,
      usn: data.usn.present ? data.usn.value : this.usn,
      rbLocalUsn: data.rbLocalUsn.present
          ? data.rbLocalUsn.value
          : this.rbLocalUsn,
      createdAt: data.createdAt.present ? data.createdAt.value : this.createdAt,
      updatedAt: data.updatedAt.present ? data.updatedAt.value : this.updatedAt,
    );
  }

  @override
  String toString() {
    return (StringBuffer('UuidIDMapData(')
          ..write('id: $id, ')
          ..write('entityTableName: $entityTableName, ')
          ..write('targetUUID: $targetUUID, ')
          ..write('currentID: $currentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
    id,
    entityTableName,
    targetUUID,
    currentID,
    uuid,
    rbDataStatus,
    rbLocalDataStatus,
    rbLocalDeleted,
    rbLocalSynced,
    usn,
    rbLocalUsn,
    createdAt,
    updatedAt,
  );
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is UuidIDMapData &&
          other.id == this.id &&
          other.entityTableName == this.entityTableName &&
          other.targetUUID == this.targetUUID &&
          other.currentID == this.currentID &&
          other.uuid == this.uuid &&
          other.rbDataStatus == this.rbDataStatus &&
          other.rbLocalDataStatus == this.rbLocalDataStatus &&
          other.rbLocalDeleted == this.rbLocalDeleted &&
          other.rbLocalSynced == this.rbLocalSynced &&
          other.usn == this.usn &&
          other.rbLocalUsn == this.rbLocalUsn &&
          other.createdAt == this.createdAt &&
          other.updatedAt == this.updatedAt);
}

class UuidIDMapCompanion extends UpdateCompanion<UuidIDMapData> {
  final Value<String?> id;
  final Value<String?> entityTableName;
  final Value<String?> targetUUID;
  final Value<String?> currentID;
  final Value<String?> uuid;
  final Value<int?> rbDataStatus;
  final Value<int?> rbLocalDataStatus;
  final Value<int?> rbLocalDeleted;
  final Value<int?> rbLocalSynced;
  final Value<int?> usn;
  final Value<int?> rbLocalUsn;
  final Value<String> createdAt;
  final Value<String> updatedAt;
  final Value<int> rowid;
  const UuidIDMapCompanion({
    this.id = const Value.absent(),
    this.entityTableName = const Value.absent(),
    this.targetUUID = const Value.absent(),
    this.currentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    this.createdAt = const Value.absent(),
    this.updatedAt = const Value.absent(),
    this.rowid = const Value.absent(),
  });
  UuidIDMapCompanion.insert({
    this.id = const Value.absent(),
    this.entityTableName = const Value.absent(),
    this.targetUUID = const Value.absent(),
    this.currentID = const Value.absent(),
    this.uuid = const Value.absent(),
    this.rbDataStatus = const Value.absent(),
    this.rbLocalDataStatus = const Value.absent(),
    this.rbLocalDeleted = const Value.absent(),
    this.rbLocalSynced = const Value.absent(),
    this.usn = const Value.absent(),
    this.rbLocalUsn = const Value.absent(),
    required String createdAt,
    required String updatedAt,
    this.rowid = const Value.absent(),
  }) : createdAt = Value(createdAt),
       updatedAt = Value(updatedAt);
  static Insertable<UuidIDMapData> custom({
    Expression<String>? id,
    Expression<String>? entityTableName,
    Expression<String>? targetUUID,
    Expression<String>? currentID,
    Expression<String>? uuid,
    Expression<int>? rbDataStatus,
    Expression<int>? rbLocalDataStatus,
    Expression<int>? rbLocalDeleted,
    Expression<int>? rbLocalSynced,
    Expression<int>? usn,
    Expression<int>? rbLocalUsn,
    Expression<String>? createdAt,
    Expression<String>? updatedAt,
    Expression<int>? rowid,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (entityTableName != null) 'EntityTableName': entityTableName,
      if (targetUUID != null) 'TargetUUID': targetUUID,
      if (currentID != null) 'CurrentID': currentID,
      if (uuid != null) 'UUID': uuid,
      if (rbDataStatus != null) 'rb_data_status': rbDataStatus,
      if (rbLocalDataStatus != null) 'rb_local_data_status': rbLocalDataStatus,
      if (rbLocalDeleted != null) 'rb_local_deleted': rbLocalDeleted,
      if (rbLocalSynced != null) 'rb_local_synced': rbLocalSynced,
      if (usn != null) 'usn': usn,
      if (rbLocalUsn != null) 'rb_local_usn': rbLocalUsn,
      if (createdAt != null) 'created_at': createdAt,
      if (updatedAt != null) 'updated_at': updatedAt,
      if (rowid != null) 'rowid': rowid,
    });
  }

  UuidIDMapCompanion copyWith({
    Value<String?>? id,
    Value<String?>? entityTableName,
    Value<String?>? targetUUID,
    Value<String?>? currentID,
    Value<String?>? uuid,
    Value<int?>? rbDataStatus,
    Value<int?>? rbLocalDataStatus,
    Value<int?>? rbLocalDeleted,
    Value<int?>? rbLocalSynced,
    Value<int?>? usn,
    Value<int?>? rbLocalUsn,
    Value<String>? createdAt,
    Value<String>? updatedAt,
    Value<int>? rowid,
  }) {
    return UuidIDMapCompanion(
      id: id ?? this.id,
      entityTableName: entityTableName ?? this.entityTableName,
      targetUUID: targetUUID ?? this.targetUUID,
      currentID: currentID ?? this.currentID,
      uuid: uuid ?? this.uuid,
      rbDataStatus: rbDataStatus ?? this.rbDataStatus,
      rbLocalDataStatus: rbLocalDataStatus ?? this.rbLocalDataStatus,
      rbLocalDeleted: rbLocalDeleted ?? this.rbLocalDeleted,
      rbLocalSynced: rbLocalSynced ?? this.rbLocalSynced,
      usn: usn ?? this.usn,
      rbLocalUsn: rbLocalUsn ?? this.rbLocalUsn,
      createdAt: createdAt ?? this.createdAt,
      updatedAt: updatedAt ?? this.updatedAt,
      rowid: rowid ?? this.rowid,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<String>(id.value);
    }
    if (entityTableName.present) {
      map['EntityTableName'] = Variable<String>(entityTableName.value);
    }
    if (targetUUID.present) {
      map['TargetUUID'] = Variable<String>(targetUUID.value);
    }
    if (currentID.present) {
      map['CurrentID'] = Variable<String>(currentID.value);
    }
    if (uuid.present) {
      map['UUID'] = Variable<String>(uuid.value);
    }
    if (rbDataStatus.present) {
      map['rb_data_status'] = Variable<int>(rbDataStatus.value);
    }
    if (rbLocalDataStatus.present) {
      map['rb_local_data_status'] = Variable<int>(rbLocalDataStatus.value);
    }
    if (rbLocalDeleted.present) {
      map['rb_local_deleted'] = Variable<int>(rbLocalDeleted.value);
    }
    if (rbLocalSynced.present) {
      map['rb_local_synced'] = Variable<int>(rbLocalSynced.value);
    }
    if (usn.present) {
      map['usn'] = Variable<int>(usn.value);
    }
    if (rbLocalUsn.present) {
      map['rb_local_usn'] = Variable<int>(rbLocalUsn.value);
    }
    if (createdAt.present) {
      map['created_at'] = Variable<String>(createdAt.value);
    }
    if (updatedAt.present) {
      map['updated_at'] = Variable<String>(updatedAt.value);
    }
    if (rowid.present) {
      map['rowid'] = Variable<int>(rowid.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('UuidIDMapCompanion(')
          ..write('id: $id, ')
          ..write('entityTableName: $entityTableName, ')
          ..write('targetUUID: $targetUUID, ')
          ..write('currentID: $currentID, ')
          ..write('uuid: $uuid, ')
          ..write('rbDataStatus: $rbDataStatus, ')
          ..write('rbLocalDataStatus: $rbLocalDataStatus, ')
          ..write('rbLocalDeleted: $rbLocalDeleted, ')
          ..write('rbLocalSynced: $rbLocalSynced, ')
          ..write('usn: $usn, ')
          ..write('rbLocalUsn: $rbLocalUsn, ')
          ..write('createdAt: $createdAt, ')
          ..write('updatedAt: $updatedAt, ')
          ..write('rowid: $rowid')
          ..write(')'))
        .toString();
  }
}

abstract class _$RekordboxDatabase extends GeneratedDatabase {
  _$RekordboxDatabase(QueryExecutor e) : super(e);
  $RekordboxDatabaseManager get managers => $RekordboxDatabaseManager(this);
  late final AgentNotification agentNotification = AgentNotification(this);
  late final AgentNotificationLog agentNotificationLog = AgentNotificationLog(
    this,
  );
  late final AgentRegistry agentRegistry = AgentRegistry(this);
  late final CloudAgentRegistry cloudAgentRegistry = CloudAgentRegistry(this);
  late final ContentActiveCensor contentActiveCensor = ContentActiveCensor(
    this,
  );
  late final ContentCue contentCue = ContentCue(this);
  late final ContentFile contentFile = ContentFile(this);
  late final DjmdActiveCensor djmdActiveCensor = DjmdActiveCensor(this);
  late final DjmdAlbum djmdAlbum = DjmdAlbum(this);
  late final DjmdArtist djmdArtist = DjmdArtist(this);
  late final DjmdCategory djmdCategory = DjmdCategory(this);
  late final DjmdCloudProperty djmdCloudProperty = DjmdCloudProperty(this);
  late final DjmdColor djmdColor = DjmdColor(this);
  late final DjmdContent djmdContent = DjmdContent(this);
  late final DjmdCue djmdCue = DjmdCue(this);
  late final DjmdDevice djmdDevice = DjmdDevice(this);
  late final DjmdGenre djmdGenre = DjmdGenre(this);
  late final DjmdHistory djmdHistory = DjmdHistory(this);
  late final DjmdHotCueBanklist djmdHotCueBanklist = DjmdHotCueBanklist(this);
  late final DjmdKey djmdKey = DjmdKey(this);
  late final DjmdLabel djmdLabel = DjmdLabel(this);
  late final DjmdMenuItems djmdMenuItems = DjmdMenuItems(this);
  late final DjmdMixerParam djmdMixerParam = DjmdMixerParam(this);
  late final DjmdMyTag djmdMyTag = DjmdMyTag(this);
  late final DjmdPlaylist djmdPlaylist = DjmdPlaylist(this);
  late final DjmdProperty djmdProperty = DjmdProperty(this);
  late final DjmdRecommendLike djmdRecommendLike = DjmdRecommendLike(this);
  late final DjmdRelatedTracks djmdRelatedTracks = DjmdRelatedTracks(this);
  late final DjmdSampler djmdSampler = DjmdSampler(this);
  late final DjmdSongHistory djmdSongHistory = DjmdSongHistory(this);
  late final DjmdSongHotCueBanklist djmdSongHotCueBanklist =
      DjmdSongHotCueBanklist(this);
  late final DjmdSongMyTag djmdSongMyTag = DjmdSongMyTag(this);
  late final DjmdSongPlaylist djmdSongPlaylist = DjmdSongPlaylist(this);
  late final DjmdSongRelatedTracks djmdSongRelatedTracks =
      DjmdSongRelatedTracks(this);
  late final DjmdSongSampler djmdSongSampler = DjmdSongSampler(this);
  late final DjmdSongTagList djmdSongTagList = DjmdSongTagList(this);
  late final DjmdSort djmdSort = DjmdSort(this);
  late final HotCueBanklistCue hotCueBanklistCue = HotCueBanklistCue(this);
  late final ImageFile imageFile = ImageFile(this);
  late final SettingFile settingFile = SettingFile(this);
  late final SqliteSequence sqliteSequence = SqliteSequence(this);
  late final UuidIDMap uuidIDMap = UuidIDMap(this);
  late final Index
  agentNotificationLogGigyaUidEventDateKindNotificationId = Index(
    'agent_notification_log_gigya_uid_event_date_kind_notification_id',
    'CREATE INDEX agent_notification_log_gigya_uid_event_date_kind_notification_id ON agentNotificationLog (gigya_uid, event_date, kind, notification_id)',
  );
  late final Index agentNotificationLogReportedTEXTEventDate = Index(
    'agent_notification_log_reported_TEXT_event_date',
    'CREATE INDEX agent_notification_log_reported_TEXT_event_date ON agentNotificationLog (reported_TEXT, event_date)',
  );
  late final Index agentNotificationStartTEXTEndTEXT = Index(
    'agent_notification_start_TEXT_end_TEXT',
    'CREATE INDEX agent_notification_start_TEXT_end_TEXT ON agentNotification (start_TEXT, end_TEXT)',
  );
  late final Index agentRegistryId1Id2 = Index(
    'agent_registry_id_1_id_2',
    'CREATE INDEX agent_registry_id_1_id_2 ON agentRegistry (id_1, id_2)',
  );
  late final Index cloudAgentRegistryUUID = Index(
    'cloud_agent_registry__u_u_i_d',
    'CREATE INDEX cloud_agent_registry__u_u_i_d ON cloudAgentRegistry (UUID)',
  );
  late final Index cloudAgentRegistryRbDataStatus = Index(
    'cloud_agent_registry_rb_data_status',
    'CREATE INDEX cloud_agent_registry_rb_data_status ON cloudAgentRegistry (rb_data_status)',
  );
  late final Index cloudAgentRegistryRbLocalDataStatus = Index(
    'cloud_agent_registry_rb_local_data_status',
    'CREATE INDEX cloud_agent_registry_rb_local_data_status ON cloudAgentRegistry (rb_local_data_status)',
  );
  late final Index cloudAgentRegistryRbLocalDeleted = Index(
    'cloud_agent_registry_rb_local_deleted',
    'CREATE INDEX cloud_agent_registry_rb_local_deleted ON cloudAgentRegistry (rb_local_deleted)',
  );
  late final Index cloudAgentRegistryRbLocalUsnID = Index(
    'cloud_agent_registry_rb_local_usn__i_d',
    'CREATE INDEX cloud_agent_registry_rb_local_usn__i_d ON cloudAgentRegistry (rb_local_usn, ID)',
  );
  late final Index contentActiveCensorContentID = Index(
    'content_active_censor__content_i_d',
    'CREATE INDEX content_active_censor__content_i_d ON contentActiveCensor (ContentID)',
  );
  late final Index contentActiveCensorUUID = Index(
    'content_active_censor__u_u_i_d',
    'CREATE INDEX content_active_censor__u_u_i_d ON contentActiveCensor (UUID)',
  );
  late final Index contentActiveCensorRbDataStatus = Index(
    'content_active_censor_rb_data_status',
    'CREATE INDEX content_active_censor_rb_data_status ON contentActiveCensor (rb_data_status)',
  );
  late final Index contentActiveCensorRbLocalDataStatus = Index(
    'content_active_censor_rb_local_data_status',
    'CREATE INDEX content_active_censor_rb_local_data_status ON contentActiveCensor (rb_local_data_status)',
  );
  late final Index contentActiveCensorRbLocalDeleted = Index(
    'content_active_censor_rb_local_deleted',
    'CREATE INDEX content_active_censor_rb_local_deleted ON contentActiveCensor (rb_local_deleted)',
  );
  late final Index contentActiveCensorRbLocalUsnID = Index(
    'content_active_censor_rb_local_usn__i_d',
    'CREATE INDEX content_active_censor_rb_local_usn__i_d ON contentActiveCensor (rb_local_usn, ID)',
  );
  late final Index contentCueContentID = Index(
    'content_cue__content_i_d',
    'CREATE INDEX content_cue__content_i_d ON contentCue (ContentID)',
  );
  late final Index contentCueUUID = Index(
    'content_cue__u_u_i_d',
    'CREATE INDEX content_cue__u_u_i_d ON contentCue (UUID)',
  );
  late final Index contentCueRbCueCount = Index(
    'content_cue_rb_cue_count',
    'CREATE INDEX content_cue_rb_cue_count ON contentCue (rb_cue_count)',
  );
  late final Index contentCueRbDataStatus = Index(
    'content_cue_rb_data_status',
    'CREATE INDEX content_cue_rb_data_status ON contentCue (rb_data_status)',
  );
  late final Index contentCueRbLocalDataStatus = Index(
    'content_cue_rb_local_data_status',
    'CREATE INDEX content_cue_rb_local_data_status ON contentCue (rb_local_data_status)',
  );
  late final Index contentCueRbLocalDeleted = Index(
    'content_cue_rb_local_deleted',
    'CREATE INDEX content_cue_rb_local_deleted ON contentCue (rb_local_deleted)',
  );
  late final Index contentCueRbLocalUsnID = Index(
    'content_cue_rb_local_usn__i_d',
    'CREATE INDEX content_cue_rb_local_usn__i_d ON contentCue (rb_local_usn, ID)',
  );
  late final Index contentFileContentID = Index(
    'content_file__content_i_d',
    'CREATE INDEX content_file__content_i_d ON contentFile (ContentID)',
  );
  late final Index contentFileUUID = Index(
    'content_file__u_u_i_d',
    'CREATE INDEX content_file__u_u_i_d ON contentFile (UUID)',
  );
  late final Index contentFileRbDataStatus = Index(
    'content_file_rb_data_status',
    'CREATE INDEX content_file_rb_data_status ON contentFile (rb_data_status)',
  );
  late final Index contentFileRbFileHashDirty = Index(
    'content_file_rb_file_hash_dirty',
    'CREATE INDEX content_file_rb_file_hash_dirty ON contentFile (rb_file_hash_dirty)',
  );
  late final Index contentFileRbFileSizeDirty = Index(
    'content_file_rb_file_size_dirty',
    'CREATE INDEX content_file_rb_file_size_dirty ON contentFile (rb_file_size_dirty)',
  );
  late final Index contentFileRbLocalDataStatus = Index(
    'content_file_rb_local_data_status',
    'CREATE INDEX content_file_rb_local_data_status ON contentFile (rb_local_data_status)',
  );
  late final Index contentFileRbLocalDeleted = Index(
    'content_file_rb_local_deleted',
    'CREATE INDEX content_file_rb_local_deleted ON contentFile (rb_local_deleted)',
  );
  late final Index
  contentFileRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority = Index(
    'content_file_rb_local_deleted_rb_in_progress_rb_local_file_status_rb_process_type_rb_priority',
    'CREATE INDEX content_file_rb_local_deleted_rb_in_progress_rb_local_file_status_rb_process_type_rb_priority ON contentFile (rb_local_deleted, rb_in_progress, rb_local_file_status, rb_process_type, rb_priority)',
  );
  late final Index contentFileRbLocalUsnID = Index(
    'content_file_rb_local_usn__i_d',
    'CREATE INDEX content_file_rb_local_usn__i_d ON contentFile (rb_local_usn, ID)',
  );
  late final Index djmdActiveCensorContentID = Index(
    'djmd_active_censor__content_i_d',
    'CREATE INDEX djmd_active_censor__content_i_d ON djmdActiveCensor (ContentID)',
  );
  late final Index djmdActiveCensorContentUUID = Index(
    'djmd_active_censor__content_u_u_i_d',
    'CREATE INDEX djmd_active_censor__content_u_u_i_d ON djmdActiveCensor (ContentUUID)',
  );
  late final Index djmdActiveCensorUUID = Index(
    'djmd_active_censor__u_u_i_d',
    'CREATE INDEX djmd_active_censor__u_u_i_d ON djmdActiveCensor (UUID)',
  );
  late final Index djmdActiveCensorRbDataStatus = Index(
    'djmd_active_censor_rb_data_status',
    'CREATE INDEX djmd_active_censor_rb_data_status ON djmdActiveCensor (rb_data_status)',
  );
  late final Index djmdActiveCensorRbLocalDataStatus = Index(
    'djmd_active_censor_rb_local_data_status',
    'CREATE INDEX djmd_active_censor_rb_local_data_status ON djmdActiveCensor (rb_local_data_status)',
  );
  late final Index djmdActiveCensorRbLocalDeleted = Index(
    'djmd_active_censor_rb_local_deleted',
    'CREATE INDEX djmd_active_censor_rb_local_deleted ON djmdActiveCensor (rb_local_deleted)',
  );
  late final Index djmdActiveCensorRbLocalUsnID = Index(
    'djmd_active_censor_rb_local_usn__i_d',
    'CREATE INDEX djmd_active_censor_rb_local_usn__i_d ON djmdActiveCensor (rb_local_usn, ID)',
  );
  late final Index djmdAlbumAlbumArtistID = Index(
    'djmd_album__album_artist_i_d',
    'CREATE INDEX djmd_album__album_artist_i_d ON djmdAlbum (AlbumArtistID)',
  );
  late final Index djmdAlbumName = Index(
    'djmd_album__name',
    'CREATE INDEX djmd_album__name ON djmdAlbum (Name)',
  );
  late final Index djmdAlbumUUID = Index(
    'djmd_album__u_u_i_d',
    'CREATE INDEX djmd_album__u_u_i_d ON djmdAlbum (UUID)',
  );
  late final Index djmdAlbumRbDataStatus = Index(
    'djmd_album_rb_data_status',
    'CREATE INDEX djmd_album_rb_data_status ON djmdAlbum (rb_data_status)',
  );
  late final Index djmdAlbumRbLocalDataStatus = Index(
    'djmd_album_rb_local_data_status',
    'CREATE INDEX djmd_album_rb_local_data_status ON djmdAlbum (rb_local_data_status)',
  );
  late final Index djmdAlbumRbLocalDeleted = Index(
    'djmd_album_rb_local_deleted',
    'CREATE INDEX djmd_album_rb_local_deleted ON djmdAlbum (rb_local_deleted)',
  );
  late final Index djmdAlbumRbLocalUsnID = Index(
    'djmd_album_rb_local_usn__i_d',
    'CREATE INDEX djmd_album_rb_local_usn__i_d ON djmdAlbum (rb_local_usn, ID)',
  );
  late final Index djmdArtistName = Index(
    'djmd_artist__name',
    'CREATE INDEX djmd_artist__name ON djmdArtist (Name)',
  );
  late final Index djmdArtistUUID = Index(
    'djmd_artist__u_u_i_d',
    'CREATE INDEX djmd_artist__u_u_i_d ON djmdArtist (UUID)',
  );
  late final Index djmdArtistRbDataStatus = Index(
    'djmd_artist_rb_data_status',
    'CREATE INDEX djmd_artist_rb_data_status ON djmdArtist (rb_data_status)',
  );
  late final Index djmdArtistRbLocalDataStatus = Index(
    'djmd_artist_rb_local_data_status',
    'CREATE INDEX djmd_artist_rb_local_data_status ON djmdArtist (rb_local_data_status)',
  );
  late final Index djmdArtistRbLocalDeleted = Index(
    'djmd_artist_rb_local_deleted',
    'CREATE INDEX djmd_artist_rb_local_deleted ON djmdArtist (rb_local_deleted)',
  );
  late final Index djmdArtistRbLocalUsnID = Index(
    'djmd_artist_rb_local_usn__i_d',
    'CREATE INDEX djmd_artist_rb_local_usn__i_d ON djmdArtist (rb_local_usn, ID)',
  );
  late final Index djmdCategoryUUID = Index(
    'djmd_category__u_u_i_d',
    'CREATE INDEX djmd_category__u_u_i_d ON djmdCategory (UUID)',
  );
  late final Index djmdCategoryRbDataStatus = Index(
    'djmd_category_rb_data_status',
    'CREATE INDEX djmd_category_rb_data_status ON djmdCategory (rb_data_status)',
  );
  late final Index djmdCategoryRbLocalDataStatus = Index(
    'djmd_category_rb_local_data_status',
    'CREATE INDEX djmd_category_rb_local_data_status ON djmdCategory (rb_local_data_status)',
  );
  late final Index djmdCategoryRbLocalDeleted = Index(
    'djmd_category_rb_local_deleted',
    'CREATE INDEX djmd_category_rb_local_deleted ON djmdCategory (rb_local_deleted)',
  );
  late final Index djmdCategoryRbLocalUsnID = Index(
    'djmd_category_rb_local_usn__i_d',
    'CREATE INDEX djmd_category_rb_local_usn__i_d ON djmdCategory (rb_local_usn, ID)',
  );
  late final Index djmdCloudPropertyUUID = Index(
    'djmd_cloud_property__u_u_i_d',
    'CREATE INDEX djmd_cloud_property__u_u_i_d ON djmdCloudProperty (UUID)',
  );
  late final Index djmdCloudPropertyRbDataStatus = Index(
    'djmd_cloud_property_rb_data_status',
    'CREATE INDEX djmd_cloud_property_rb_data_status ON djmdCloudProperty (rb_data_status)',
  );
  late final Index djmdCloudPropertyRbLocalDataStatus = Index(
    'djmd_cloud_property_rb_local_data_status',
    'CREATE INDEX djmd_cloud_property_rb_local_data_status ON djmdCloudProperty (rb_local_data_status)',
  );
  late final Index djmdCloudPropertyRbLocalDeleted = Index(
    'djmd_cloud_property_rb_local_deleted',
    'CREATE INDEX djmd_cloud_property_rb_local_deleted ON djmdCloudProperty (rb_local_deleted)',
  );
  late final Index djmdCloudPropertyRbLocalUsnID = Index(
    'djmd_cloud_property_rb_local_usn__i_d',
    'CREATE INDEX djmd_cloud_property_rb_local_usn__i_d ON djmdCloudProperty (rb_local_usn, ID)',
  );
  late final Index djmdColorUUID = Index(
    'djmd_color__u_u_i_d',
    'CREATE INDEX djmd_color__u_u_i_d ON djmdColor (UUID)',
  );
  late final Index djmdColorRbDataStatus = Index(
    'djmd_color_rb_data_status',
    'CREATE INDEX djmd_color_rb_data_status ON djmdColor (rb_data_status)',
  );
  late final Index djmdColorRbLocalDataStatus = Index(
    'djmd_color_rb_local_data_status',
    'CREATE INDEX djmd_color_rb_local_data_status ON djmdColor (rb_local_data_status)',
  );
  late final Index djmdColorRbLocalDeleted = Index(
    'djmd_color_rb_local_deleted',
    'CREATE INDEX djmd_color_rb_local_deleted ON djmdColor (rb_local_deleted)',
  );
  late final Index djmdColorRbLocalUsnID = Index(
    'djmd_color_rb_local_usn__i_d',
    'CREATE INDEX djmd_color_rb_local_usn__i_d ON djmdColor (rb_local_usn, ID)',
  );
  late final Index djmdContentAlbumID = Index(
    'djmd_content__album_i_d',
    'CREATE INDEX djmd_content__album_i_d ON djmdContent (AlbumID)',
  );
  late final Index djmdContentArtistID = Index(
    'djmd_content__artist_i_d',
    'CREATE INDEX djmd_content__artist_i_d ON djmdContent (ArtistID)',
  );
  late final Index djmdContentComposerID = Index(
    'djmd_content__composer_i_d',
    'CREATE INDEX djmd_content__composer_i_d ON djmdContent (ComposerID)',
  );
  late final Index djmdContentGenreID = Index(
    'djmd_content__genre_i_d',
    'CREATE INDEX djmd_content__genre_i_d ON djmdContent (GenreID)',
  );
  late final Index djmdContentKeyID = Index(
    'djmd_content__key_i_d',
    'CREATE INDEX djmd_content__key_i_d ON djmdContent (KeyID)',
  );
  late final Index djmdContentLabelID = Index(
    'djmd_content__label_i_d',
    'CREATE INDEX djmd_content__label_i_d ON djmdContent (LabelID)',
  );
  late final Index djmdContentMasterDBIDMasterSongID = Index(
    'djmd_content__master_d_b_i_d__master_song_i_d',
    'CREATE INDEX djmd_content__master_d_b_i_d__master_song_i_d ON djmdContent (MasterDBID, MasterSongID)',
  );
  late final Index djmdContentOrgArtistID = Index(
    'djmd_content__org_artist_i_d',
    'CREATE INDEX djmd_content__org_artist_i_d ON djmdContent (OrgArtistID)',
  );
  late final Index djmdContentRemixerID = Index(
    'djmd_content__remixer_i_d',
    'CREATE INDEX djmd_content__remixer_i_d ON djmdContent (RemixerID)',
  );
  late final Index djmdContentUUID = Index(
    'djmd_content__u_u_i_d',
    'CREATE INDEX djmd_content__u_u_i_d ON djmdContent (UUID)',
  );
  late final Index djmdContentRbDataStatus = Index(
    'djmd_content_rb_data_status',
    'CREATE INDEX djmd_content_rb_data_status ON djmdContent (rb_data_status)',
  );
  late final Index djmdContentRbLocalDataStatus = Index(
    'djmd_content_rb_local_data_status',
    'CREATE INDEX djmd_content_rb_local_data_status ON djmdContent (rb_local_data_status)',
  );
  late final Index djmdContentRbLocalDeleted = Index(
    'djmd_content_rb_local_deleted',
    'CREATE INDEX djmd_content_rb_local_deleted ON djmdContent (rb_local_deleted)',
  );
  late final Index djmdContentRbLocalDeletedBitDepth = Index(
    'djmd_content_rb_local_deleted__bit_depth',
    'CREATE INDEX djmd_content_rb_local_deleted__bit_depth ON djmdContent (rb_local_deleted, BitDepth)',
  );
  late final Index djmdContentRbLocalDeletedBitRate = Index(
    'djmd_content_rb_local_deleted__bit_rate',
    'CREATE INDEX djmd_content_rb_local_deleted__bit_rate ON djmdContent (rb_local_deleted, BitRate)',
  );
  late final Index djmdContentRbLocalDeletedFileType = Index(
    'djmd_content_rb_local_deleted__file_type',
    'CREATE INDEX djmd_content_rb_local_deleted__file_type ON djmdContent (rb_local_deleted, FileType)',
  );
  late final Index djmdContentRbLocalDeletedServiceID = Index(
    'djmd_content_rb_local_deleted__service_i_d',
    'CREATE INDEX djmd_content_rb_local_deleted__service_i_d ON djmdContent (rb_local_deleted, ServiceID)',
  );
  late final Index djmdContentRbLocalUsnID = Index(
    'djmd_content_rb_local_usn__i_d',
    'CREATE INDEX djmd_content_rb_local_usn__i_d ON djmdContent (rb_local_usn, ID)',
  );
  late final Index djmdCueContentIDRbLocalDeleted = Index(
    'djmd_cue__content_i_d_rb_local_deleted',
    'CREATE INDEX djmd_cue__content_i_d_rb_local_deleted ON djmdCue (ContentID, rb_local_deleted)',
  );
  late final Index djmdCueContentUUID = Index(
    'djmd_cue__content_u_u_i_d',
    'CREATE INDEX djmd_cue__content_u_u_i_d ON djmdCue (ContentUUID)',
  );
  late final Index djmdCueUUID = Index(
    'djmd_cue__u_u_i_d',
    'CREATE INDEX djmd_cue__u_u_i_d ON djmdCue (UUID)',
  );
  late final Index djmdCueRbDataStatus = Index(
    'djmd_cue_rb_data_status',
    'CREATE INDEX djmd_cue_rb_data_status ON djmdCue (rb_data_status)',
  );
  late final Index djmdCueRbLocalDataStatus = Index(
    'djmd_cue_rb_local_data_status',
    'CREATE INDEX djmd_cue_rb_local_data_status ON djmdCue (rb_local_data_status)',
  );
  late final Index djmdCueRbLocalDeleted = Index(
    'djmd_cue_rb_local_deleted',
    'CREATE INDEX djmd_cue_rb_local_deleted ON djmdCue (rb_local_deleted)',
  );
  late final Index djmdCueRbLocalUsnID = Index(
    'djmd_cue_rb_local_usn__i_d',
    'CREATE INDEX djmd_cue_rb_local_usn__i_d ON djmdCue (rb_local_usn, ID)',
  );
  late final Index djmdDeviceUUID = Index(
    'djmd_device__u_u_i_d',
    'CREATE INDEX djmd_device__u_u_i_d ON djmdDevice (UUID)',
  );
  late final Index djmdDeviceRbDataStatus = Index(
    'djmd_device_rb_data_status',
    'CREATE INDEX djmd_device_rb_data_status ON djmdDevice (rb_data_status)',
  );
  late final Index djmdDeviceRbLocalDataStatus = Index(
    'djmd_device_rb_local_data_status',
    'CREATE INDEX djmd_device_rb_local_data_status ON djmdDevice (rb_local_data_status)',
  );
  late final Index djmdDeviceRbLocalDeleted = Index(
    'djmd_device_rb_local_deleted',
    'CREATE INDEX djmd_device_rb_local_deleted ON djmdDevice (rb_local_deleted)',
  );
  late final Index djmdDeviceRbLocalUsnID = Index(
    'djmd_device_rb_local_usn__i_d',
    'CREATE INDEX djmd_device_rb_local_usn__i_d ON djmdDevice (rb_local_usn, ID)',
  );
  late final Index djmdGenreName = Index(
    'djmd_genre__name',
    'CREATE INDEX djmd_genre__name ON djmdGenre (Name)',
  );
  late final Index djmdGenreUUID = Index(
    'djmd_genre__u_u_i_d',
    'CREATE INDEX djmd_genre__u_u_i_d ON djmdGenre (UUID)',
  );
  late final Index djmdGenreRbDataStatus = Index(
    'djmd_genre_rb_data_status',
    'CREATE INDEX djmd_genre_rb_data_status ON djmdGenre (rb_data_status)',
  );
  late final Index djmdGenreRbLocalDataStatus = Index(
    'djmd_genre_rb_local_data_status',
    'CREATE INDEX djmd_genre_rb_local_data_status ON djmdGenre (rb_local_data_status)',
  );
  late final Index djmdGenreRbLocalDeleted = Index(
    'djmd_genre_rb_local_deleted',
    'CREATE INDEX djmd_genre_rb_local_deleted ON djmdGenre (rb_local_deleted)',
  );
  late final Index djmdGenreRbLocalUsnID = Index(
    'djmd_genre_rb_local_usn__i_d',
    'CREATE INDEX djmd_genre_rb_local_usn__i_d ON djmdGenre (rb_local_usn, ID)',
  );
  late final Index djmdHistoryName = Index(
    'djmd_history__name',
    'CREATE INDEX djmd_history__name ON djmdHistory (Name)',
  );
  late final Index djmdHistoryParentID = Index(
    'djmd_history__parent_i_d',
    'CREATE INDEX djmd_history__parent_i_d ON djmdHistory (ParentID)',
  );
  late final Index djmdHistoryUUID = Index(
    'djmd_history__u_u_i_d',
    'CREATE INDEX djmd_history__u_u_i_d ON djmdHistory (UUID)',
  );
  late final Index djmdHistoryRbDataStatus = Index(
    'djmd_history_rb_data_status',
    'CREATE INDEX djmd_history_rb_data_status ON djmdHistory (rb_data_status)',
  );
  late final Index djmdHistoryRbLocalDataStatus = Index(
    'djmd_history_rb_local_data_status',
    'CREATE INDEX djmd_history_rb_local_data_status ON djmdHistory (rb_local_data_status)',
  );
  late final Index djmdHistoryRbLocalDeleted = Index(
    'djmd_history_rb_local_deleted',
    'CREATE INDEX djmd_history_rb_local_deleted ON djmdHistory (rb_local_deleted)',
  );
  late final Index djmdHistoryRbLocalUsnID = Index(
    'djmd_history_rb_local_usn__i_d',
    'CREATE INDEX djmd_history_rb_local_usn__i_d ON djmdHistory (rb_local_usn, ID)',
  );
  late final Index djmdHotCueBanklistName = Index(
    'djmd_hot_cue_banklist__name',
    'CREATE INDEX djmd_hot_cue_banklist__name ON djmdHotCueBanklist (Name)',
  );
  late final Index djmdHotCueBanklistParentID = Index(
    'djmd_hot_cue_banklist__parent_i_d',
    'CREATE INDEX djmd_hot_cue_banklist__parent_i_d ON djmdHotCueBanklist (ParentID)',
  );
  late final Index djmdHotCueBanklistUUID = Index(
    'djmd_hot_cue_banklist__u_u_i_d',
    'CREATE INDEX djmd_hot_cue_banklist__u_u_i_d ON djmdHotCueBanklist (UUID)',
  );
  late final Index djmdHotCueBanklistRbDataStatus = Index(
    'djmd_hot_cue_banklist_rb_data_status',
    'CREATE INDEX djmd_hot_cue_banklist_rb_data_status ON djmdHotCueBanklist (rb_data_status)',
  );
  late final Index djmdHotCueBanklistRbLocalDataStatus = Index(
    'djmd_hot_cue_banklist_rb_local_data_status',
    'CREATE INDEX djmd_hot_cue_banklist_rb_local_data_status ON djmdHotCueBanklist (rb_local_data_status)',
  );
  late final Index djmdHotCueBanklistRbLocalDeleted = Index(
    'djmd_hot_cue_banklist_rb_local_deleted',
    'CREATE INDEX djmd_hot_cue_banklist_rb_local_deleted ON djmdHotCueBanklist (rb_local_deleted)',
  );
  late final Index djmdHotCueBanklistRbLocalUsnID = Index(
    'djmd_hot_cue_banklist_rb_local_usn__i_d',
    'CREATE INDEX djmd_hot_cue_banklist_rb_local_usn__i_d ON djmdHotCueBanklist (rb_local_usn, ID)',
  );
  late final Index djmdKeyScaleName = Index(
    'djmd_key__scale_name',
    'CREATE INDEX djmd_key__scale_name ON djmdKey (ScaleName)',
  );
  late final Index djmdKeyUUID = Index(
    'djmd_key__u_u_i_d',
    'CREATE INDEX djmd_key__u_u_i_d ON djmdKey (UUID)',
  );
  late final Index djmdKeyRbDataStatus = Index(
    'djmd_key_rb_data_status',
    'CREATE INDEX djmd_key_rb_data_status ON djmdKey (rb_data_status)',
  );
  late final Index djmdKeyRbLocalDataStatus = Index(
    'djmd_key_rb_local_data_status',
    'CREATE INDEX djmd_key_rb_local_data_status ON djmdKey (rb_local_data_status)',
  );
  late final Index djmdKeyRbLocalDeleted = Index(
    'djmd_key_rb_local_deleted',
    'CREATE INDEX djmd_key_rb_local_deleted ON djmdKey (rb_local_deleted)',
  );
  late final Index djmdKeyRbLocalUsnID = Index(
    'djmd_key_rb_local_usn__i_d',
    'CREATE INDEX djmd_key_rb_local_usn__i_d ON djmdKey (rb_local_usn, ID)',
  );
  late final Index djmdLabelName = Index(
    'djmd_label__name',
    'CREATE INDEX djmd_label__name ON djmdLabel (Name)',
  );
  late final Index djmdLabelUUID = Index(
    'djmd_label__u_u_i_d',
    'CREATE INDEX djmd_label__u_u_i_d ON djmdLabel (UUID)',
  );
  late final Index djmdLabelRbDataStatus = Index(
    'djmd_label_rb_data_status',
    'CREATE INDEX djmd_label_rb_data_status ON djmdLabel (rb_data_status)',
  );
  late final Index djmdLabelRbLocalDataStatus = Index(
    'djmd_label_rb_local_data_status',
    'CREATE INDEX djmd_label_rb_local_data_status ON djmdLabel (rb_local_data_status)',
  );
  late final Index djmdLabelRbLocalDeleted = Index(
    'djmd_label_rb_local_deleted',
    'CREATE INDEX djmd_label_rb_local_deleted ON djmdLabel (rb_local_deleted)',
  );
  late final Index djmdLabelRbLocalUsnID = Index(
    'djmd_label_rb_local_usn__i_d',
    'CREATE INDEX djmd_label_rb_local_usn__i_d ON djmdLabel (rb_local_usn, ID)',
  );
  late final Index djmdMenuItemsUUID = Index(
    'djmd_menu_items__u_u_i_d',
    'CREATE INDEX djmd_menu_items__u_u_i_d ON djmdMenuItems (UUID)',
  );
  late final Index djmdMenuItemsRbDataStatus = Index(
    'djmd_menu_items_rb_data_status',
    'CREATE INDEX djmd_menu_items_rb_data_status ON djmdMenuItems (rb_data_status)',
  );
  late final Index djmdMenuItemsRbLocalDataStatus = Index(
    'djmd_menu_items_rb_local_data_status',
    'CREATE INDEX djmd_menu_items_rb_local_data_status ON djmdMenuItems (rb_local_data_status)',
  );
  late final Index djmdMenuItemsRbLocalDeleted = Index(
    'djmd_menu_items_rb_local_deleted',
    'CREATE INDEX djmd_menu_items_rb_local_deleted ON djmdMenuItems (rb_local_deleted)',
  );
  late final Index djmdMenuItemsRbLocalUsnID = Index(
    'djmd_menu_items_rb_local_usn__i_d',
    'CREATE INDEX djmd_menu_items_rb_local_usn__i_d ON djmdMenuItems (rb_local_usn, ID)',
  );
  late final Index djmdMixerParamContentIDRbLocalDeleted = Index(
    'djmd_mixer_param__content_i_d_rb_local_deleted',
    'CREATE INDEX djmd_mixer_param__content_i_d_rb_local_deleted ON djmdMixerParam (ContentID, rb_local_deleted)',
  );
  late final Index djmdMixerParamUUID = Index(
    'djmd_mixer_param__u_u_i_d',
    'CREATE INDEX djmd_mixer_param__u_u_i_d ON djmdMixerParam (UUID)',
  );
  late final Index djmdMixerParamRbDataStatus = Index(
    'djmd_mixer_param_rb_data_status',
    'CREATE INDEX djmd_mixer_param_rb_data_status ON djmdMixerParam (rb_data_status)',
  );
  late final Index djmdMixerParamRbLocalDataStatus = Index(
    'djmd_mixer_param_rb_local_data_status',
    'CREATE INDEX djmd_mixer_param_rb_local_data_status ON djmdMixerParam (rb_local_data_status)',
  );
  late final Index djmdMixerParamRbLocalDeleted = Index(
    'djmd_mixer_param_rb_local_deleted',
    'CREATE INDEX djmd_mixer_param_rb_local_deleted ON djmdMixerParam (rb_local_deleted)',
  );
  late final Index djmdMixerParamRbLocalUsnID = Index(
    'djmd_mixer_param_rb_local_usn__i_d',
    'CREATE INDEX djmd_mixer_param_rb_local_usn__i_d ON djmdMixerParam (rb_local_usn, ID)',
  );
  late final Index djmdMyTagParentID = Index(
    'djmd_my_tag__parent_i_d',
    'CREATE INDEX djmd_my_tag__parent_i_d ON djmdMyTag (ParentID)',
  );
  late final Index djmdMyTagSeq = Index(
    'djmd_my_tag__seq',
    'CREATE INDEX djmd_my_tag__seq ON djmdMyTag (Seq)',
  );
  late final Index djmdMyTagUUID = Index(
    'djmd_my_tag__u_u_i_d',
    'CREATE INDEX djmd_my_tag__u_u_i_d ON djmdMyTag (UUID)',
  );
  late final Index djmdMyTagRbDataStatus = Index(
    'djmd_my_tag_rb_data_status',
    'CREATE INDEX djmd_my_tag_rb_data_status ON djmdMyTag (rb_data_status)',
  );
  late final Index djmdMyTagRbLocalDataStatus = Index(
    'djmd_my_tag_rb_local_data_status',
    'CREATE INDEX djmd_my_tag_rb_local_data_status ON djmdMyTag (rb_local_data_status)',
  );
  late final Index djmdMyTagRbLocalDeleted = Index(
    'djmd_my_tag_rb_local_deleted',
    'CREATE INDEX djmd_my_tag_rb_local_deleted ON djmdMyTag (rb_local_deleted)',
  );
  late final Index djmdMyTagRbLocalUsnID = Index(
    'djmd_my_tag_rb_local_usn__i_d',
    'CREATE INDEX djmd_my_tag_rb_local_usn__i_d ON djmdMyTag (rb_local_usn, ID)',
  );
  late final Index djmdPlaylistAttribute = Index(
    'djmd_playlist__attribute',
    'CREATE INDEX djmd_playlist__attribute ON djmdPlaylist (Attribute)',
  );
  late final Index djmdPlaylistName = Index(
    'djmd_playlist__name',
    'CREATE INDEX djmd_playlist__name ON djmdPlaylist (Name)',
  );
  late final Index djmdPlaylistParentID = Index(
    'djmd_playlist__parent_i_d',
    'CREATE INDEX djmd_playlist__parent_i_d ON djmdPlaylist (ParentID)',
  );
  late final Index djmdPlaylistSeq = Index(
    'djmd_playlist__seq',
    'CREATE INDEX djmd_playlist__seq ON djmdPlaylist (Seq)',
  );
  late final Index djmdPlaylistUUID = Index(
    'djmd_playlist__u_u_i_d',
    'CREATE INDEX djmd_playlist__u_u_i_d ON djmdPlaylist (UUID)',
  );
  late final Index djmdPlaylistRbDataStatus = Index(
    'djmd_playlist_rb_data_status',
    'CREATE INDEX djmd_playlist_rb_data_status ON djmdPlaylist (rb_data_status)',
  );
  late final Index djmdPlaylistRbLocalDataStatus = Index(
    'djmd_playlist_rb_local_data_status',
    'CREATE INDEX djmd_playlist_rb_local_data_status ON djmdPlaylist (rb_local_data_status)',
  );
  late final Index djmdPlaylistRbLocalDeleted = Index(
    'djmd_playlist_rb_local_deleted',
    'CREATE INDEX djmd_playlist_rb_local_deleted ON djmdPlaylist (rb_local_deleted)',
  );
  late final Index djmdPlaylistRbLocalUsnID = Index(
    'djmd_playlist_rb_local_usn__i_d',
    'CREATE INDEX djmd_playlist_rb_local_usn__i_d ON djmdPlaylist (rb_local_usn, ID)',
  );
  late final Index djmdRecommendLikeContentID1ContentID2 = Index(
    'djmd_recommend_like__content_i_d1__content_i_d2',
    'CREATE INDEX djmd_recommend_like__content_i_d1__content_i_d2 ON djmdRecommendLike (ContentID1, ContentID2)',
  );
  late final Index djmdRecommendLikeContentID2 = Index(
    'djmd_recommend_like__content_i_d2',
    'CREATE INDEX djmd_recommend_like__content_i_d2 ON djmdRecommendLike (ContentID2)',
  );
  late final Index djmdRecommendLikeUUID = Index(
    'djmd_recommend_like__u_u_i_d',
    'CREATE INDEX djmd_recommend_like__u_u_i_d ON djmdRecommendLike (UUID)',
  );
  late final Index djmdRecommendLikeRbDataStatus = Index(
    'djmd_recommend_like_rb_data_status',
    'CREATE INDEX djmd_recommend_like_rb_data_status ON djmdRecommendLike (rb_data_status)',
  );
  late final Index djmdRecommendLikeRbLocalDataStatus = Index(
    'djmd_recommend_like_rb_local_data_status',
    'CREATE INDEX djmd_recommend_like_rb_local_data_status ON djmdRecommendLike (rb_local_data_status)',
  );
  late final Index djmdRecommendLikeRbLocalDeleted = Index(
    'djmd_recommend_like_rb_local_deleted',
    'CREATE INDEX djmd_recommend_like_rb_local_deleted ON djmdRecommendLike (rb_local_deleted)',
  );
  late final Index djmdRecommendLikeRbLocalUsnID = Index(
    'djmd_recommend_like_rb_local_usn__i_d',
    'CREATE INDEX djmd_recommend_like_rb_local_usn__i_d ON djmdRecommendLike (rb_local_usn, ID)',
  );
  late final Index djmdRelatedTracksName = Index(
    'djmd_related_tracks__name',
    'CREATE INDEX djmd_related_tracks__name ON djmdRelatedTracks (Name)',
  );
  late final Index djmdRelatedTracksParentID = Index(
    'djmd_related_tracks__parent_i_d',
    'CREATE INDEX djmd_related_tracks__parent_i_d ON djmdRelatedTracks (ParentID)',
  );
  late final Index djmdRelatedTracksSeq = Index(
    'djmd_related_tracks__seq',
    'CREATE INDEX djmd_related_tracks__seq ON djmdRelatedTracks (Seq)',
  );
  late final Index djmdRelatedTracksUUID = Index(
    'djmd_related_tracks__u_u_i_d',
    'CREATE INDEX djmd_related_tracks__u_u_i_d ON djmdRelatedTracks (UUID)',
  );
  late final Index djmdRelatedTracksRbDataStatus = Index(
    'djmd_related_tracks_rb_data_status',
    'CREATE INDEX djmd_related_tracks_rb_data_status ON djmdRelatedTracks (rb_data_status)',
  );
  late final Index djmdRelatedTracksRbLocalDataStatus = Index(
    'djmd_related_tracks_rb_local_data_status',
    'CREATE INDEX djmd_related_tracks_rb_local_data_status ON djmdRelatedTracks (rb_local_data_status)',
  );
  late final Index djmdRelatedTracksRbLocalDeleted = Index(
    'djmd_related_tracks_rb_local_deleted',
    'CREATE INDEX djmd_related_tracks_rb_local_deleted ON djmdRelatedTracks (rb_local_deleted)',
  );
  late final Index djmdRelatedTracksRbLocalUsnID = Index(
    'djmd_related_tracks_rb_local_usn__i_d',
    'CREATE INDEX djmd_related_tracks_rb_local_usn__i_d ON djmdRelatedTracks (rb_local_usn, ID)',
  );
  late final Index djmdSamplerName = Index(
    'djmd_sampler__name',
    'CREATE INDEX djmd_sampler__name ON djmdSampler (Name)',
  );
  late final Index djmdSamplerParentID = Index(
    'djmd_sampler__parent_i_d',
    'CREATE INDEX djmd_sampler__parent_i_d ON djmdSampler (ParentID)',
  );
  late final Index djmdSamplerSeq = Index(
    'djmd_sampler__seq',
    'CREATE INDEX djmd_sampler__seq ON djmdSampler (Seq)',
  );
  late final Index djmdSamplerUUID = Index(
    'djmd_sampler__u_u_i_d',
    'CREATE INDEX djmd_sampler__u_u_i_d ON djmdSampler (UUID)',
  );
  late final Index djmdSamplerRbDataStatus = Index(
    'djmd_sampler_rb_data_status',
    'CREATE INDEX djmd_sampler_rb_data_status ON djmdSampler (rb_data_status)',
  );
  late final Index djmdSamplerRbLocalDataStatus = Index(
    'djmd_sampler_rb_local_data_status',
    'CREATE INDEX djmd_sampler_rb_local_data_status ON djmdSampler (rb_local_data_status)',
  );
  late final Index djmdSamplerRbLocalDeleted = Index(
    'djmd_sampler_rb_local_deleted',
    'CREATE INDEX djmd_sampler_rb_local_deleted ON djmdSampler (rb_local_deleted)',
  );
  late final Index djmdSamplerRbLocalUsnID = Index(
    'djmd_sampler_rb_local_usn__i_d',
    'CREATE INDEX djmd_sampler_rb_local_usn__i_d ON djmdSampler (rb_local_usn, ID)',
  );
  late final Index djmdSongHistoryContentIDRbLocalDeleted = Index(
    'djmd_song_history__content_i_d_rb_local_deleted',
    'CREATE INDEX djmd_song_history__content_i_d_rb_local_deleted ON djmdSongHistory (ContentID, rb_local_deleted)',
  );
  late final Index djmdSongHistoryHistoryID = Index(
    'djmd_song_history__history_i_d',
    'CREATE INDEX djmd_song_history__history_i_d ON djmdSongHistory (HistoryID)',
  );
  late final Index djmdSongHistoryUUID = Index(
    'djmd_song_history__u_u_i_d',
    'CREATE INDEX djmd_song_history__u_u_i_d ON djmdSongHistory (UUID)',
  );
  late final Index djmdSongHistoryRbDataStatus = Index(
    'djmd_song_history_rb_data_status',
    'CREATE INDEX djmd_song_history_rb_data_status ON djmdSongHistory (rb_data_status)',
  );
  late final Index djmdSongHistoryRbLocalDataStatus = Index(
    'djmd_song_history_rb_local_data_status',
    'CREATE INDEX djmd_song_history_rb_local_data_status ON djmdSongHistory (rb_local_data_status)',
  );
  late final Index djmdSongHistoryRbLocalDeleted = Index(
    'djmd_song_history_rb_local_deleted',
    'CREATE INDEX djmd_song_history_rb_local_deleted ON djmdSongHistory (rb_local_deleted)',
  );
  late final Index djmdSongHistoryRbLocalUsnID = Index(
    'djmd_song_history_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_history_rb_local_usn__i_d ON djmdSongHistory (rb_local_usn, ID)',
  );
  late final Index djmdSongHotCueBanklistContentID = Index(
    'djmd_song_hot_cue_banklist__content_i_d',
    'CREATE INDEX djmd_song_hot_cue_banklist__content_i_d ON djmdSongHotCueBanklist (ContentID)',
  );
  late final Index djmdSongHotCueBanklistHotCueBanklistID = Index(
    'djmd_song_hot_cue_banklist__hot_cue_banklist_i_d',
    'CREATE INDEX djmd_song_hot_cue_banklist__hot_cue_banklist_i_d ON djmdSongHotCueBanklist (HotCueBanklistID)',
  );
  late final Index djmdSongHotCueBanklistHotCueBanklistUUID = Index(
    'djmd_song_hot_cue_banklist__hot_cue_banklist_u_u_i_d',
    'CREATE INDEX djmd_song_hot_cue_banklist__hot_cue_banklist_u_u_i_d ON djmdSongHotCueBanklist (HotCueBanklistUUID)',
  );
  late final Index djmdSongHotCueBanklistUUID = Index(
    'djmd_song_hot_cue_banklist__u_u_i_d',
    'CREATE INDEX djmd_song_hot_cue_banklist__u_u_i_d ON djmdSongHotCueBanklist (UUID)',
  );
  late final Index djmdSongHotCueBanklistRbDataStatus = Index(
    'djmd_song_hot_cue_banklist_rb_data_status',
    'CREATE INDEX djmd_song_hot_cue_banklist_rb_data_status ON djmdSongHotCueBanklist (rb_data_status)',
  );
  late final Index djmdSongHotCueBanklistRbLocalDataStatus = Index(
    'djmd_song_hot_cue_banklist_rb_local_data_status',
    'CREATE INDEX djmd_song_hot_cue_banklist_rb_local_data_status ON djmdSongHotCueBanklist (rb_local_data_status)',
  );
  late final Index djmdSongHotCueBanklistRbLocalDeleted = Index(
    'djmd_song_hot_cue_banklist_rb_local_deleted',
    'CREATE INDEX djmd_song_hot_cue_banklist_rb_local_deleted ON djmdSongHotCueBanklist (rb_local_deleted)',
  );
  late final Index djmdSongHotCueBanklistRbLocalUsnID = Index(
    'djmd_song_hot_cue_banklist_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_hot_cue_banklist_rb_local_usn__i_d ON djmdSongHotCueBanklist (rb_local_usn, ID)',
  );
  late final Index djmdSongMyTagContentIDRbLocalDeleted = Index(
    'djmd_song_my_tag__content_i_d_rb_local_deleted',
    'CREATE INDEX djmd_song_my_tag__content_i_d_rb_local_deleted ON djmdSongMyTag (ContentID, rb_local_deleted)',
  );
  late final Index djmdSongMyTagMyTagID = Index(
    'djmd_song_my_tag__my_tag_i_d',
    'CREATE INDEX djmd_song_my_tag__my_tag_i_d ON djmdSongMyTag (MyTagID)',
  );
  late final Index djmdSongMyTagMyTagIDRbLocalDeletedID = Index(
    'djmd_song_my_tag__my_tag_i_d_rb_local_deleted__i_d',
    'CREATE INDEX djmd_song_my_tag__my_tag_i_d_rb_local_deleted__i_d ON djmdSongMyTag (MyTagID, rb_local_deleted, ID)',
  );
  late final Index djmdSongMyTagUUID = Index(
    'djmd_song_my_tag__u_u_i_d',
    'CREATE INDEX djmd_song_my_tag__u_u_i_d ON djmdSongMyTag (UUID)',
  );
  late final Index djmdSongMyTagRbDataStatus = Index(
    'djmd_song_my_tag_rb_data_status',
    'CREATE INDEX djmd_song_my_tag_rb_data_status ON djmdSongMyTag (rb_data_status)',
  );
  late final Index djmdSongMyTagRbLocalDataStatus = Index(
    'djmd_song_my_tag_rb_local_data_status',
    'CREATE INDEX djmd_song_my_tag_rb_local_data_status ON djmdSongMyTag (rb_local_data_status)',
  );
  late final Index djmdSongMyTagRbLocalDeleted = Index(
    'djmd_song_my_tag_rb_local_deleted',
    'CREATE INDEX djmd_song_my_tag_rb_local_deleted ON djmdSongMyTag (rb_local_deleted)',
  );
  late final Index djmdSongMyTagRbLocalUsnID = Index(
    'djmd_song_my_tag_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_my_tag_rb_local_usn__i_d ON djmdSongMyTag (rb_local_usn, ID)',
  );
  late final Index djmdSongPlaylistContentIDRbLocalDeleted = Index(
    'djmd_song_playlist__content_i_d_rb_local_deleted',
    'CREATE INDEX djmd_song_playlist__content_i_d_rb_local_deleted ON djmdSongPlaylist (ContentID, rb_local_deleted)',
  );
  late final Index djmdSongPlaylistPlaylistID = Index(
    'djmd_song_playlist__playlist_i_d',
    'CREATE INDEX djmd_song_playlist__playlist_i_d ON djmdSongPlaylist (PlaylistID)',
  );
  late final Index djmdSongPlaylistPlaylistIDID = Index(
    'djmd_song_playlist__playlist_i_d__i_d',
    'CREATE INDEX djmd_song_playlist__playlist_i_d__i_d ON djmdSongPlaylist (PlaylistID, ID)',
  );
  late final Index djmdSongPlaylistUUID = Index(
    'djmd_song_playlist__u_u_i_d',
    'CREATE INDEX djmd_song_playlist__u_u_i_d ON djmdSongPlaylist (UUID)',
  );
  late final Index djmdSongPlaylistRbDataStatus = Index(
    'djmd_song_playlist_rb_data_status',
    'CREATE INDEX djmd_song_playlist_rb_data_status ON djmdSongPlaylist (rb_data_status)',
  );
  late final Index djmdSongPlaylistRbLocalDataStatus = Index(
    'djmd_song_playlist_rb_local_data_status',
    'CREATE INDEX djmd_song_playlist_rb_local_data_status ON djmdSongPlaylist (rb_local_data_status)',
  );
  late final Index djmdSongPlaylistRbLocalDeleted = Index(
    'djmd_song_playlist_rb_local_deleted',
    'CREATE INDEX djmd_song_playlist_rb_local_deleted ON djmdSongPlaylist (rb_local_deleted)',
  );
  late final Index djmdSongPlaylistRbLocalUsnID = Index(
    'djmd_song_playlist_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_playlist_rb_local_usn__i_d ON djmdSongPlaylist (rb_local_usn, ID)',
  );
  late final Index djmdSongRelatedTracksContentID = Index(
    'djmd_song_related_tracks__content_i_d',
    'CREATE INDEX djmd_song_related_tracks__content_i_d ON djmdSongRelatedTracks (ContentID)',
  );
  late final Index djmdSongRelatedTracksRelatedTracksID = Index(
    'djmd_song_related_tracks__related_tracks_i_d',
    'CREATE INDEX djmd_song_related_tracks__related_tracks_i_d ON djmdSongRelatedTracks (RelatedTracksID)',
  );
  late final Index djmdSongRelatedTracksUUID = Index(
    'djmd_song_related_tracks__u_u_i_d',
    'CREATE INDEX djmd_song_related_tracks__u_u_i_d ON djmdSongRelatedTracks (UUID)',
  );
  late final Index djmdSongRelatedTracksRbDataStatus = Index(
    'djmd_song_related_tracks_rb_data_status',
    'CREATE INDEX djmd_song_related_tracks_rb_data_status ON djmdSongRelatedTracks (rb_data_status)',
  );
  late final Index djmdSongRelatedTracksRbLocalDataStatus = Index(
    'djmd_song_related_tracks_rb_local_data_status',
    'CREATE INDEX djmd_song_related_tracks_rb_local_data_status ON djmdSongRelatedTracks (rb_local_data_status)',
  );
  late final Index djmdSongRelatedTracksRbLocalDeleted = Index(
    'djmd_song_related_tracks_rb_local_deleted',
    'CREATE INDEX djmd_song_related_tracks_rb_local_deleted ON djmdSongRelatedTracks (rb_local_deleted)',
  );
  late final Index djmdSongRelatedTracksRbLocalUsnID = Index(
    'djmd_song_related_tracks_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_related_tracks_rb_local_usn__i_d ON djmdSongRelatedTracks (rb_local_usn, ID)',
  );
  late final Index djmdSongSamplerContentID = Index(
    'djmd_song_sampler__content_i_d',
    'CREATE INDEX djmd_song_sampler__content_i_d ON djmdSongSampler (ContentID)',
  );
  late final Index djmdSongSamplerSamplerID = Index(
    'djmd_song_sampler__sampler_i_d',
    'CREATE INDEX djmd_song_sampler__sampler_i_d ON djmdSongSampler (SamplerID)',
  );
  late final Index djmdSongSamplerUUID = Index(
    'djmd_song_sampler__u_u_i_d',
    'CREATE INDEX djmd_song_sampler__u_u_i_d ON djmdSongSampler (UUID)',
  );
  late final Index djmdSongSamplerRbDataStatus = Index(
    'djmd_song_sampler_rb_data_status',
    'CREATE INDEX djmd_song_sampler_rb_data_status ON djmdSongSampler (rb_data_status)',
  );
  late final Index djmdSongSamplerRbLocalDataStatus = Index(
    'djmd_song_sampler_rb_local_data_status',
    'CREATE INDEX djmd_song_sampler_rb_local_data_status ON djmdSongSampler (rb_local_data_status)',
  );
  late final Index djmdSongSamplerRbLocalDeleted = Index(
    'djmd_song_sampler_rb_local_deleted',
    'CREATE INDEX djmd_song_sampler_rb_local_deleted ON djmdSongSampler (rb_local_deleted)',
  );
  late final Index djmdSongSamplerRbLocalUsnID = Index(
    'djmd_song_sampler_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_sampler_rb_local_usn__i_d ON djmdSongSampler (rb_local_usn, ID)',
  );
  late final Index djmdSongTagListContentID = Index(
    'djmd_song_tag_list__content_i_d',
    'CREATE INDEX djmd_song_tag_list__content_i_d ON djmdSongTagList (ContentID)',
  );
  late final Index djmdSongTagListUUID = Index(
    'djmd_song_tag_list__u_u_i_d',
    'CREATE INDEX djmd_song_tag_list__u_u_i_d ON djmdSongTagList (UUID)',
  );
  late final Index djmdSongTagListRbDataStatus = Index(
    'djmd_song_tag_list_rb_data_status',
    'CREATE INDEX djmd_song_tag_list_rb_data_status ON djmdSongTagList (rb_data_status)',
  );
  late final Index djmdSongTagListRbLocalDataStatus = Index(
    'djmd_song_tag_list_rb_local_data_status',
    'CREATE INDEX djmd_song_tag_list_rb_local_data_status ON djmdSongTagList (rb_local_data_status)',
  );
  late final Index djmdSongTagListRbLocalDeleted = Index(
    'djmd_song_tag_list_rb_local_deleted',
    'CREATE INDEX djmd_song_tag_list_rb_local_deleted ON djmdSongTagList (rb_local_deleted)',
  );
  late final Index djmdSongTagListRbLocalUsnID = Index(
    'djmd_song_tag_list_rb_local_usn__i_d',
    'CREATE INDEX djmd_song_tag_list_rb_local_usn__i_d ON djmdSongTagList (rb_local_usn, ID)',
  );
  late final Index djmdSortUUID = Index(
    'djmd_sort__u_u_i_d',
    'CREATE INDEX djmd_sort__u_u_i_d ON djmdSort (UUID)',
  );
  late final Index djmdSortRbDataStatus = Index(
    'djmd_sort_rb_data_status',
    'CREATE INDEX djmd_sort_rb_data_status ON djmdSort (rb_data_status)',
  );
  late final Index djmdSortRbLocalDataStatus = Index(
    'djmd_sort_rb_local_data_status',
    'CREATE INDEX djmd_sort_rb_local_data_status ON djmdSort (rb_local_data_status)',
  );
  late final Index djmdSortRbLocalDeleted = Index(
    'djmd_sort_rb_local_deleted',
    'CREATE INDEX djmd_sort_rb_local_deleted ON djmdSort (rb_local_deleted)',
  );
  late final Index djmdSortRbLocalUsnID = Index(
    'djmd_sort_rb_local_usn__i_d',
    'CREATE INDEX djmd_sort_rb_local_usn__i_d ON djmdSort (rb_local_usn, ID)',
  );
  late final Index hotCueBanklistCueHotCueBanklistID = Index(
    'hot_cue_banklist_cue__hot_cue_banklist_i_d',
    'CREATE INDEX hot_cue_banklist_cue__hot_cue_banklist_i_d ON hotCueBanklistCue (HotCueBanklistID)',
  );
  late final Index hotCueBanklistCueUUID = Index(
    'hot_cue_banklist_cue__u_u_i_d',
    'CREATE INDEX hot_cue_banklist_cue__u_u_i_d ON hotCueBanklistCue (UUID)',
  );
  late final Index hotCueBanklistCueRbCueCount = Index(
    'hot_cue_banklist_cue_rb_cue_count',
    'CREATE INDEX hot_cue_banklist_cue_rb_cue_count ON hotCueBanklistCue (rb_cue_count)',
  );
  late final Index hotCueBanklistCueRbDataStatus = Index(
    'hot_cue_banklist_cue_rb_data_status',
    'CREATE INDEX hot_cue_banklist_cue_rb_data_status ON hotCueBanklistCue (rb_data_status)',
  );
  late final Index hotCueBanklistCueRbLocalDataStatus = Index(
    'hot_cue_banklist_cue_rb_local_data_status',
    'CREATE INDEX hot_cue_banklist_cue_rb_local_data_status ON hotCueBanklistCue (rb_local_data_status)',
  );
  late final Index hotCueBanklistCueRbLocalDeleted = Index(
    'hot_cue_banklist_cue_rb_local_deleted',
    'CREATE INDEX hot_cue_banklist_cue_rb_local_deleted ON hotCueBanklistCue (rb_local_deleted)',
  );
  late final Index hotCueBanklistCueRbLocalUsnID = Index(
    'hot_cue_banklist_cue_rb_local_usn__i_d',
    'CREATE INDEX hot_cue_banklist_cue_rb_local_usn__i_d ON hotCueBanklistCue (rb_local_usn, ID)',
  );
  late final Index imageFileTableNameTargetID = Index(
    'image_file__table_name__target_i_d',
    'CREATE INDEX image_file__table_name__target_i_d ON imageFile (EntityTableName, TargetID)',
  );
  late final Index imageFileTableNameTargetUUID = Index(
    'image_file__table_name__target_u_u_i_d',
    'CREATE INDEX image_file__table_name__target_u_u_i_d ON imageFile (EntityTableName, TargetUUID)',
  );
  late final Index imageFileTableNameTargetUUIDID = Index(
    'image_file__table_name__target_u_u_i_d__i_d',
    'CREATE INDEX image_file__table_name__target_u_u_i_d__i_d ON imageFile (EntityTableName, TargetUUID, ID)',
  );
  late final Index imageFileUUID = Index(
    'image_file__u_u_i_d',
    'CREATE INDEX image_file__u_u_i_d ON imageFile (UUID)',
  );
  late final Index imageFileRbDataStatus = Index(
    'image_file_rb_data_status',
    'CREATE INDEX image_file_rb_data_status ON imageFile (rb_data_status)',
  );
  late final Index imageFileRbFileHashDirty = Index(
    'image_file_rb_file_hash_dirty',
    'CREATE INDEX image_file_rb_file_hash_dirty ON imageFile (rb_file_hash_dirty)',
  );
  late final Index imageFileRbFileSizeDirty = Index(
    'image_file_rb_file_size_dirty',
    'CREATE INDEX image_file_rb_file_size_dirty ON imageFile (rb_file_size_dirty)',
  );
  late final Index imageFileRbLocalDataStatus = Index(
    'image_file_rb_local_data_status',
    'CREATE INDEX image_file_rb_local_data_status ON imageFile (rb_local_data_status)',
  );
  late final Index imageFileRbLocalDeleted = Index(
    'image_file_rb_local_deleted',
    'CREATE INDEX image_file_rb_local_deleted ON imageFile (rb_local_deleted)',
  );
  late final Index
  imageFileRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority = Index(
    'image_file_rb_local_deleted_rb_in_progress_rb_local_file_status_rb_process_type_rb_priority',
    'CREATE INDEX image_file_rb_local_deleted_rb_in_progress_rb_local_file_status_rb_process_type_rb_priority ON imageFile (rb_local_deleted, rb_in_progress, rb_local_file_status, rb_process_type, rb_priority)',
  );
  late final Index imageFileRbLocalUsnID = Index(
    'image_file_rb_local_usn__i_d',
    'CREATE INDEX image_file_rb_local_usn__i_d ON imageFile (rb_local_usn, ID)',
  );
  late final Index settingFileUUID = Index(
    'setting_file__u_u_i_d',
    'CREATE INDEX setting_file__u_u_i_d ON settingFile (UUID)',
  );
  late final Index settingFileRbDataStatus = Index(
    'setting_file_rb_data_status',
    'CREATE INDEX setting_file_rb_data_status ON settingFile (rb_data_status)',
  );
  late final Index settingFileRbFileHashDirty = Index(
    'setting_file_rb_file_hash_dirty',
    'CREATE INDEX setting_file_rb_file_hash_dirty ON settingFile (rb_file_hash_dirty)',
  );
  late final Index settingFileRbFileSizeDirty = Index(
    'setting_file_rb_file_size_dirty',
    'CREATE INDEX setting_file_rb_file_size_dirty ON settingFile (rb_file_size_dirty)',
  );
  late final Index settingFileRbLocalDataStatus = Index(
    'setting_file_rb_local_data_status',
    'CREATE INDEX setting_file_rb_local_data_status ON settingFile (rb_local_data_status)',
  );
  late final Index settingFileRbLocalDeleted = Index(
    'setting_file_rb_local_deleted',
    'CREATE INDEX setting_file_rb_local_deleted ON settingFile (rb_local_deleted)',
  );
  late final Index settingFileRbLocalUsnID = Index(
    'setting_file_rb_local_usn__i_d',
    'CREATE INDEX setting_file_rb_local_usn__i_d ON settingFile (rb_local_usn, ID)',
  );
  late final Index uuidIDMapUUID = Index(
    'uuid_i_d_map__u_u_i_d',
    'CREATE INDEX uuid_i_d_map__u_u_i_d ON uuidIDMap (UUID)',
  );
  late final Index uuidIDMapRbDataStatus = Index(
    'uuid_i_d_map_rb_data_status',
    'CREATE INDEX uuid_i_d_map_rb_data_status ON uuidIDMap (rb_data_status)',
  );
  late final Index uuidIDMapRbLocalDataStatus = Index(
    'uuid_i_d_map_rb_local_data_status',
    'CREATE INDEX uuid_i_d_map_rb_local_data_status ON uuidIDMap (rb_local_data_status)',
  );
  late final Index uuidIDMapRbLocalDeleted = Index(
    'uuid_i_d_map_rb_local_deleted',
    'CREATE INDEX uuid_i_d_map_rb_local_deleted ON uuidIDMap (rb_local_deleted)',
  );
  late final Index uuidIDMapRbLocalUsnID = Index(
    'uuid_i_d_map_rb_local_usn__i_d',
    'CREATE INDEX uuid_i_d_map_rb_local_usn__i_d ON uuidIDMap (rb_local_usn, ID)',
  );
  @override
  Iterable<TableInfo<Table, Object?>> get allTables =>
      allSchemaEntities.whereType<TableInfo<Table, Object?>>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
    agentNotification,
    agentNotificationLog,
    agentRegistry,
    cloudAgentRegistry,
    contentActiveCensor,
    contentCue,
    contentFile,
    djmdActiveCensor,
    djmdAlbum,
    djmdArtist,
    djmdCategory,
    djmdCloudProperty,
    djmdColor,
    djmdContent,
    djmdCue,
    djmdDevice,
    djmdGenre,
    djmdHistory,
    djmdHotCueBanklist,
    djmdKey,
    djmdLabel,
    djmdMenuItems,
    djmdMixerParam,
    djmdMyTag,
    djmdPlaylist,
    djmdProperty,
    djmdRecommendLike,
    djmdRelatedTracks,
    djmdSampler,
    djmdSongHistory,
    djmdSongHotCueBanklist,
    djmdSongMyTag,
    djmdSongPlaylist,
    djmdSongRelatedTracks,
    djmdSongSampler,
    djmdSongTagList,
    djmdSort,
    hotCueBanklistCue,
    imageFile,
    settingFile,
    sqliteSequence,
    uuidIDMap,
    agentNotificationLogGigyaUidEventDateKindNotificationId,
    agentNotificationLogReportedTEXTEventDate,
    agentNotificationStartTEXTEndTEXT,
    agentRegistryId1Id2,
    cloudAgentRegistryUUID,
    cloudAgentRegistryRbDataStatus,
    cloudAgentRegistryRbLocalDataStatus,
    cloudAgentRegistryRbLocalDeleted,
    cloudAgentRegistryRbLocalUsnID,
    contentActiveCensorContentID,
    contentActiveCensorUUID,
    contentActiveCensorRbDataStatus,
    contentActiveCensorRbLocalDataStatus,
    contentActiveCensorRbLocalDeleted,
    contentActiveCensorRbLocalUsnID,
    contentCueContentID,
    contentCueUUID,
    contentCueRbCueCount,
    contentCueRbDataStatus,
    contentCueRbLocalDataStatus,
    contentCueRbLocalDeleted,
    contentCueRbLocalUsnID,
    contentFileContentID,
    contentFileUUID,
    contentFileRbDataStatus,
    contentFileRbFileHashDirty,
    contentFileRbFileSizeDirty,
    contentFileRbLocalDataStatus,
    contentFileRbLocalDeleted,
    contentFileRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority,
    contentFileRbLocalUsnID,
    djmdActiveCensorContentID,
    djmdActiveCensorContentUUID,
    djmdActiveCensorUUID,
    djmdActiveCensorRbDataStatus,
    djmdActiveCensorRbLocalDataStatus,
    djmdActiveCensorRbLocalDeleted,
    djmdActiveCensorRbLocalUsnID,
    djmdAlbumAlbumArtistID,
    djmdAlbumName,
    djmdAlbumUUID,
    djmdAlbumRbDataStatus,
    djmdAlbumRbLocalDataStatus,
    djmdAlbumRbLocalDeleted,
    djmdAlbumRbLocalUsnID,
    djmdArtistName,
    djmdArtistUUID,
    djmdArtistRbDataStatus,
    djmdArtistRbLocalDataStatus,
    djmdArtistRbLocalDeleted,
    djmdArtistRbLocalUsnID,
    djmdCategoryUUID,
    djmdCategoryRbDataStatus,
    djmdCategoryRbLocalDataStatus,
    djmdCategoryRbLocalDeleted,
    djmdCategoryRbLocalUsnID,
    djmdCloudPropertyUUID,
    djmdCloudPropertyRbDataStatus,
    djmdCloudPropertyRbLocalDataStatus,
    djmdCloudPropertyRbLocalDeleted,
    djmdCloudPropertyRbLocalUsnID,
    djmdColorUUID,
    djmdColorRbDataStatus,
    djmdColorRbLocalDataStatus,
    djmdColorRbLocalDeleted,
    djmdColorRbLocalUsnID,
    djmdContentAlbumID,
    djmdContentArtistID,
    djmdContentComposerID,
    djmdContentGenreID,
    djmdContentKeyID,
    djmdContentLabelID,
    djmdContentMasterDBIDMasterSongID,
    djmdContentOrgArtistID,
    djmdContentRemixerID,
    djmdContentUUID,
    djmdContentRbDataStatus,
    djmdContentRbLocalDataStatus,
    djmdContentRbLocalDeleted,
    djmdContentRbLocalDeletedBitDepth,
    djmdContentRbLocalDeletedBitRate,
    djmdContentRbLocalDeletedFileType,
    djmdContentRbLocalDeletedServiceID,
    djmdContentRbLocalUsnID,
    djmdCueContentIDRbLocalDeleted,
    djmdCueContentUUID,
    djmdCueUUID,
    djmdCueRbDataStatus,
    djmdCueRbLocalDataStatus,
    djmdCueRbLocalDeleted,
    djmdCueRbLocalUsnID,
    djmdDeviceUUID,
    djmdDeviceRbDataStatus,
    djmdDeviceRbLocalDataStatus,
    djmdDeviceRbLocalDeleted,
    djmdDeviceRbLocalUsnID,
    djmdGenreName,
    djmdGenreUUID,
    djmdGenreRbDataStatus,
    djmdGenreRbLocalDataStatus,
    djmdGenreRbLocalDeleted,
    djmdGenreRbLocalUsnID,
    djmdHistoryName,
    djmdHistoryParentID,
    djmdHistoryUUID,
    djmdHistoryRbDataStatus,
    djmdHistoryRbLocalDataStatus,
    djmdHistoryRbLocalDeleted,
    djmdHistoryRbLocalUsnID,
    djmdHotCueBanklistName,
    djmdHotCueBanklistParentID,
    djmdHotCueBanklistUUID,
    djmdHotCueBanklistRbDataStatus,
    djmdHotCueBanklistRbLocalDataStatus,
    djmdHotCueBanklistRbLocalDeleted,
    djmdHotCueBanklistRbLocalUsnID,
    djmdKeyScaleName,
    djmdKeyUUID,
    djmdKeyRbDataStatus,
    djmdKeyRbLocalDataStatus,
    djmdKeyRbLocalDeleted,
    djmdKeyRbLocalUsnID,
    djmdLabelName,
    djmdLabelUUID,
    djmdLabelRbDataStatus,
    djmdLabelRbLocalDataStatus,
    djmdLabelRbLocalDeleted,
    djmdLabelRbLocalUsnID,
    djmdMenuItemsUUID,
    djmdMenuItemsRbDataStatus,
    djmdMenuItemsRbLocalDataStatus,
    djmdMenuItemsRbLocalDeleted,
    djmdMenuItemsRbLocalUsnID,
    djmdMixerParamContentIDRbLocalDeleted,
    djmdMixerParamUUID,
    djmdMixerParamRbDataStatus,
    djmdMixerParamRbLocalDataStatus,
    djmdMixerParamRbLocalDeleted,
    djmdMixerParamRbLocalUsnID,
    djmdMyTagParentID,
    djmdMyTagSeq,
    djmdMyTagUUID,
    djmdMyTagRbDataStatus,
    djmdMyTagRbLocalDataStatus,
    djmdMyTagRbLocalDeleted,
    djmdMyTagRbLocalUsnID,
    djmdPlaylistAttribute,
    djmdPlaylistName,
    djmdPlaylistParentID,
    djmdPlaylistSeq,
    djmdPlaylistUUID,
    djmdPlaylistRbDataStatus,
    djmdPlaylistRbLocalDataStatus,
    djmdPlaylistRbLocalDeleted,
    djmdPlaylistRbLocalUsnID,
    djmdRecommendLikeContentID1ContentID2,
    djmdRecommendLikeContentID2,
    djmdRecommendLikeUUID,
    djmdRecommendLikeRbDataStatus,
    djmdRecommendLikeRbLocalDataStatus,
    djmdRecommendLikeRbLocalDeleted,
    djmdRecommendLikeRbLocalUsnID,
    djmdRelatedTracksName,
    djmdRelatedTracksParentID,
    djmdRelatedTracksSeq,
    djmdRelatedTracksUUID,
    djmdRelatedTracksRbDataStatus,
    djmdRelatedTracksRbLocalDataStatus,
    djmdRelatedTracksRbLocalDeleted,
    djmdRelatedTracksRbLocalUsnID,
    djmdSamplerName,
    djmdSamplerParentID,
    djmdSamplerSeq,
    djmdSamplerUUID,
    djmdSamplerRbDataStatus,
    djmdSamplerRbLocalDataStatus,
    djmdSamplerRbLocalDeleted,
    djmdSamplerRbLocalUsnID,
    djmdSongHistoryContentIDRbLocalDeleted,
    djmdSongHistoryHistoryID,
    djmdSongHistoryUUID,
    djmdSongHistoryRbDataStatus,
    djmdSongHistoryRbLocalDataStatus,
    djmdSongHistoryRbLocalDeleted,
    djmdSongHistoryRbLocalUsnID,
    djmdSongHotCueBanklistContentID,
    djmdSongHotCueBanklistHotCueBanklistID,
    djmdSongHotCueBanklistHotCueBanklistUUID,
    djmdSongHotCueBanklistUUID,
    djmdSongHotCueBanklistRbDataStatus,
    djmdSongHotCueBanklistRbLocalDataStatus,
    djmdSongHotCueBanklistRbLocalDeleted,
    djmdSongHotCueBanklistRbLocalUsnID,
    djmdSongMyTagContentIDRbLocalDeleted,
    djmdSongMyTagMyTagID,
    djmdSongMyTagMyTagIDRbLocalDeletedID,
    djmdSongMyTagUUID,
    djmdSongMyTagRbDataStatus,
    djmdSongMyTagRbLocalDataStatus,
    djmdSongMyTagRbLocalDeleted,
    djmdSongMyTagRbLocalUsnID,
    djmdSongPlaylistContentIDRbLocalDeleted,
    djmdSongPlaylistPlaylistID,
    djmdSongPlaylistPlaylistIDID,
    djmdSongPlaylistUUID,
    djmdSongPlaylistRbDataStatus,
    djmdSongPlaylistRbLocalDataStatus,
    djmdSongPlaylistRbLocalDeleted,
    djmdSongPlaylistRbLocalUsnID,
    djmdSongRelatedTracksContentID,
    djmdSongRelatedTracksRelatedTracksID,
    djmdSongRelatedTracksUUID,
    djmdSongRelatedTracksRbDataStatus,
    djmdSongRelatedTracksRbLocalDataStatus,
    djmdSongRelatedTracksRbLocalDeleted,
    djmdSongRelatedTracksRbLocalUsnID,
    djmdSongSamplerContentID,
    djmdSongSamplerSamplerID,
    djmdSongSamplerUUID,
    djmdSongSamplerRbDataStatus,
    djmdSongSamplerRbLocalDataStatus,
    djmdSongSamplerRbLocalDeleted,
    djmdSongSamplerRbLocalUsnID,
    djmdSongTagListContentID,
    djmdSongTagListUUID,
    djmdSongTagListRbDataStatus,
    djmdSongTagListRbLocalDataStatus,
    djmdSongTagListRbLocalDeleted,
    djmdSongTagListRbLocalUsnID,
    djmdSortUUID,
    djmdSortRbDataStatus,
    djmdSortRbLocalDataStatus,
    djmdSortRbLocalDeleted,
    djmdSortRbLocalUsnID,
    hotCueBanklistCueHotCueBanklistID,
    hotCueBanklistCueUUID,
    hotCueBanklistCueRbCueCount,
    hotCueBanklistCueRbDataStatus,
    hotCueBanklistCueRbLocalDataStatus,
    hotCueBanklistCueRbLocalDeleted,
    hotCueBanklistCueRbLocalUsnID,
    imageFileTableNameTargetID,
    imageFileTableNameTargetUUID,
    imageFileTableNameTargetUUIDID,
    imageFileUUID,
    imageFileRbDataStatus,
    imageFileRbFileHashDirty,
    imageFileRbFileSizeDirty,
    imageFileRbLocalDataStatus,
    imageFileRbLocalDeleted,
    imageFileRbLocalDeletedRbInProgressRbLocalFileStatusRbProcessTypeRbPriority,
    imageFileRbLocalUsnID,
    settingFileUUID,
    settingFileRbDataStatus,
    settingFileRbFileHashDirty,
    settingFileRbFileSizeDirty,
    settingFileRbLocalDataStatus,
    settingFileRbLocalDeleted,
    settingFileRbLocalUsnID,
    uuidIDMapUUID,
    uuidIDMapRbDataStatus,
    uuidIDMapRbLocalDataStatus,
    uuidIDMapRbLocalDeleted,
    uuidIDMapRbLocalUsnID,
  ];
}

typedef $AgentNotificationCreateCompanionBuilder =
    AgentNotificationCompanion Function({
      Value<int> id,
      Value<int?> graphicArea,
      Value<int?> textArea,
      Value<int?> osNotification,
      Value<String?> startTEXT,
      Value<String?> endTEXT,
      Value<String?> displayTEXT,
      Value<int?> interval,
      Value<String?> category,
      Value<String?> categoryColor,
      Value<String?> title,
      Value<String?> description,
      Value<String?> url,
      Value<String?> image,
      Value<String?> imagePath,
      Value<int?> readStatus,
      Value<String?> lastDisplayedTEXT,
      required String createdAt,
      required String updatedAt,
    });
typedef $AgentNotificationUpdateCompanionBuilder =
    AgentNotificationCompanion Function({
      Value<int> id,
      Value<int?> graphicArea,
      Value<int?> textArea,
      Value<int?> osNotification,
      Value<String?> startTEXT,
      Value<String?> endTEXT,
      Value<String?> displayTEXT,
      Value<int?> interval,
      Value<String?> category,
      Value<String?> categoryColor,
      Value<String?> title,
      Value<String?> description,
      Value<String?> url,
      Value<String?> image,
      Value<String?> imagePath,
      Value<int?> readStatus,
      Value<String?> lastDisplayedTEXT,
      Value<String> createdAt,
      Value<String> updatedAt,
    });

class $AgentNotificationFilterComposer
    extends Composer<_$RekordboxDatabase, AgentNotification> {
  $AgentNotificationFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get graphicArea => $composableBuilder(
    column: $table.graphicArea,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get textArea => $composableBuilder(
    column: $table.textArea,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get osNotification => $composableBuilder(
    column: $table.osNotification,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get startTEXT => $composableBuilder(
    column: $table.startTEXT,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get endTEXT => $composableBuilder(
    column: $table.endTEXT,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get displayTEXT => $composableBuilder(
    column: $table.displayTEXT,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get interval => $composableBuilder(
    column: $table.interval,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get categoryColor => $composableBuilder(
    column: $table.categoryColor,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get url => $composableBuilder(
    column: $table.url,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get image => $composableBuilder(
    column: $table.image,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get readStatus => $composableBuilder(
    column: $table.readStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get lastDisplayedTEXT => $composableBuilder(
    column: $table.lastDisplayedTEXT,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $AgentNotificationOrderingComposer
    extends Composer<_$RekordboxDatabase, AgentNotification> {
  $AgentNotificationOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get graphicArea => $composableBuilder(
    column: $table.graphicArea,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get textArea => $composableBuilder(
    column: $table.textArea,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get osNotification => $composableBuilder(
    column: $table.osNotification,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get startTEXT => $composableBuilder(
    column: $table.startTEXT,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get endTEXT => $composableBuilder(
    column: $table.endTEXT,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get displayTEXT => $composableBuilder(
    column: $table.displayTEXT,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get interval => $composableBuilder(
    column: $table.interval,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get category => $composableBuilder(
    column: $table.category,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get categoryColor => $composableBuilder(
    column: $table.categoryColor,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get url => $composableBuilder(
    column: $table.url,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get image => $composableBuilder(
    column: $table.image,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get readStatus => $composableBuilder(
    column: $table.readStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get lastDisplayedTEXT => $composableBuilder(
    column: $table.lastDisplayedTEXT,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $AgentNotificationAnnotationComposer
    extends Composer<_$RekordboxDatabase, AgentNotification> {
  $AgentNotificationAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get graphicArea => $composableBuilder(
    column: $table.graphicArea,
    builder: (column) => column,
  );

  GeneratedColumn<int> get textArea =>
      $composableBuilder(column: $table.textArea, builder: (column) => column);

  GeneratedColumn<int> get osNotification => $composableBuilder(
    column: $table.osNotification,
    builder: (column) => column,
  );

  GeneratedColumn<String> get startTEXT =>
      $composableBuilder(column: $table.startTEXT, builder: (column) => column);

  GeneratedColumn<String> get endTEXT =>
      $composableBuilder(column: $table.endTEXT, builder: (column) => column);

  GeneratedColumn<String> get displayTEXT => $composableBuilder(
    column: $table.displayTEXT,
    builder: (column) => column,
  );

  GeneratedColumn<int> get interval =>
      $composableBuilder(column: $table.interval, builder: (column) => column);

  GeneratedColumn<String> get category =>
      $composableBuilder(column: $table.category, builder: (column) => column);

  GeneratedColumn<String> get categoryColor => $composableBuilder(
    column: $table.categoryColor,
    builder: (column) => column,
  );

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get description => $composableBuilder(
    column: $table.description,
    builder: (column) => column,
  );

  GeneratedColumn<String> get url =>
      $composableBuilder(column: $table.url, builder: (column) => column);

  GeneratedColumn<String> get image =>
      $composableBuilder(column: $table.image, builder: (column) => column);

  GeneratedColumn<String> get imagePath =>
      $composableBuilder(column: $table.imagePath, builder: (column) => column);

  GeneratedColumn<int> get readStatus => $composableBuilder(
    column: $table.readStatus,
    builder: (column) => column,
  );

  GeneratedColumn<String> get lastDisplayedTEXT => $composableBuilder(
    column: $table.lastDisplayedTEXT,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $AgentNotificationTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          AgentNotification,
          AgentNotificationData,
          $AgentNotificationFilterComposer,
          $AgentNotificationOrderingComposer,
          $AgentNotificationAnnotationComposer,
          $AgentNotificationCreateCompanionBuilder,
          $AgentNotificationUpdateCompanionBuilder,
          (
            AgentNotificationData,
            BaseReferences<
              _$RekordboxDatabase,
              AgentNotification,
              AgentNotificationData
            >,
          ),
          AgentNotificationData,
          PrefetchHooks Function()
        > {
  $AgentNotificationTableManager(
    _$RekordboxDatabase db,
    AgentNotification table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $AgentNotificationFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $AgentNotificationOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $AgentNotificationAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<int?> graphicArea = const Value.absent(),
                Value<int?> textArea = const Value.absent(),
                Value<int?> osNotification = const Value.absent(),
                Value<String?> startTEXT = const Value.absent(),
                Value<String?> endTEXT = const Value.absent(),
                Value<String?> displayTEXT = const Value.absent(),
                Value<int?> interval = const Value.absent(),
                Value<String?> category = const Value.absent(),
                Value<String?> categoryColor = const Value.absent(),
                Value<String?> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<String?> url = const Value.absent(),
                Value<String?> image = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> readStatus = const Value.absent(),
                Value<String?> lastDisplayedTEXT = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
              }) => AgentNotificationCompanion(
                id: id,
                graphicArea: graphicArea,
                textArea: textArea,
                osNotification: osNotification,
                startTEXT: startTEXT,
                endTEXT: endTEXT,
                displayTEXT: displayTEXT,
                interval: interval,
                category: category,
                categoryColor: categoryColor,
                title: title,
                description: description,
                url: url,
                image: image,
                imagePath: imagePath,
                readStatus: readStatus,
                lastDisplayedTEXT: lastDisplayedTEXT,
                createdAt: createdAt,
                updatedAt: updatedAt,
              ),
          createCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<int?> graphicArea = const Value.absent(),
                Value<int?> textArea = const Value.absent(),
                Value<int?> osNotification = const Value.absent(),
                Value<String?> startTEXT = const Value.absent(),
                Value<String?> endTEXT = const Value.absent(),
                Value<String?> displayTEXT = const Value.absent(),
                Value<int?> interval = const Value.absent(),
                Value<String?> category = const Value.absent(),
                Value<String?> categoryColor = const Value.absent(),
                Value<String?> title = const Value.absent(),
                Value<String?> description = const Value.absent(),
                Value<String?> url = const Value.absent(),
                Value<String?> image = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> readStatus = const Value.absent(),
                Value<String?> lastDisplayedTEXT = const Value.absent(),
                required String createdAt,
                required String updatedAt,
              }) => AgentNotificationCompanion.insert(
                id: id,
                graphicArea: graphicArea,
                textArea: textArea,
                osNotification: osNotification,
                startTEXT: startTEXT,
                endTEXT: endTEXT,
                displayTEXT: displayTEXT,
                interval: interval,
                category: category,
                categoryColor: categoryColor,
                title: title,
                description: description,
                url: url,
                image: image,
                imagePath: imagePath,
                readStatus: readStatus,
                lastDisplayedTEXT: lastDisplayedTEXT,
                createdAt: createdAt,
                updatedAt: updatedAt,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $AgentNotificationProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      AgentNotification,
      AgentNotificationData,
      $AgentNotificationFilterComposer,
      $AgentNotificationOrderingComposer,
      $AgentNotificationAnnotationComposer,
      $AgentNotificationCreateCompanionBuilder,
      $AgentNotificationUpdateCompanionBuilder,
      (
        AgentNotificationData,
        BaseReferences<
          _$RekordboxDatabase,
          AgentNotification,
          AgentNotificationData
        >,
      ),
      AgentNotificationData,
      PrefetchHooks Function()
    >;
typedef $AgentNotificationLogCreateCompanionBuilder =
    AgentNotificationLogCompanion Function({
      Value<int> id,
      Value<String?> gigyaUid,
      Value<int?> eventDate,
      Value<String?> reportedTEXT,
      Value<int?> kind,
      Value<int?> value,
      Value<int?> notificationId,
      Value<String?> link,
      required String createdAt,
      required String updatedAt,
    });
typedef $AgentNotificationLogUpdateCompanionBuilder =
    AgentNotificationLogCompanion Function({
      Value<int> id,
      Value<String?> gigyaUid,
      Value<int?> eventDate,
      Value<String?> reportedTEXT,
      Value<int?> kind,
      Value<int?> value,
      Value<int?> notificationId,
      Value<String?> link,
      Value<String> createdAt,
      Value<String> updatedAt,
    });

class $AgentNotificationLogFilterComposer
    extends Composer<_$RekordboxDatabase, AgentNotificationLog> {
  $AgentNotificationLogFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get gigyaUid => $composableBuilder(
    column: $table.gigyaUid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get eventDate => $composableBuilder(
    column: $table.eventDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reportedTEXT => $composableBuilder(
    column: $table.reportedTEXT,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get kind => $composableBuilder(
    column: $table.kind,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get value => $composableBuilder(
    column: $table.value,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get notificationId => $composableBuilder(
    column: $table.notificationId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get link => $composableBuilder(
    column: $table.link,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $AgentNotificationLogOrderingComposer
    extends Composer<_$RekordboxDatabase, AgentNotificationLog> {
  $AgentNotificationLogOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<int> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get gigyaUid => $composableBuilder(
    column: $table.gigyaUid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get eventDate => $composableBuilder(
    column: $table.eventDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reportedTEXT => $composableBuilder(
    column: $table.reportedTEXT,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get kind => $composableBuilder(
    column: $table.kind,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get value => $composableBuilder(
    column: $table.value,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get notificationId => $composableBuilder(
    column: $table.notificationId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get link => $composableBuilder(
    column: $table.link,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $AgentNotificationLogAnnotationComposer
    extends Composer<_$RekordboxDatabase, AgentNotificationLog> {
  $AgentNotificationLogAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<int> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get gigyaUid =>
      $composableBuilder(column: $table.gigyaUid, builder: (column) => column);

  GeneratedColumn<int> get eventDate =>
      $composableBuilder(column: $table.eventDate, builder: (column) => column);

  GeneratedColumn<String> get reportedTEXT => $composableBuilder(
    column: $table.reportedTEXT,
    builder: (column) => column,
  );

  GeneratedColumn<int> get kind =>
      $composableBuilder(column: $table.kind, builder: (column) => column);

  GeneratedColumn<int> get value =>
      $composableBuilder(column: $table.value, builder: (column) => column);

  GeneratedColumn<int> get notificationId => $composableBuilder(
    column: $table.notificationId,
    builder: (column) => column,
  );

  GeneratedColumn<String> get link =>
      $composableBuilder(column: $table.link, builder: (column) => column);

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $AgentNotificationLogTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          AgentNotificationLog,
          AgentNotificationLogData,
          $AgentNotificationLogFilterComposer,
          $AgentNotificationLogOrderingComposer,
          $AgentNotificationLogAnnotationComposer,
          $AgentNotificationLogCreateCompanionBuilder,
          $AgentNotificationLogUpdateCompanionBuilder,
          (
            AgentNotificationLogData,
            BaseReferences<
              _$RekordboxDatabase,
              AgentNotificationLog,
              AgentNotificationLogData
            >,
          ),
          AgentNotificationLogData,
          PrefetchHooks Function()
        > {
  $AgentNotificationLogTableManager(
    _$RekordboxDatabase db,
    AgentNotificationLog table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $AgentNotificationLogFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $AgentNotificationLogOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $AgentNotificationLogAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<String?> gigyaUid = const Value.absent(),
                Value<int?> eventDate = const Value.absent(),
                Value<String?> reportedTEXT = const Value.absent(),
                Value<int?> kind = const Value.absent(),
                Value<int?> value = const Value.absent(),
                Value<int?> notificationId = const Value.absent(),
                Value<String?> link = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
              }) => AgentNotificationLogCompanion(
                id: id,
                gigyaUid: gigyaUid,
                eventDate: eventDate,
                reportedTEXT: reportedTEXT,
                kind: kind,
                value: value,
                notificationId: notificationId,
                link: link,
                createdAt: createdAt,
                updatedAt: updatedAt,
              ),
          createCompanionCallback:
              ({
                Value<int> id = const Value.absent(),
                Value<String?> gigyaUid = const Value.absent(),
                Value<int?> eventDate = const Value.absent(),
                Value<String?> reportedTEXT = const Value.absent(),
                Value<int?> kind = const Value.absent(),
                Value<int?> value = const Value.absent(),
                Value<int?> notificationId = const Value.absent(),
                Value<String?> link = const Value.absent(),
                required String createdAt,
                required String updatedAt,
              }) => AgentNotificationLogCompanion.insert(
                id: id,
                gigyaUid: gigyaUid,
                eventDate: eventDate,
                reportedTEXT: reportedTEXT,
                kind: kind,
                value: value,
                notificationId: notificationId,
                link: link,
                createdAt: createdAt,
                updatedAt: updatedAt,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $AgentNotificationLogProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      AgentNotificationLog,
      AgentNotificationLogData,
      $AgentNotificationLogFilterComposer,
      $AgentNotificationLogOrderingComposer,
      $AgentNotificationLogAnnotationComposer,
      $AgentNotificationLogCreateCompanionBuilder,
      $AgentNotificationLogUpdateCompanionBuilder,
      (
        AgentNotificationLogData,
        BaseReferences<
          _$RekordboxDatabase,
          AgentNotificationLog,
          AgentNotificationLogData
        >,
      ),
      AgentNotificationLogData,
      PrefetchHooks Function()
    >;
typedef $AgentRegistryCreateCompanionBuilder =
    AgentRegistryCompanion Function({
      Value<String?> registryId,
      Value<String?> id1,
      Value<String?> id2,
      Value<int?> int1,
      Value<int?> int2,
      Value<String?> str1,
      Value<String?> str2,
      Value<String?> date1,
      Value<String?> date2,
      Value<String?> text1,
      Value<String?> text2,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $AgentRegistryUpdateCompanionBuilder =
    AgentRegistryCompanion Function({
      Value<String?> registryId,
      Value<String?> id1,
      Value<String?> id2,
      Value<int?> int1,
      Value<int?> int2,
      Value<String?> str1,
      Value<String?> str2,
      Value<String?> date1,
      Value<String?> date2,
      Value<String?> text1,
      Value<String?> text2,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $AgentRegistryFilterComposer
    extends Composer<_$RekordboxDatabase, AgentRegistry> {
  $AgentRegistryFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get registryId => $composableBuilder(
    column: $table.registryId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get id1 => $composableBuilder(
    column: $table.id1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get id2 => $composableBuilder(
    column: $table.id2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get int1 => $composableBuilder(
    column: $table.int1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get int2 => $composableBuilder(
    column: $table.int2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get str1 => $composableBuilder(
    column: $table.str1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get str2 => $composableBuilder(
    column: $table.str2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get date1 => $composableBuilder(
    column: $table.date1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get date2 => $composableBuilder(
    column: $table.date2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get text1 => $composableBuilder(
    column: $table.text1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get text2 => $composableBuilder(
    column: $table.text2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $AgentRegistryOrderingComposer
    extends Composer<_$RekordboxDatabase, AgentRegistry> {
  $AgentRegistryOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get registryId => $composableBuilder(
    column: $table.registryId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get id1 => $composableBuilder(
    column: $table.id1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get id2 => $composableBuilder(
    column: $table.id2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get int1 => $composableBuilder(
    column: $table.int1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get int2 => $composableBuilder(
    column: $table.int2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get str1 => $composableBuilder(
    column: $table.str1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get str2 => $composableBuilder(
    column: $table.str2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get date1 => $composableBuilder(
    column: $table.date1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get date2 => $composableBuilder(
    column: $table.date2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get text1 => $composableBuilder(
    column: $table.text1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get text2 => $composableBuilder(
    column: $table.text2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $AgentRegistryAnnotationComposer
    extends Composer<_$RekordboxDatabase, AgentRegistry> {
  $AgentRegistryAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get registryId => $composableBuilder(
    column: $table.registryId,
    builder: (column) => column,
  );

  GeneratedColumn<String> get id1 =>
      $composableBuilder(column: $table.id1, builder: (column) => column);

  GeneratedColumn<String> get id2 =>
      $composableBuilder(column: $table.id2, builder: (column) => column);

  GeneratedColumn<int> get int1 =>
      $composableBuilder(column: $table.int1, builder: (column) => column);

  GeneratedColumn<int> get int2 =>
      $composableBuilder(column: $table.int2, builder: (column) => column);

  GeneratedColumn<String> get str1 =>
      $composableBuilder(column: $table.str1, builder: (column) => column);

  GeneratedColumn<String> get str2 =>
      $composableBuilder(column: $table.str2, builder: (column) => column);

  GeneratedColumn<String> get date1 =>
      $composableBuilder(column: $table.date1, builder: (column) => column);

  GeneratedColumn<String> get date2 =>
      $composableBuilder(column: $table.date2, builder: (column) => column);

  GeneratedColumn<String> get text1 =>
      $composableBuilder(column: $table.text1, builder: (column) => column);

  GeneratedColumn<String> get text2 =>
      $composableBuilder(column: $table.text2, builder: (column) => column);

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $AgentRegistryTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          AgentRegistry,
          AgentRegistryData,
          $AgentRegistryFilterComposer,
          $AgentRegistryOrderingComposer,
          $AgentRegistryAnnotationComposer,
          $AgentRegistryCreateCompanionBuilder,
          $AgentRegistryUpdateCompanionBuilder,
          (
            AgentRegistryData,
            BaseReferences<
              _$RekordboxDatabase,
              AgentRegistry,
              AgentRegistryData
            >,
          ),
          AgentRegistryData,
          PrefetchHooks Function()
        > {
  $AgentRegistryTableManager(_$RekordboxDatabase db, AgentRegistry table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $AgentRegistryFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $AgentRegistryOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $AgentRegistryAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> registryId = const Value.absent(),
                Value<String?> id1 = const Value.absent(),
                Value<String?> id2 = const Value.absent(),
                Value<int?> int1 = const Value.absent(),
                Value<int?> int2 = const Value.absent(),
                Value<String?> str1 = const Value.absent(),
                Value<String?> str2 = const Value.absent(),
                Value<String?> date1 = const Value.absent(),
                Value<String?> date2 = const Value.absent(),
                Value<String?> text1 = const Value.absent(),
                Value<String?> text2 = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => AgentRegistryCompanion(
                registryId: registryId,
                id1: id1,
                id2: id2,
                int1: int1,
                int2: int2,
                str1: str1,
                str2: str2,
                date1: date1,
                date2: date2,
                text1: text1,
                text2: text2,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> registryId = const Value.absent(),
                Value<String?> id1 = const Value.absent(),
                Value<String?> id2 = const Value.absent(),
                Value<int?> int1 = const Value.absent(),
                Value<int?> int2 = const Value.absent(),
                Value<String?> str1 = const Value.absent(),
                Value<String?> str2 = const Value.absent(),
                Value<String?> date1 = const Value.absent(),
                Value<String?> date2 = const Value.absent(),
                Value<String?> text1 = const Value.absent(),
                Value<String?> text2 = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => AgentRegistryCompanion.insert(
                registryId: registryId,
                id1: id1,
                id2: id2,
                int1: int1,
                int2: int2,
                str1: str1,
                str2: str2,
                date1: date1,
                date2: date2,
                text1: text1,
                text2: text2,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $AgentRegistryProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      AgentRegistry,
      AgentRegistryData,
      $AgentRegistryFilterComposer,
      $AgentRegistryOrderingComposer,
      $AgentRegistryAnnotationComposer,
      $AgentRegistryCreateCompanionBuilder,
      $AgentRegistryUpdateCompanionBuilder,
      (
        AgentRegistryData,
        BaseReferences<_$RekordboxDatabase, AgentRegistry, AgentRegistryData>,
      ),
      AgentRegistryData,
      PrefetchHooks Function()
    >;
typedef $CloudAgentRegistryCreateCompanionBuilder =
    CloudAgentRegistryCompanion Function({
      Value<String?> id,
      Value<int?> int1,
      Value<int?> int2,
      Value<String?> str1,
      Value<String?> str2,
      Value<String?> date1,
      Value<String?> date2,
      Value<String?> text1,
      Value<String?> text2,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $CloudAgentRegistryUpdateCompanionBuilder =
    CloudAgentRegistryCompanion Function({
      Value<String?> id,
      Value<int?> int1,
      Value<int?> int2,
      Value<String?> str1,
      Value<String?> str2,
      Value<String?> date1,
      Value<String?> date2,
      Value<String?> text1,
      Value<String?> text2,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $CloudAgentRegistryFilterComposer
    extends Composer<_$RekordboxDatabase, CloudAgentRegistry> {
  $CloudAgentRegistryFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get int1 => $composableBuilder(
    column: $table.int1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get int2 => $composableBuilder(
    column: $table.int2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get str1 => $composableBuilder(
    column: $table.str1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get str2 => $composableBuilder(
    column: $table.str2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get date1 => $composableBuilder(
    column: $table.date1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get date2 => $composableBuilder(
    column: $table.date2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get text1 => $composableBuilder(
    column: $table.text1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get text2 => $composableBuilder(
    column: $table.text2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $CloudAgentRegistryOrderingComposer
    extends Composer<_$RekordboxDatabase, CloudAgentRegistry> {
  $CloudAgentRegistryOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get int1 => $composableBuilder(
    column: $table.int1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get int2 => $composableBuilder(
    column: $table.int2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get str1 => $composableBuilder(
    column: $table.str1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get str2 => $composableBuilder(
    column: $table.str2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get date1 => $composableBuilder(
    column: $table.date1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get date2 => $composableBuilder(
    column: $table.date2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get text1 => $composableBuilder(
    column: $table.text1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get text2 => $composableBuilder(
    column: $table.text2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $CloudAgentRegistryAnnotationComposer
    extends Composer<_$RekordboxDatabase, CloudAgentRegistry> {
  $CloudAgentRegistryAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get int1 =>
      $composableBuilder(column: $table.int1, builder: (column) => column);

  GeneratedColumn<int> get int2 =>
      $composableBuilder(column: $table.int2, builder: (column) => column);

  GeneratedColumn<String> get str1 =>
      $composableBuilder(column: $table.str1, builder: (column) => column);

  GeneratedColumn<String> get str2 =>
      $composableBuilder(column: $table.str2, builder: (column) => column);

  GeneratedColumn<String> get date1 =>
      $composableBuilder(column: $table.date1, builder: (column) => column);

  GeneratedColumn<String> get date2 =>
      $composableBuilder(column: $table.date2, builder: (column) => column);

  GeneratedColumn<String> get text1 =>
      $composableBuilder(column: $table.text1, builder: (column) => column);

  GeneratedColumn<String> get text2 =>
      $composableBuilder(column: $table.text2, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $CloudAgentRegistryTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          CloudAgentRegistry,
          CloudAgentRegistryData,
          $CloudAgentRegistryFilterComposer,
          $CloudAgentRegistryOrderingComposer,
          $CloudAgentRegistryAnnotationComposer,
          $CloudAgentRegistryCreateCompanionBuilder,
          $CloudAgentRegistryUpdateCompanionBuilder,
          (
            CloudAgentRegistryData,
            BaseReferences<
              _$RekordboxDatabase,
              CloudAgentRegistry,
              CloudAgentRegistryData
            >,
          ),
          CloudAgentRegistryData,
          PrefetchHooks Function()
        > {
  $CloudAgentRegistryTableManager(
    _$RekordboxDatabase db,
    CloudAgentRegistry table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $CloudAgentRegistryFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $CloudAgentRegistryOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $CloudAgentRegistryAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> int1 = const Value.absent(),
                Value<int?> int2 = const Value.absent(),
                Value<String?> str1 = const Value.absent(),
                Value<String?> str2 = const Value.absent(),
                Value<String?> date1 = const Value.absent(),
                Value<String?> date2 = const Value.absent(),
                Value<String?> text1 = const Value.absent(),
                Value<String?> text2 = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => CloudAgentRegistryCompanion(
                id: id,
                int1: int1,
                int2: int2,
                str1: str1,
                str2: str2,
                date1: date1,
                date2: date2,
                text1: text1,
                text2: text2,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> int1 = const Value.absent(),
                Value<int?> int2 = const Value.absent(),
                Value<String?> str1 = const Value.absent(),
                Value<String?> str2 = const Value.absent(),
                Value<String?> date1 = const Value.absent(),
                Value<String?> date2 = const Value.absent(),
                Value<String?> text1 = const Value.absent(),
                Value<String?> text2 = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => CloudAgentRegistryCompanion.insert(
                id: id,
                int1: int1,
                int2: int2,
                str1: str1,
                str2: str2,
                date1: date1,
                date2: date2,
                text1: text1,
                text2: text2,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $CloudAgentRegistryProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      CloudAgentRegistry,
      CloudAgentRegistryData,
      $CloudAgentRegistryFilterComposer,
      $CloudAgentRegistryOrderingComposer,
      $CloudAgentRegistryAnnotationComposer,
      $CloudAgentRegistryCreateCompanionBuilder,
      $CloudAgentRegistryUpdateCompanionBuilder,
      (
        CloudAgentRegistryData,
        BaseReferences<
          _$RekordboxDatabase,
          CloudAgentRegistry,
          CloudAgentRegistryData
        >,
      ),
      CloudAgentRegistryData,
      PrefetchHooks Function()
    >;
typedef $ContentActiveCensorCreateCompanionBuilder =
    ContentActiveCensorCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> activeCensors,
      Value<int?> rbActivecensorCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $ContentActiveCensorUpdateCompanionBuilder =
    ContentActiveCensorCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> activeCensors,
      Value<int?> rbActivecensorCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $ContentActiveCensorFilterComposer
    extends Composer<_$RekordboxDatabase, ContentActiveCensor> {
  $ContentActiveCensorFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get activeCensors => $composableBuilder(
    column: $table.activeCensors,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbActivecensorCount => $composableBuilder(
    column: $table.rbActivecensorCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $ContentActiveCensorOrderingComposer
    extends Composer<_$RekordboxDatabase, ContentActiveCensor> {
  $ContentActiveCensorOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get activeCensors => $composableBuilder(
    column: $table.activeCensors,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbActivecensorCount => $composableBuilder(
    column: $table.rbActivecensorCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $ContentActiveCensorAnnotationComposer
    extends Composer<_$RekordboxDatabase, ContentActiveCensor> {
  $ContentActiveCensorAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<String> get activeCensors => $composableBuilder(
    column: $table.activeCensors,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbActivecensorCount => $composableBuilder(
    column: $table.rbActivecensorCount,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $ContentActiveCensorTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          ContentActiveCensor,
          ContentActiveCensorData,
          $ContentActiveCensorFilterComposer,
          $ContentActiveCensorOrderingComposer,
          $ContentActiveCensorAnnotationComposer,
          $ContentActiveCensorCreateCompanionBuilder,
          $ContentActiveCensorUpdateCompanionBuilder,
          (
            ContentActiveCensorData,
            BaseReferences<
              _$RekordboxDatabase,
              ContentActiveCensor,
              ContentActiveCensorData
            >,
          ),
          ContentActiveCensorData,
          PrefetchHooks Function()
        > {
  $ContentActiveCensorTableManager(
    _$RekordboxDatabase db,
    ContentActiveCensor table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $ContentActiveCensorFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $ContentActiveCensorOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $ContentActiveCensorAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> activeCensors = const Value.absent(),
                Value<int?> rbActivecensorCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ContentActiveCensorCompanion(
                id: id,
                contentID: contentID,
                activeCensors: activeCensors,
                rbActivecensorCount: rbActivecensorCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> activeCensors = const Value.absent(),
                Value<int?> rbActivecensorCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => ContentActiveCensorCompanion.insert(
                id: id,
                contentID: contentID,
                activeCensors: activeCensors,
                rbActivecensorCount: rbActivecensorCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $ContentActiveCensorProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      ContentActiveCensor,
      ContentActiveCensorData,
      $ContentActiveCensorFilterComposer,
      $ContentActiveCensorOrderingComposer,
      $ContentActiveCensorAnnotationComposer,
      $ContentActiveCensorCreateCompanionBuilder,
      $ContentActiveCensorUpdateCompanionBuilder,
      (
        ContentActiveCensorData,
        BaseReferences<
          _$RekordboxDatabase,
          ContentActiveCensor,
          ContentActiveCensorData
        >,
      ),
      ContentActiveCensorData,
      PrefetchHooks Function()
    >;
typedef $ContentCueCreateCompanionBuilder =
    ContentCueCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> cues,
      Value<int?> rbCueCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $ContentCueUpdateCompanionBuilder =
    ContentCueCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> cues,
      Value<int?> rbCueCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $ContentCueFilterComposer
    extends Composer<_$RekordboxDatabase, ContentCue> {
  $ContentCueFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cues => $composableBuilder(
    column: $table.cues,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $ContentCueOrderingComposer
    extends Composer<_$RekordboxDatabase, ContentCue> {
  $ContentCueOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cues => $composableBuilder(
    column: $table.cues,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $ContentCueAnnotationComposer
    extends Composer<_$RekordboxDatabase, ContentCue> {
  $ContentCueAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<String> get cues =>
      $composableBuilder(column: $table.cues, builder: (column) => column);

  GeneratedColumn<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $ContentCueTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          ContentCue,
          ContentCueData,
          $ContentCueFilterComposer,
          $ContentCueOrderingComposer,
          $ContentCueAnnotationComposer,
          $ContentCueCreateCompanionBuilder,
          $ContentCueUpdateCompanionBuilder,
          (
            ContentCueData,
            BaseReferences<_$RekordboxDatabase, ContentCue, ContentCueData>,
          ),
          ContentCueData,
          PrefetchHooks Function()
        > {
  $ContentCueTableManager(_$RekordboxDatabase db, ContentCue table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $ContentCueFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $ContentCueOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $ContentCueAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> cues = const Value.absent(),
                Value<int?> rbCueCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ContentCueCompanion(
                id: id,
                contentID: contentID,
                cues: cues,
                rbCueCount: rbCueCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> cues = const Value.absent(),
                Value<int?> rbCueCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => ContentCueCompanion.insert(
                id: id,
                contentID: contentID,
                cues: cues,
                rbCueCount: rbCueCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $ContentCueProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      ContentCue,
      ContentCueData,
      $ContentCueFilterComposer,
      $ContentCueOrderingComposer,
      $ContentCueAnnotationComposer,
      $ContentCueCreateCompanionBuilder,
      $ContentCueUpdateCompanionBuilder,
      (
        ContentCueData,
        BaseReferences<_$RekordboxDatabase, ContentCue, ContentCueData>,
      ),
      ContentCueData,
      PrefetchHooks Function()
    >;
typedef $ContentFileCreateCompanionBuilder =
    ContentFileCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbLocalFileStatus,
      Value<int?> rbInProgress,
      Value<int?> rbProcessType,
      Value<String?> rbTempPath,
      Value<int?> rbPriority,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $ContentFileUpdateCompanionBuilder =
    ContentFileCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbLocalFileStatus,
      Value<int?> rbInProgress,
      Value<int?> rbProcessType,
      Value<String?> rbTempPath,
      Value<int?> rbPriority,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $ContentFileFilterComposer
    extends Composer<_$RekordboxDatabase, ContentFile> {
  $ContentFileFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $ContentFileOrderingComposer
    extends Composer<_$RekordboxDatabase, ContentFile> {
  $ContentFileOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $ContentFileAnnotationComposer
    extends Composer<_$RekordboxDatabase, ContentFile> {
  $ContentFileAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<String> get path =>
      $composableBuilder(column: $table.path, builder: (column) => column);

  GeneratedColumn<String> get hash =>
      $composableBuilder(column: $table.hash, builder: (column) => column);

  GeneratedColumn<int> get size =>
      $composableBuilder(column: $table.size, builder: (column) => column);

  GeneratedColumn<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $ContentFileTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          ContentFile,
          ContentFileData,
          $ContentFileFilterComposer,
          $ContentFileOrderingComposer,
          $ContentFileAnnotationComposer,
          $ContentFileCreateCompanionBuilder,
          $ContentFileUpdateCompanionBuilder,
          (
            ContentFileData,
            BaseReferences<_$RekordboxDatabase, ContentFile, ContentFileData>,
          ),
          ContentFileData,
          PrefetchHooks Function()
        > {
  $ContentFileTableManager(_$RekordboxDatabase db, ContentFile table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $ContentFileFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $ContentFileOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $ContentFileAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbLocalFileStatus = const Value.absent(),
                Value<int?> rbInProgress = const Value.absent(),
                Value<int?> rbProcessType = const Value.absent(),
                Value<String?> rbTempPath = const Value.absent(),
                Value<int?> rbPriority = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ContentFileCompanion(
                id: id,
                contentID: contentID,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbLocalFileStatus: rbLocalFileStatus,
                rbInProgress: rbInProgress,
                rbProcessType: rbProcessType,
                rbTempPath: rbTempPath,
                rbPriority: rbPriority,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbLocalFileStatus = const Value.absent(),
                Value<int?> rbInProgress = const Value.absent(),
                Value<int?> rbProcessType = const Value.absent(),
                Value<String?> rbTempPath = const Value.absent(),
                Value<int?> rbPriority = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => ContentFileCompanion.insert(
                id: id,
                contentID: contentID,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbLocalFileStatus: rbLocalFileStatus,
                rbInProgress: rbInProgress,
                rbProcessType: rbProcessType,
                rbTempPath: rbTempPath,
                rbPriority: rbPriority,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $ContentFileProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      ContentFile,
      ContentFileData,
      $ContentFileFilterComposer,
      $ContentFileOrderingComposer,
      $ContentFileAnnotationComposer,
      $ContentFileCreateCompanionBuilder,
      $ContentFileUpdateCompanionBuilder,
      (
        ContentFileData,
        BaseReferences<_$RekordboxDatabase, ContentFile, ContentFileData>,
      ),
      ContentFileData,
      PrefetchHooks Function()
    >;
typedef $DjmdActiveCensorCreateCompanionBuilder =
    DjmdActiveCensorCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> inMsec,
      Value<int?> outMsec,
      Value<int?> info,
      Value<String?> parameterList,
      Value<String?> contentUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdActiveCensorUpdateCompanionBuilder =
    DjmdActiveCensorCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> inMsec,
      Value<int?> outMsec,
      Value<int?> info,
      Value<String?> parameterList,
      Value<String?> contentUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdActiveCensorFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdActiveCensor> {
  $DjmdActiveCensorFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get info => $composableBuilder(
    column: $table.info,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parameterList => $composableBuilder(
    column: $table.parameterList,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdActiveCensorOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdActiveCensor> {
  $DjmdActiveCensorOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get info => $composableBuilder(
    column: $table.info,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parameterList => $composableBuilder(
    column: $table.parameterList,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdActiveCensorAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdActiveCensor> {
  $DjmdActiveCensorAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get inMsec =>
      $composableBuilder(column: $table.inMsec, builder: (column) => column);

  GeneratedColumn<int> get outMsec =>
      $composableBuilder(column: $table.outMsec, builder: (column) => column);

  GeneratedColumn<int> get info =>
      $composableBuilder(column: $table.info, builder: (column) => column);

  GeneratedColumn<String> get parameterList => $composableBuilder(
    column: $table.parameterList,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdActiveCensorTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdActiveCensor,
          DjmdActiveCensorData,
          $DjmdActiveCensorFilterComposer,
          $DjmdActiveCensorOrderingComposer,
          $DjmdActiveCensorAnnotationComposer,
          $DjmdActiveCensorCreateCompanionBuilder,
          $DjmdActiveCensorUpdateCompanionBuilder,
          (
            DjmdActiveCensorData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdActiveCensor,
              DjmdActiveCensorData
            >,
          ),
          DjmdActiveCensorData,
          PrefetchHooks Function()
        > {
  $DjmdActiveCensorTableManager(_$RekordboxDatabase db, DjmdActiveCensor table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdActiveCensorFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdActiveCensorOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdActiveCensorAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> info = const Value.absent(),
                Value<String?> parameterList = const Value.absent(),
                Value<String?> contentUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdActiveCensorCompanion(
                id: id,
                contentID: contentID,
                inMsec: inMsec,
                outMsec: outMsec,
                info: info,
                parameterList: parameterList,
                contentUUID: contentUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> info = const Value.absent(),
                Value<String?> parameterList = const Value.absent(),
                Value<String?> contentUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdActiveCensorCompanion.insert(
                id: id,
                contentID: contentID,
                inMsec: inMsec,
                outMsec: outMsec,
                info: info,
                parameterList: parameterList,
                contentUUID: contentUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdActiveCensorProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdActiveCensor,
      DjmdActiveCensorData,
      $DjmdActiveCensorFilterComposer,
      $DjmdActiveCensorOrderingComposer,
      $DjmdActiveCensorAnnotationComposer,
      $DjmdActiveCensorCreateCompanionBuilder,
      $DjmdActiveCensorUpdateCompanionBuilder,
      (
        DjmdActiveCensorData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdActiveCensor,
          DjmdActiveCensorData
        >,
      ),
      DjmdActiveCensorData,
      PrefetchHooks Function()
    >;
typedef $DjmdAlbumCreateCompanionBuilder =
    DjmdAlbumCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> albumArtistID,
      Value<String?> imagePath,
      Value<int?> compilation,
      Value<String?> searchStr,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdAlbumUpdateCompanionBuilder =
    DjmdAlbumCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> albumArtistID,
      Value<String?> imagePath,
      Value<int?> compilation,
      Value<String?> searchStr,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdAlbumFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdAlbum> {
  $DjmdAlbumFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get albumArtistID => $composableBuilder(
    column: $table.albumArtistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get compilation => $composableBuilder(
    column: $table.compilation,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdAlbumOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdAlbum> {
  $DjmdAlbumOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get albumArtistID => $composableBuilder(
    column: $table.albumArtistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get compilation => $composableBuilder(
    column: $table.compilation,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdAlbumAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdAlbum> {
  $DjmdAlbumAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get albumArtistID => $composableBuilder(
    column: $table.albumArtistID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get imagePath =>
      $composableBuilder(column: $table.imagePath, builder: (column) => column);

  GeneratedColumn<int> get compilation => $composableBuilder(
    column: $table.compilation,
    builder: (column) => column,
  );

  GeneratedColumn<String> get searchStr =>
      $composableBuilder(column: $table.searchStr, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdAlbumTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdAlbum,
          DjmdAlbumData,
          $DjmdAlbumFilterComposer,
          $DjmdAlbumOrderingComposer,
          $DjmdAlbumAnnotationComposer,
          $DjmdAlbumCreateCompanionBuilder,
          $DjmdAlbumUpdateCompanionBuilder,
          (
            DjmdAlbumData,
            BaseReferences<_$RekordboxDatabase, DjmdAlbum, DjmdAlbumData>,
          ),
          DjmdAlbumData,
          PrefetchHooks Function()
        > {
  $DjmdAlbumTableManager(_$RekordboxDatabase db, DjmdAlbum table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdAlbumFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdAlbumOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdAlbumAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> albumArtistID = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> compilation = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdAlbumCompanion(
                id: id,
                name: name,
                albumArtistID: albumArtistID,
                imagePath: imagePath,
                compilation: compilation,
                searchStr: searchStr,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> albumArtistID = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> compilation = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdAlbumCompanion.insert(
                id: id,
                name: name,
                albumArtistID: albumArtistID,
                imagePath: imagePath,
                compilation: compilation,
                searchStr: searchStr,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdAlbumProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdAlbum,
      DjmdAlbumData,
      $DjmdAlbumFilterComposer,
      $DjmdAlbumOrderingComposer,
      $DjmdAlbumAnnotationComposer,
      $DjmdAlbumCreateCompanionBuilder,
      $DjmdAlbumUpdateCompanionBuilder,
      (
        DjmdAlbumData,
        BaseReferences<_$RekordboxDatabase, DjmdAlbum, DjmdAlbumData>,
      ),
      DjmdAlbumData,
      PrefetchHooks Function()
    >;
typedef $DjmdArtistCreateCompanionBuilder =
    DjmdArtistCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> searchStr,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdArtistUpdateCompanionBuilder =
    DjmdArtistCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> searchStr,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdArtistFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdArtist> {
  $DjmdArtistFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdArtistOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdArtist> {
  $DjmdArtistOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdArtistAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdArtist> {
  $DjmdArtistAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get searchStr =>
      $composableBuilder(column: $table.searchStr, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdArtistTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdArtist,
          DjmdArtistData,
          $DjmdArtistFilterComposer,
          $DjmdArtistOrderingComposer,
          $DjmdArtistAnnotationComposer,
          $DjmdArtistCreateCompanionBuilder,
          $DjmdArtistUpdateCompanionBuilder,
          (
            DjmdArtistData,
            BaseReferences<_$RekordboxDatabase, DjmdArtist, DjmdArtistData>,
          ),
          DjmdArtistData,
          PrefetchHooks Function()
        > {
  $DjmdArtistTableManager(_$RekordboxDatabase db, DjmdArtist table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdArtistFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdArtistOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdArtistAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdArtistCompanion(
                id: id,
                name: name,
                searchStr: searchStr,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdArtistCompanion.insert(
                id: id,
                name: name,
                searchStr: searchStr,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdArtistProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdArtist,
      DjmdArtistData,
      $DjmdArtistFilterComposer,
      $DjmdArtistOrderingComposer,
      $DjmdArtistAnnotationComposer,
      $DjmdArtistCreateCompanionBuilder,
      $DjmdArtistUpdateCompanionBuilder,
      (
        DjmdArtistData,
        BaseReferences<_$RekordboxDatabase, DjmdArtist, DjmdArtistData>,
      ),
      DjmdArtistData,
      PrefetchHooks Function()
    >;
typedef $DjmdCategoryCreateCompanionBuilder =
    DjmdCategoryCompanion Function({
      Value<String?> id,
      Value<String?> menuItemID,
      Value<int?> seq,
      Value<int?> disable,
      Value<int?> infoOrder,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdCategoryUpdateCompanionBuilder =
    DjmdCategoryCompanion Function({
      Value<String?> id,
      Value<String?> menuItemID,
      Value<int?> seq,
      Value<int?> disable,
      Value<int?> infoOrder,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdCategoryFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdCategory> {
  $DjmdCategoryFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get disable => $composableBuilder(
    column: $table.disable,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get infoOrder => $composableBuilder(
    column: $table.infoOrder,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdCategoryOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdCategory> {
  $DjmdCategoryOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get disable => $composableBuilder(
    column: $table.disable,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get infoOrder => $composableBuilder(
    column: $table.infoOrder,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdCategoryAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdCategory> {
  $DjmdCategoryAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => column,
  );

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<int> get disable =>
      $composableBuilder(column: $table.disable, builder: (column) => column);

  GeneratedColumn<int> get infoOrder =>
      $composableBuilder(column: $table.infoOrder, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdCategoryTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdCategory,
          DjmdCategoryData,
          $DjmdCategoryFilterComposer,
          $DjmdCategoryOrderingComposer,
          $DjmdCategoryAnnotationComposer,
          $DjmdCategoryCreateCompanionBuilder,
          $DjmdCategoryUpdateCompanionBuilder,
          (
            DjmdCategoryData,
            BaseReferences<_$RekordboxDatabase, DjmdCategory, DjmdCategoryData>,
          ),
          DjmdCategoryData,
          PrefetchHooks Function()
        > {
  $DjmdCategoryTableManager(_$RekordboxDatabase db, DjmdCategory table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdCategoryFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdCategoryOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdCategoryAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> menuItemID = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<int?> disable = const Value.absent(),
                Value<int?> infoOrder = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdCategoryCompanion(
                id: id,
                menuItemID: menuItemID,
                seq: seq,
                disable: disable,
                infoOrder: infoOrder,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> menuItemID = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<int?> disable = const Value.absent(),
                Value<int?> infoOrder = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdCategoryCompanion.insert(
                id: id,
                menuItemID: menuItemID,
                seq: seq,
                disable: disable,
                infoOrder: infoOrder,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdCategoryProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdCategory,
      DjmdCategoryData,
      $DjmdCategoryFilterComposer,
      $DjmdCategoryOrderingComposer,
      $DjmdCategoryAnnotationComposer,
      $DjmdCategoryCreateCompanionBuilder,
      $DjmdCategoryUpdateCompanionBuilder,
      (
        DjmdCategoryData,
        BaseReferences<_$RekordboxDatabase, DjmdCategory, DjmdCategoryData>,
      ),
      DjmdCategoryData,
      PrefetchHooks Function()
    >;
typedef $DjmdCloudPropertyCreateCompanionBuilder =
    DjmdCloudPropertyCompanion Function({
      Value<String?> id,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> reserved5,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdCloudPropertyUpdateCompanionBuilder =
    DjmdCloudPropertyCompanion Function({
      Value<String?> id,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> reserved5,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdCloudPropertyFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdCloudProperty> {
  $DjmdCloudPropertyFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved5 => $composableBuilder(
    column: $table.reserved5,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdCloudPropertyOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdCloudProperty> {
  $DjmdCloudPropertyOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved5 => $composableBuilder(
    column: $table.reserved5,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdCloudPropertyAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdCloudProperty> {
  $DjmdCloudPropertyAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get reserved1 =>
      $composableBuilder(column: $table.reserved1, builder: (column) => column);

  GeneratedColumn<String> get reserved2 =>
      $composableBuilder(column: $table.reserved2, builder: (column) => column);

  GeneratedColumn<String> get reserved3 =>
      $composableBuilder(column: $table.reserved3, builder: (column) => column);

  GeneratedColumn<String> get reserved4 =>
      $composableBuilder(column: $table.reserved4, builder: (column) => column);

  GeneratedColumn<String> get reserved5 =>
      $composableBuilder(column: $table.reserved5, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdCloudPropertyTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdCloudProperty,
          DjmdCloudPropertyData,
          $DjmdCloudPropertyFilterComposer,
          $DjmdCloudPropertyOrderingComposer,
          $DjmdCloudPropertyAnnotationComposer,
          $DjmdCloudPropertyCreateCompanionBuilder,
          $DjmdCloudPropertyUpdateCompanionBuilder,
          (
            DjmdCloudPropertyData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdCloudProperty,
              DjmdCloudPropertyData
            >,
          ),
          DjmdCloudPropertyData,
          PrefetchHooks Function()
        > {
  $DjmdCloudPropertyTableManager(
    _$RekordboxDatabase db,
    DjmdCloudProperty table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdCloudPropertyFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdCloudPropertyOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdCloudPropertyAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> reserved5 = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdCloudPropertyCompanion(
                id: id,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                reserved5: reserved5,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> reserved5 = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdCloudPropertyCompanion.insert(
                id: id,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                reserved5: reserved5,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdCloudPropertyProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdCloudProperty,
      DjmdCloudPropertyData,
      $DjmdCloudPropertyFilterComposer,
      $DjmdCloudPropertyOrderingComposer,
      $DjmdCloudPropertyAnnotationComposer,
      $DjmdCloudPropertyCreateCompanionBuilder,
      $DjmdCloudPropertyUpdateCompanionBuilder,
      (
        DjmdCloudPropertyData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdCloudProperty,
          DjmdCloudPropertyData
        >,
      ),
      DjmdCloudPropertyData,
      PrefetchHooks Function()
    >;
typedef $DjmdColorCreateCompanionBuilder =
    DjmdColorCompanion Function({
      Value<String?> id,
      Value<int?> colorCode,
      Value<int?> sortKey,
      Value<String?> commnt,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdColorUpdateCompanionBuilder =
    DjmdColorCompanion Function({
      Value<String?> id,
      Value<int?> colorCode,
      Value<int?> sortKey,
      Value<String?> commnt,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdColorFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdColor> {
  $DjmdColorFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get colorCode => $composableBuilder(
    column: $table.colorCode,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get sortKey => $composableBuilder(
    column: $table.sortKey,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get commnt => $composableBuilder(
    column: $table.commnt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdColorOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdColor> {
  $DjmdColorOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get colorCode => $composableBuilder(
    column: $table.colorCode,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get sortKey => $composableBuilder(
    column: $table.sortKey,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get commnt => $composableBuilder(
    column: $table.commnt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdColorAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdColor> {
  $DjmdColorAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get colorCode =>
      $composableBuilder(column: $table.colorCode, builder: (column) => column);

  GeneratedColumn<int> get sortKey =>
      $composableBuilder(column: $table.sortKey, builder: (column) => column);

  GeneratedColumn<String> get commnt =>
      $composableBuilder(column: $table.commnt, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdColorTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdColor,
          DjmdColorData,
          $DjmdColorFilterComposer,
          $DjmdColorOrderingComposer,
          $DjmdColorAnnotationComposer,
          $DjmdColorCreateCompanionBuilder,
          $DjmdColorUpdateCompanionBuilder,
          (
            DjmdColorData,
            BaseReferences<_$RekordboxDatabase, DjmdColor, DjmdColorData>,
          ),
          DjmdColorData,
          PrefetchHooks Function()
        > {
  $DjmdColorTableManager(_$RekordboxDatabase db, DjmdColor table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdColorFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdColorOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdColorAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> colorCode = const Value.absent(),
                Value<int?> sortKey = const Value.absent(),
                Value<String?> commnt = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdColorCompanion(
                id: id,
                colorCode: colorCode,
                sortKey: sortKey,
                commnt: commnt,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> colorCode = const Value.absent(),
                Value<int?> sortKey = const Value.absent(),
                Value<String?> commnt = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdColorCompanion.insert(
                id: id,
                colorCode: colorCode,
                sortKey: sortKey,
                commnt: commnt,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdColorProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdColor,
      DjmdColorData,
      $DjmdColorFilterComposer,
      $DjmdColorOrderingComposer,
      $DjmdColorAnnotationComposer,
      $DjmdColorCreateCompanionBuilder,
      $DjmdColorUpdateCompanionBuilder,
      (
        DjmdColorData,
        BaseReferences<_$RekordboxDatabase, DjmdColor, DjmdColorData>,
      ),
      DjmdColorData,
      PrefetchHooks Function()
    >;
typedef $DjmdContentCreateCompanionBuilder =
    DjmdContentCompanion Function({
      Value<String?> id,
      Value<String?> folderPath,
      Value<String?> fileNameL,
      Value<String?> fileNameS,
      Value<String?> title,
      Value<String?> artistID,
      Value<String?> albumID,
      Value<String?> genreID,
      Value<int?> bpm,
      Value<int?> length,
      Value<int?> trackNo,
      Value<int?> bitRate,
      Value<int?> bitDepth,
      Value<String?> commnt,
      Value<int?> fileType,
      Value<int?> rating,
      Value<int?> releaseYear,
      Value<String?> remixerID,
      Value<String?> labelID,
      Value<String?> orgArtistID,
      Value<String?> keyID,
      Value<String?> stockDate,
      Value<String?> colorID,
      Value<int?> dJPlayCount,
      Value<String?> imagePath,
      Value<String?> masterDBID,
      Value<String?> masterSongID,
      Value<String?> analysisDataPath,
      Value<String?> searchStr,
      Value<int?> fileSize,
      Value<int?> discNo,
      Value<String?> composerID,
      Value<String?> subtitle,
      Value<int?> sampleRate,
      Value<int?> disableQuantize,
      Value<int?> analysed,
      Value<String?> releaseDate,
      Value<String?> dateCreated,
      Value<int?> contentLink,
      Value<String?> tag,
      Value<String?> modifiedByRBM,
      Value<String?> hotCueAutoLoad,
      Value<String?> deliveryControl,
      Value<String?> deliveryComment,
      Value<String?> cueUpdated,
      Value<String?> analysisUpdated,
      Value<String?> trackInfoUpdated,
      Value<String?> lyricist,
      Value<String?> isrc,
      Value<int?> samplerTrackInfo,
      Value<int?> samplerPlayOffset,
      Value<double?> samplerGain,
      Value<String?> videoAssociate,
      Value<int?> lyricStatus,
      Value<int?> serviceID,
      Value<String?> orgFolderPath,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> extInfo,
      Value<String?> rbFileId,
      Value<String?> deviceID,
      Value<String?> rbLocalFolderPath,
      Value<String?> srcID,
      Value<String?> srcTitle,
      Value<String?> srcArtistName,
      Value<String?> srcAlbumName,
      Value<int?> srcLength,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdContentUpdateCompanionBuilder =
    DjmdContentCompanion Function({
      Value<String?> id,
      Value<String?> folderPath,
      Value<String?> fileNameL,
      Value<String?> fileNameS,
      Value<String?> title,
      Value<String?> artistID,
      Value<String?> albumID,
      Value<String?> genreID,
      Value<int?> bpm,
      Value<int?> length,
      Value<int?> trackNo,
      Value<int?> bitRate,
      Value<int?> bitDepth,
      Value<String?> commnt,
      Value<int?> fileType,
      Value<int?> rating,
      Value<int?> releaseYear,
      Value<String?> remixerID,
      Value<String?> labelID,
      Value<String?> orgArtistID,
      Value<String?> keyID,
      Value<String?> stockDate,
      Value<String?> colorID,
      Value<int?> dJPlayCount,
      Value<String?> imagePath,
      Value<String?> masterDBID,
      Value<String?> masterSongID,
      Value<String?> analysisDataPath,
      Value<String?> searchStr,
      Value<int?> fileSize,
      Value<int?> discNo,
      Value<String?> composerID,
      Value<String?> subtitle,
      Value<int?> sampleRate,
      Value<int?> disableQuantize,
      Value<int?> analysed,
      Value<String?> releaseDate,
      Value<String?> dateCreated,
      Value<int?> contentLink,
      Value<String?> tag,
      Value<String?> modifiedByRBM,
      Value<String?> hotCueAutoLoad,
      Value<String?> deliveryControl,
      Value<String?> deliveryComment,
      Value<String?> cueUpdated,
      Value<String?> analysisUpdated,
      Value<String?> trackInfoUpdated,
      Value<String?> lyricist,
      Value<String?> isrc,
      Value<int?> samplerTrackInfo,
      Value<int?> samplerPlayOffset,
      Value<double?> samplerGain,
      Value<String?> videoAssociate,
      Value<int?> lyricStatus,
      Value<int?> serviceID,
      Value<String?> orgFolderPath,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> extInfo,
      Value<String?> rbFileId,
      Value<String?> deviceID,
      Value<String?> rbLocalFolderPath,
      Value<String?> srcID,
      Value<String?> srcTitle,
      Value<String?> srcArtistName,
      Value<String?> srcAlbumName,
      Value<int?> srcLength,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdContentFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdContent> {
  $DjmdContentFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get folderPath => $composableBuilder(
    column: $table.folderPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get fileNameL => $composableBuilder(
    column: $table.fileNameL,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get fileNameS => $composableBuilder(
    column: $table.fileNameS,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get artistID => $composableBuilder(
    column: $table.artistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get albumID => $composableBuilder(
    column: $table.albumID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get genreID => $composableBuilder(
    column: $table.genreID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get bpm => $composableBuilder(
    column: $table.bpm,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get length => $composableBuilder(
    column: $table.length,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get bitRate => $composableBuilder(
    column: $table.bitRate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get bitDepth => $composableBuilder(
    column: $table.bitDepth,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get commnt => $composableBuilder(
    column: $table.commnt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get fileType => $composableBuilder(
    column: $table.fileType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rating => $composableBuilder(
    column: $table.rating,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get releaseYear => $composableBuilder(
    column: $table.releaseYear,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get remixerID => $composableBuilder(
    column: $table.remixerID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get labelID => $composableBuilder(
    column: $table.labelID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get orgArtistID => $composableBuilder(
    column: $table.orgArtistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get keyID => $composableBuilder(
    column: $table.keyID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get stockDate => $composableBuilder(
    column: $table.stockDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get colorID => $composableBuilder(
    column: $table.colorID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get dJPlayCount => $composableBuilder(
    column: $table.dJPlayCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get masterSongID => $composableBuilder(
    column: $table.masterSongID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get analysisDataPath => $composableBuilder(
    column: $table.analysisDataPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get fileSize => $composableBuilder(
    column: $table.fileSize,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get discNo => $composableBuilder(
    column: $table.discNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get composerID => $composableBuilder(
    column: $table.composerID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get subtitle => $composableBuilder(
    column: $table.subtitle,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get sampleRate => $composableBuilder(
    column: $table.sampleRate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get disableQuantize => $composableBuilder(
    column: $table.disableQuantize,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get analysed => $composableBuilder(
    column: $table.analysed,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get releaseDate => $composableBuilder(
    column: $table.releaseDate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get contentLink => $composableBuilder(
    column: $table.contentLink,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get tag => $composableBuilder(
    column: $table.tag,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get modifiedByRBM => $composableBuilder(
    column: $table.modifiedByRBM,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hotCueAutoLoad => $composableBuilder(
    column: $table.hotCueAutoLoad,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get deliveryControl => $composableBuilder(
    column: $table.deliveryControl,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get deliveryComment => $composableBuilder(
    column: $table.deliveryComment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cueUpdated => $composableBuilder(
    column: $table.cueUpdated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get analysisUpdated => $composableBuilder(
    column: $table.analysisUpdated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get trackInfoUpdated => $composableBuilder(
    column: $table.trackInfoUpdated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get lyricist => $composableBuilder(
    column: $table.lyricist,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get isrc => $composableBuilder(
    column: $table.isrc,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get samplerTrackInfo => $composableBuilder(
    column: $table.samplerTrackInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get samplerPlayOffset => $composableBuilder(
    column: $table.samplerPlayOffset,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<double> get samplerGain => $composableBuilder(
    column: $table.samplerGain,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get videoAssociate => $composableBuilder(
    column: $table.videoAssociate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get lyricStatus => $composableBuilder(
    column: $table.lyricStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get serviceID => $composableBuilder(
    column: $table.serviceID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get orgFolderPath => $composableBuilder(
    column: $table.orgFolderPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get extInfo => $composableBuilder(
    column: $table.extInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbFileId => $composableBuilder(
    column: $table.rbFileId,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get deviceID => $composableBuilder(
    column: $table.deviceID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbLocalFolderPath => $composableBuilder(
    column: $table.rbLocalFolderPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get srcID => $composableBuilder(
    column: $table.srcID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get srcTitle => $composableBuilder(
    column: $table.srcTitle,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get srcArtistName => $composableBuilder(
    column: $table.srcArtistName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get srcAlbumName => $composableBuilder(
    column: $table.srcAlbumName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get srcLength => $composableBuilder(
    column: $table.srcLength,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdContentOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdContent> {
  $DjmdContentOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get folderPath => $composableBuilder(
    column: $table.folderPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get fileNameL => $composableBuilder(
    column: $table.fileNameL,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get fileNameS => $composableBuilder(
    column: $table.fileNameS,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get title => $composableBuilder(
    column: $table.title,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get artistID => $composableBuilder(
    column: $table.artistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get albumID => $composableBuilder(
    column: $table.albumID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get genreID => $composableBuilder(
    column: $table.genreID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get bpm => $composableBuilder(
    column: $table.bpm,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get length => $composableBuilder(
    column: $table.length,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get bitRate => $composableBuilder(
    column: $table.bitRate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get bitDepth => $composableBuilder(
    column: $table.bitDepth,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get commnt => $composableBuilder(
    column: $table.commnt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get fileType => $composableBuilder(
    column: $table.fileType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rating => $composableBuilder(
    column: $table.rating,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get releaseYear => $composableBuilder(
    column: $table.releaseYear,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get remixerID => $composableBuilder(
    column: $table.remixerID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get labelID => $composableBuilder(
    column: $table.labelID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get orgArtistID => $composableBuilder(
    column: $table.orgArtistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get keyID => $composableBuilder(
    column: $table.keyID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get stockDate => $composableBuilder(
    column: $table.stockDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get colorID => $composableBuilder(
    column: $table.colorID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get dJPlayCount => $composableBuilder(
    column: $table.dJPlayCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get masterSongID => $composableBuilder(
    column: $table.masterSongID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get analysisDataPath => $composableBuilder(
    column: $table.analysisDataPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get searchStr => $composableBuilder(
    column: $table.searchStr,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get fileSize => $composableBuilder(
    column: $table.fileSize,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get discNo => $composableBuilder(
    column: $table.discNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get composerID => $composableBuilder(
    column: $table.composerID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get subtitle => $composableBuilder(
    column: $table.subtitle,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get sampleRate => $composableBuilder(
    column: $table.sampleRate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get disableQuantize => $composableBuilder(
    column: $table.disableQuantize,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get analysed => $composableBuilder(
    column: $table.analysed,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get releaseDate => $composableBuilder(
    column: $table.releaseDate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get contentLink => $composableBuilder(
    column: $table.contentLink,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get tag => $composableBuilder(
    column: $table.tag,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get modifiedByRBM => $composableBuilder(
    column: $table.modifiedByRBM,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hotCueAutoLoad => $composableBuilder(
    column: $table.hotCueAutoLoad,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get deliveryControl => $composableBuilder(
    column: $table.deliveryControl,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get deliveryComment => $composableBuilder(
    column: $table.deliveryComment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cueUpdated => $composableBuilder(
    column: $table.cueUpdated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get analysisUpdated => $composableBuilder(
    column: $table.analysisUpdated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get trackInfoUpdated => $composableBuilder(
    column: $table.trackInfoUpdated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get lyricist => $composableBuilder(
    column: $table.lyricist,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get isrc => $composableBuilder(
    column: $table.isrc,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get samplerTrackInfo => $composableBuilder(
    column: $table.samplerTrackInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get samplerPlayOffset => $composableBuilder(
    column: $table.samplerPlayOffset,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<double> get samplerGain => $composableBuilder(
    column: $table.samplerGain,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get videoAssociate => $composableBuilder(
    column: $table.videoAssociate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get lyricStatus => $composableBuilder(
    column: $table.lyricStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get serviceID => $composableBuilder(
    column: $table.serviceID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get orgFolderPath => $composableBuilder(
    column: $table.orgFolderPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get extInfo => $composableBuilder(
    column: $table.extInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbFileId => $composableBuilder(
    column: $table.rbFileId,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get deviceID => $composableBuilder(
    column: $table.deviceID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbLocalFolderPath => $composableBuilder(
    column: $table.rbLocalFolderPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get srcID => $composableBuilder(
    column: $table.srcID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get srcTitle => $composableBuilder(
    column: $table.srcTitle,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get srcArtistName => $composableBuilder(
    column: $table.srcArtistName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get srcAlbumName => $composableBuilder(
    column: $table.srcAlbumName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get srcLength => $composableBuilder(
    column: $table.srcLength,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdContentAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdContent> {
  $DjmdContentAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get folderPath => $composableBuilder(
    column: $table.folderPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get fileNameL =>
      $composableBuilder(column: $table.fileNameL, builder: (column) => column);

  GeneratedColumn<String> get fileNameS =>
      $composableBuilder(column: $table.fileNameS, builder: (column) => column);

  GeneratedColumn<String> get title =>
      $composableBuilder(column: $table.title, builder: (column) => column);

  GeneratedColumn<String> get artistID =>
      $composableBuilder(column: $table.artistID, builder: (column) => column);

  GeneratedColumn<String> get albumID =>
      $composableBuilder(column: $table.albumID, builder: (column) => column);

  GeneratedColumn<String> get genreID =>
      $composableBuilder(column: $table.genreID, builder: (column) => column);

  GeneratedColumn<int> get bpm =>
      $composableBuilder(column: $table.bpm, builder: (column) => column);

  GeneratedColumn<int> get length =>
      $composableBuilder(column: $table.length, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<int> get bitRate =>
      $composableBuilder(column: $table.bitRate, builder: (column) => column);

  GeneratedColumn<int> get bitDepth =>
      $composableBuilder(column: $table.bitDepth, builder: (column) => column);

  GeneratedColumn<String> get commnt =>
      $composableBuilder(column: $table.commnt, builder: (column) => column);

  GeneratedColumn<int> get fileType =>
      $composableBuilder(column: $table.fileType, builder: (column) => column);

  GeneratedColumn<int> get rating =>
      $composableBuilder(column: $table.rating, builder: (column) => column);

  GeneratedColumn<int> get releaseYear => $composableBuilder(
    column: $table.releaseYear,
    builder: (column) => column,
  );

  GeneratedColumn<String> get remixerID =>
      $composableBuilder(column: $table.remixerID, builder: (column) => column);

  GeneratedColumn<String> get labelID =>
      $composableBuilder(column: $table.labelID, builder: (column) => column);

  GeneratedColumn<String> get orgArtistID => $composableBuilder(
    column: $table.orgArtistID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get keyID =>
      $composableBuilder(column: $table.keyID, builder: (column) => column);

  GeneratedColumn<String> get stockDate =>
      $composableBuilder(column: $table.stockDate, builder: (column) => column);

  GeneratedColumn<String> get colorID =>
      $composableBuilder(column: $table.colorID, builder: (column) => column);

  GeneratedColumn<int> get dJPlayCount => $composableBuilder(
    column: $table.dJPlayCount,
    builder: (column) => column,
  );

  GeneratedColumn<String> get imagePath =>
      $composableBuilder(column: $table.imagePath, builder: (column) => column);

  GeneratedColumn<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get masterSongID => $composableBuilder(
    column: $table.masterSongID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get analysisDataPath => $composableBuilder(
    column: $table.analysisDataPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get searchStr =>
      $composableBuilder(column: $table.searchStr, builder: (column) => column);

  GeneratedColumn<int> get fileSize =>
      $composableBuilder(column: $table.fileSize, builder: (column) => column);

  GeneratedColumn<int> get discNo =>
      $composableBuilder(column: $table.discNo, builder: (column) => column);

  GeneratedColumn<String> get composerID => $composableBuilder(
    column: $table.composerID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get subtitle =>
      $composableBuilder(column: $table.subtitle, builder: (column) => column);

  GeneratedColumn<int> get sampleRate => $composableBuilder(
    column: $table.sampleRate,
    builder: (column) => column,
  );

  GeneratedColumn<int> get disableQuantize => $composableBuilder(
    column: $table.disableQuantize,
    builder: (column) => column,
  );

  GeneratedColumn<int> get analysed =>
      $composableBuilder(column: $table.analysed, builder: (column) => column);

  GeneratedColumn<String> get releaseDate => $composableBuilder(
    column: $table.releaseDate,
    builder: (column) => column,
  );

  GeneratedColumn<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => column,
  );

  GeneratedColumn<int> get contentLink => $composableBuilder(
    column: $table.contentLink,
    builder: (column) => column,
  );

  GeneratedColumn<String> get tag =>
      $composableBuilder(column: $table.tag, builder: (column) => column);

  GeneratedColumn<String> get modifiedByRBM => $composableBuilder(
    column: $table.modifiedByRBM,
    builder: (column) => column,
  );

  GeneratedColumn<String> get hotCueAutoLoad => $composableBuilder(
    column: $table.hotCueAutoLoad,
    builder: (column) => column,
  );

  GeneratedColumn<String> get deliveryControl => $composableBuilder(
    column: $table.deliveryControl,
    builder: (column) => column,
  );

  GeneratedColumn<String> get deliveryComment => $composableBuilder(
    column: $table.deliveryComment,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cueUpdated => $composableBuilder(
    column: $table.cueUpdated,
    builder: (column) => column,
  );

  GeneratedColumn<String> get analysisUpdated => $composableBuilder(
    column: $table.analysisUpdated,
    builder: (column) => column,
  );

  GeneratedColumn<String> get trackInfoUpdated => $composableBuilder(
    column: $table.trackInfoUpdated,
    builder: (column) => column,
  );

  GeneratedColumn<String> get lyricist =>
      $composableBuilder(column: $table.lyricist, builder: (column) => column);

  GeneratedColumn<String> get isrc =>
      $composableBuilder(column: $table.isrc, builder: (column) => column);

  GeneratedColumn<int> get samplerTrackInfo => $composableBuilder(
    column: $table.samplerTrackInfo,
    builder: (column) => column,
  );

  GeneratedColumn<int> get samplerPlayOffset => $composableBuilder(
    column: $table.samplerPlayOffset,
    builder: (column) => column,
  );

  GeneratedColumn<double> get samplerGain => $composableBuilder(
    column: $table.samplerGain,
    builder: (column) => column,
  );

  GeneratedColumn<String> get videoAssociate => $composableBuilder(
    column: $table.videoAssociate,
    builder: (column) => column,
  );

  GeneratedColumn<int> get lyricStatus => $composableBuilder(
    column: $table.lyricStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get serviceID =>
      $composableBuilder(column: $table.serviceID, builder: (column) => column);

  GeneratedColumn<String> get orgFolderPath => $composableBuilder(
    column: $table.orgFolderPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get reserved1 =>
      $composableBuilder(column: $table.reserved1, builder: (column) => column);

  GeneratedColumn<String> get reserved2 =>
      $composableBuilder(column: $table.reserved2, builder: (column) => column);

  GeneratedColumn<String> get reserved3 =>
      $composableBuilder(column: $table.reserved3, builder: (column) => column);

  GeneratedColumn<String> get reserved4 =>
      $composableBuilder(column: $table.reserved4, builder: (column) => column);

  GeneratedColumn<String> get extInfo =>
      $composableBuilder(column: $table.extInfo, builder: (column) => column);

  GeneratedColumn<String> get rbFileId =>
      $composableBuilder(column: $table.rbFileId, builder: (column) => column);

  GeneratedColumn<String> get deviceID =>
      $composableBuilder(column: $table.deviceID, builder: (column) => column);

  GeneratedColumn<String> get rbLocalFolderPath => $composableBuilder(
    column: $table.rbLocalFolderPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get srcID =>
      $composableBuilder(column: $table.srcID, builder: (column) => column);

  GeneratedColumn<String> get srcTitle =>
      $composableBuilder(column: $table.srcTitle, builder: (column) => column);

  GeneratedColumn<String> get srcArtistName => $composableBuilder(
    column: $table.srcArtistName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get srcAlbumName => $composableBuilder(
    column: $table.srcAlbumName,
    builder: (column) => column,
  );

  GeneratedColumn<int> get srcLength =>
      $composableBuilder(column: $table.srcLength, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdContentTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdContent,
          DjmdContentData,
          $DjmdContentFilterComposer,
          $DjmdContentOrderingComposer,
          $DjmdContentAnnotationComposer,
          $DjmdContentCreateCompanionBuilder,
          $DjmdContentUpdateCompanionBuilder,
          (
            DjmdContentData,
            BaseReferences<_$RekordboxDatabase, DjmdContent, DjmdContentData>,
          ),
          DjmdContentData,
          PrefetchHooks Function()
        > {
  $DjmdContentTableManager(_$RekordboxDatabase db, DjmdContent table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdContentFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdContentOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdContentAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> folderPath = const Value.absent(),
                Value<String?> fileNameL = const Value.absent(),
                Value<String?> fileNameS = const Value.absent(),
                Value<String?> title = const Value.absent(),
                Value<String?> artistID = const Value.absent(),
                Value<String?> albumID = const Value.absent(),
                Value<String?> genreID = const Value.absent(),
                Value<int?> bpm = const Value.absent(),
                Value<int?> length = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<int?> bitRate = const Value.absent(),
                Value<int?> bitDepth = const Value.absent(),
                Value<String?> commnt = const Value.absent(),
                Value<int?> fileType = const Value.absent(),
                Value<int?> rating = const Value.absent(),
                Value<int?> releaseYear = const Value.absent(),
                Value<String?> remixerID = const Value.absent(),
                Value<String?> labelID = const Value.absent(),
                Value<String?> orgArtistID = const Value.absent(),
                Value<String?> keyID = const Value.absent(),
                Value<String?> stockDate = const Value.absent(),
                Value<String?> colorID = const Value.absent(),
                Value<int?> dJPlayCount = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<String?> masterDBID = const Value.absent(),
                Value<String?> masterSongID = const Value.absent(),
                Value<String?> analysisDataPath = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<int?> fileSize = const Value.absent(),
                Value<int?> discNo = const Value.absent(),
                Value<String?> composerID = const Value.absent(),
                Value<String?> subtitle = const Value.absent(),
                Value<int?> sampleRate = const Value.absent(),
                Value<int?> disableQuantize = const Value.absent(),
                Value<int?> analysed = const Value.absent(),
                Value<String?> releaseDate = const Value.absent(),
                Value<String?> dateCreated = const Value.absent(),
                Value<int?> contentLink = const Value.absent(),
                Value<String?> tag = const Value.absent(),
                Value<String?> modifiedByRBM = const Value.absent(),
                Value<String?> hotCueAutoLoad = const Value.absent(),
                Value<String?> deliveryControl = const Value.absent(),
                Value<String?> deliveryComment = const Value.absent(),
                Value<String?> cueUpdated = const Value.absent(),
                Value<String?> analysisUpdated = const Value.absent(),
                Value<String?> trackInfoUpdated = const Value.absent(),
                Value<String?> lyricist = const Value.absent(),
                Value<String?> isrc = const Value.absent(),
                Value<int?> samplerTrackInfo = const Value.absent(),
                Value<int?> samplerPlayOffset = const Value.absent(),
                Value<double?> samplerGain = const Value.absent(),
                Value<String?> videoAssociate = const Value.absent(),
                Value<int?> lyricStatus = const Value.absent(),
                Value<int?> serviceID = const Value.absent(),
                Value<String?> orgFolderPath = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> extInfo = const Value.absent(),
                Value<String?> rbFileId = const Value.absent(),
                Value<String?> deviceID = const Value.absent(),
                Value<String?> rbLocalFolderPath = const Value.absent(),
                Value<String?> srcID = const Value.absent(),
                Value<String?> srcTitle = const Value.absent(),
                Value<String?> srcArtistName = const Value.absent(),
                Value<String?> srcAlbumName = const Value.absent(),
                Value<int?> srcLength = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdContentCompanion(
                id: id,
                folderPath: folderPath,
                fileNameL: fileNameL,
                fileNameS: fileNameS,
                title: title,
                artistID: artistID,
                albumID: albumID,
                genreID: genreID,
                bpm: bpm,
                length: length,
                trackNo: trackNo,
                bitRate: bitRate,
                bitDepth: bitDepth,
                commnt: commnt,
                fileType: fileType,
                rating: rating,
                releaseYear: releaseYear,
                remixerID: remixerID,
                labelID: labelID,
                orgArtistID: orgArtistID,
                keyID: keyID,
                stockDate: stockDate,
                colorID: colorID,
                dJPlayCount: dJPlayCount,
                imagePath: imagePath,
                masterDBID: masterDBID,
                masterSongID: masterSongID,
                analysisDataPath: analysisDataPath,
                searchStr: searchStr,
                fileSize: fileSize,
                discNo: discNo,
                composerID: composerID,
                subtitle: subtitle,
                sampleRate: sampleRate,
                disableQuantize: disableQuantize,
                analysed: analysed,
                releaseDate: releaseDate,
                dateCreated: dateCreated,
                contentLink: contentLink,
                tag: tag,
                modifiedByRBM: modifiedByRBM,
                hotCueAutoLoad: hotCueAutoLoad,
                deliveryControl: deliveryControl,
                deliveryComment: deliveryComment,
                cueUpdated: cueUpdated,
                analysisUpdated: analysisUpdated,
                trackInfoUpdated: trackInfoUpdated,
                lyricist: lyricist,
                isrc: isrc,
                samplerTrackInfo: samplerTrackInfo,
                samplerPlayOffset: samplerPlayOffset,
                samplerGain: samplerGain,
                videoAssociate: videoAssociate,
                lyricStatus: lyricStatus,
                serviceID: serviceID,
                orgFolderPath: orgFolderPath,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                extInfo: extInfo,
                rbFileId: rbFileId,
                deviceID: deviceID,
                rbLocalFolderPath: rbLocalFolderPath,
                srcID: srcID,
                srcTitle: srcTitle,
                srcArtistName: srcArtistName,
                srcAlbumName: srcAlbumName,
                srcLength: srcLength,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> folderPath = const Value.absent(),
                Value<String?> fileNameL = const Value.absent(),
                Value<String?> fileNameS = const Value.absent(),
                Value<String?> title = const Value.absent(),
                Value<String?> artistID = const Value.absent(),
                Value<String?> albumID = const Value.absent(),
                Value<String?> genreID = const Value.absent(),
                Value<int?> bpm = const Value.absent(),
                Value<int?> length = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<int?> bitRate = const Value.absent(),
                Value<int?> bitDepth = const Value.absent(),
                Value<String?> commnt = const Value.absent(),
                Value<int?> fileType = const Value.absent(),
                Value<int?> rating = const Value.absent(),
                Value<int?> releaseYear = const Value.absent(),
                Value<String?> remixerID = const Value.absent(),
                Value<String?> labelID = const Value.absent(),
                Value<String?> orgArtistID = const Value.absent(),
                Value<String?> keyID = const Value.absent(),
                Value<String?> stockDate = const Value.absent(),
                Value<String?> colorID = const Value.absent(),
                Value<int?> dJPlayCount = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<String?> masterDBID = const Value.absent(),
                Value<String?> masterSongID = const Value.absent(),
                Value<String?> analysisDataPath = const Value.absent(),
                Value<String?> searchStr = const Value.absent(),
                Value<int?> fileSize = const Value.absent(),
                Value<int?> discNo = const Value.absent(),
                Value<String?> composerID = const Value.absent(),
                Value<String?> subtitle = const Value.absent(),
                Value<int?> sampleRate = const Value.absent(),
                Value<int?> disableQuantize = const Value.absent(),
                Value<int?> analysed = const Value.absent(),
                Value<String?> releaseDate = const Value.absent(),
                Value<String?> dateCreated = const Value.absent(),
                Value<int?> contentLink = const Value.absent(),
                Value<String?> tag = const Value.absent(),
                Value<String?> modifiedByRBM = const Value.absent(),
                Value<String?> hotCueAutoLoad = const Value.absent(),
                Value<String?> deliveryControl = const Value.absent(),
                Value<String?> deliveryComment = const Value.absent(),
                Value<String?> cueUpdated = const Value.absent(),
                Value<String?> analysisUpdated = const Value.absent(),
                Value<String?> trackInfoUpdated = const Value.absent(),
                Value<String?> lyricist = const Value.absent(),
                Value<String?> isrc = const Value.absent(),
                Value<int?> samplerTrackInfo = const Value.absent(),
                Value<int?> samplerPlayOffset = const Value.absent(),
                Value<double?> samplerGain = const Value.absent(),
                Value<String?> videoAssociate = const Value.absent(),
                Value<int?> lyricStatus = const Value.absent(),
                Value<int?> serviceID = const Value.absent(),
                Value<String?> orgFolderPath = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> extInfo = const Value.absent(),
                Value<String?> rbFileId = const Value.absent(),
                Value<String?> deviceID = const Value.absent(),
                Value<String?> rbLocalFolderPath = const Value.absent(),
                Value<String?> srcID = const Value.absent(),
                Value<String?> srcTitle = const Value.absent(),
                Value<String?> srcArtistName = const Value.absent(),
                Value<String?> srcAlbumName = const Value.absent(),
                Value<int?> srcLength = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdContentCompanion.insert(
                id: id,
                folderPath: folderPath,
                fileNameL: fileNameL,
                fileNameS: fileNameS,
                title: title,
                artistID: artistID,
                albumID: albumID,
                genreID: genreID,
                bpm: bpm,
                length: length,
                trackNo: trackNo,
                bitRate: bitRate,
                bitDepth: bitDepth,
                commnt: commnt,
                fileType: fileType,
                rating: rating,
                releaseYear: releaseYear,
                remixerID: remixerID,
                labelID: labelID,
                orgArtistID: orgArtistID,
                keyID: keyID,
                stockDate: stockDate,
                colorID: colorID,
                dJPlayCount: dJPlayCount,
                imagePath: imagePath,
                masterDBID: masterDBID,
                masterSongID: masterSongID,
                analysisDataPath: analysisDataPath,
                searchStr: searchStr,
                fileSize: fileSize,
                discNo: discNo,
                composerID: composerID,
                subtitle: subtitle,
                sampleRate: sampleRate,
                disableQuantize: disableQuantize,
                analysed: analysed,
                releaseDate: releaseDate,
                dateCreated: dateCreated,
                contentLink: contentLink,
                tag: tag,
                modifiedByRBM: modifiedByRBM,
                hotCueAutoLoad: hotCueAutoLoad,
                deliveryControl: deliveryControl,
                deliveryComment: deliveryComment,
                cueUpdated: cueUpdated,
                analysisUpdated: analysisUpdated,
                trackInfoUpdated: trackInfoUpdated,
                lyricist: lyricist,
                isrc: isrc,
                samplerTrackInfo: samplerTrackInfo,
                samplerPlayOffset: samplerPlayOffset,
                samplerGain: samplerGain,
                videoAssociate: videoAssociate,
                lyricStatus: lyricStatus,
                serviceID: serviceID,
                orgFolderPath: orgFolderPath,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                extInfo: extInfo,
                rbFileId: rbFileId,
                deviceID: deviceID,
                rbLocalFolderPath: rbLocalFolderPath,
                srcID: srcID,
                srcTitle: srcTitle,
                srcArtistName: srcArtistName,
                srcAlbumName: srcAlbumName,
                srcLength: srcLength,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdContentProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdContent,
      DjmdContentData,
      $DjmdContentFilterComposer,
      $DjmdContentOrderingComposer,
      $DjmdContentAnnotationComposer,
      $DjmdContentCreateCompanionBuilder,
      $DjmdContentUpdateCompanionBuilder,
      (
        DjmdContentData,
        BaseReferences<_$RekordboxDatabase, DjmdContent, DjmdContentData>,
      ),
      DjmdContentData,
      PrefetchHooks Function()
    >;
typedef $DjmdCueCreateCompanionBuilder =
    DjmdCueCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> inMsec,
      Value<int?> inFrame,
      Value<int?> inMpegFrame,
      Value<int?> inMpegAbs,
      Value<int?> outMsec,
      Value<int?> outFrame,
      Value<int?> outMpegFrame,
      Value<int?> outMpegAbs,
      Value<int?> kind,
      Value<int?> color,
      Value<int?> colorTableIndex,
      Value<int?> activeLoop,
      Value<String?> comment,
      Value<int?> beatLoopSize,
      Value<int?> cueMicrosec,
      Value<String?> inPointSeekInfo,
      Value<String?> outPointSeekInfo,
      Value<String?> contentUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdCueUpdateCompanionBuilder =
    DjmdCueCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> inMsec,
      Value<int?> inFrame,
      Value<int?> inMpegFrame,
      Value<int?> inMpegAbs,
      Value<int?> outMsec,
      Value<int?> outFrame,
      Value<int?> outMpegFrame,
      Value<int?> outMpegAbs,
      Value<int?> kind,
      Value<int?> color,
      Value<int?> colorTableIndex,
      Value<int?> activeLoop,
      Value<String?> comment,
      Value<int?> beatLoopSize,
      Value<int?> cueMicrosec,
      Value<String?> inPointSeekInfo,
      Value<String?> outPointSeekInfo,
      Value<String?> contentUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdCueFilterComposer extends Composer<_$RekordboxDatabase, DjmdCue> {
  $DjmdCueFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inFrame => $composableBuilder(
    column: $table.inFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMpegAbs => $composableBuilder(
    column: $table.inMpegAbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outFrame => $composableBuilder(
    column: $table.outFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get kind => $composableBuilder(
    column: $table.kind,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get comment => $composableBuilder(
    column: $table.comment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdCueOrderingComposer extends Composer<_$RekordboxDatabase, DjmdCue> {
  $DjmdCueOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inFrame => $composableBuilder(
    column: $table.inFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMpegAbs => $composableBuilder(
    column: $table.inMpegAbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outFrame => $composableBuilder(
    column: $table.outFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get kind => $composableBuilder(
    column: $table.kind,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get comment => $composableBuilder(
    column: $table.comment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdCueAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdCue> {
  $DjmdCueAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get inMsec =>
      $composableBuilder(column: $table.inMsec, builder: (column) => column);

  GeneratedColumn<int> get inFrame =>
      $composableBuilder(column: $table.inFrame, builder: (column) => column);

  GeneratedColumn<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => column,
  );

  GeneratedColumn<int> get inMpegAbs =>
      $composableBuilder(column: $table.inMpegAbs, builder: (column) => column);

  GeneratedColumn<int> get outMsec =>
      $composableBuilder(column: $table.outMsec, builder: (column) => column);

  GeneratedColumn<int> get outFrame =>
      $composableBuilder(column: $table.outFrame, builder: (column) => column);

  GeneratedColumn<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => column,
  );

  GeneratedColumn<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => column,
  );

  GeneratedColumn<int> get kind =>
      $composableBuilder(column: $table.kind, builder: (column) => column);

  GeneratedColumn<int> get color =>
      $composableBuilder(column: $table.color, builder: (column) => column);

  GeneratedColumn<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => column,
  );

  GeneratedColumn<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => column,
  );

  GeneratedColumn<String> get comment =>
      $composableBuilder(column: $table.comment, builder: (column) => column);

  GeneratedColumn<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => column,
  );

  GeneratedColumn<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => column,
  );

  GeneratedColumn<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentUUID => $composableBuilder(
    column: $table.contentUUID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdCueTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdCue,
          DjmdCueData,
          $DjmdCueFilterComposer,
          $DjmdCueOrderingComposer,
          $DjmdCueAnnotationComposer,
          $DjmdCueCreateCompanionBuilder,
          $DjmdCueUpdateCompanionBuilder,
          (
            DjmdCueData,
            BaseReferences<_$RekordboxDatabase, DjmdCue, DjmdCueData>,
          ),
          DjmdCueData,
          PrefetchHooks Function()
        > {
  $DjmdCueTableManager(_$RekordboxDatabase db, DjmdCue table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdCueFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdCueOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdCueAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> inFrame = const Value.absent(),
                Value<int?> inMpegFrame = const Value.absent(),
                Value<int?> inMpegAbs = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> outFrame = const Value.absent(),
                Value<int?> outMpegFrame = const Value.absent(),
                Value<int?> outMpegAbs = const Value.absent(),
                Value<int?> kind = const Value.absent(),
                Value<int?> color = const Value.absent(),
                Value<int?> colorTableIndex = const Value.absent(),
                Value<int?> activeLoop = const Value.absent(),
                Value<String?> comment = const Value.absent(),
                Value<int?> beatLoopSize = const Value.absent(),
                Value<int?> cueMicrosec = const Value.absent(),
                Value<String?> inPointSeekInfo = const Value.absent(),
                Value<String?> outPointSeekInfo = const Value.absent(),
                Value<String?> contentUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdCueCompanion(
                id: id,
                contentID: contentID,
                inMsec: inMsec,
                inFrame: inFrame,
                inMpegFrame: inMpegFrame,
                inMpegAbs: inMpegAbs,
                outMsec: outMsec,
                outFrame: outFrame,
                outMpegFrame: outMpegFrame,
                outMpegAbs: outMpegAbs,
                kind: kind,
                color: color,
                colorTableIndex: colorTableIndex,
                activeLoop: activeLoop,
                comment: comment,
                beatLoopSize: beatLoopSize,
                cueMicrosec: cueMicrosec,
                inPointSeekInfo: inPointSeekInfo,
                outPointSeekInfo: outPointSeekInfo,
                contentUUID: contentUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> inFrame = const Value.absent(),
                Value<int?> inMpegFrame = const Value.absent(),
                Value<int?> inMpegAbs = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> outFrame = const Value.absent(),
                Value<int?> outMpegFrame = const Value.absent(),
                Value<int?> outMpegAbs = const Value.absent(),
                Value<int?> kind = const Value.absent(),
                Value<int?> color = const Value.absent(),
                Value<int?> colorTableIndex = const Value.absent(),
                Value<int?> activeLoop = const Value.absent(),
                Value<String?> comment = const Value.absent(),
                Value<int?> beatLoopSize = const Value.absent(),
                Value<int?> cueMicrosec = const Value.absent(),
                Value<String?> inPointSeekInfo = const Value.absent(),
                Value<String?> outPointSeekInfo = const Value.absent(),
                Value<String?> contentUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdCueCompanion.insert(
                id: id,
                contentID: contentID,
                inMsec: inMsec,
                inFrame: inFrame,
                inMpegFrame: inMpegFrame,
                inMpegAbs: inMpegAbs,
                outMsec: outMsec,
                outFrame: outFrame,
                outMpegFrame: outMpegFrame,
                outMpegAbs: outMpegAbs,
                kind: kind,
                color: color,
                colorTableIndex: colorTableIndex,
                activeLoop: activeLoop,
                comment: comment,
                beatLoopSize: beatLoopSize,
                cueMicrosec: cueMicrosec,
                inPointSeekInfo: inPointSeekInfo,
                outPointSeekInfo: outPointSeekInfo,
                contentUUID: contentUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdCueProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdCue,
      DjmdCueData,
      $DjmdCueFilterComposer,
      $DjmdCueOrderingComposer,
      $DjmdCueAnnotationComposer,
      $DjmdCueCreateCompanionBuilder,
      $DjmdCueUpdateCompanionBuilder,
      (DjmdCueData, BaseReferences<_$RekordboxDatabase, DjmdCue, DjmdCueData>),
      DjmdCueData,
      PrefetchHooks Function()
    >;
typedef $DjmdDeviceCreateCompanionBuilder =
    DjmdDeviceCompanion Function({
      Value<String?> id,
      Value<String?> masterDBID,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdDeviceUpdateCompanionBuilder =
    DjmdDeviceCompanion Function({
      Value<String?> id,
      Value<String?> masterDBID,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdDeviceFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdDevice> {
  $DjmdDeviceFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdDeviceOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdDevice> {
  $DjmdDeviceOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdDeviceAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdDevice> {
  $DjmdDeviceAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get masterDBID => $composableBuilder(
    column: $table.masterDBID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdDeviceTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdDevice,
          DjmdDeviceData,
          $DjmdDeviceFilterComposer,
          $DjmdDeviceOrderingComposer,
          $DjmdDeviceAnnotationComposer,
          $DjmdDeviceCreateCompanionBuilder,
          $DjmdDeviceUpdateCompanionBuilder,
          (
            DjmdDeviceData,
            BaseReferences<_$RekordboxDatabase, DjmdDevice, DjmdDeviceData>,
          ),
          DjmdDeviceData,
          PrefetchHooks Function()
        > {
  $DjmdDeviceTableManager(_$RekordboxDatabase db, DjmdDevice table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdDeviceFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdDeviceOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdDeviceAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> masterDBID = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdDeviceCompanion(
                id: id,
                masterDBID: masterDBID,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> masterDBID = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdDeviceCompanion.insert(
                id: id,
                masterDBID: masterDBID,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdDeviceProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdDevice,
      DjmdDeviceData,
      $DjmdDeviceFilterComposer,
      $DjmdDeviceOrderingComposer,
      $DjmdDeviceAnnotationComposer,
      $DjmdDeviceCreateCompanionBuilder,
      $DjmdDeviceUpdateCompanionBuilder,
      (
        DjmdDeviceData,
        BaseReferences<_$RekordboxDatabase, DjmdDevice, DjmdDeviceData>,
      ),
      DjmdDeviceData,
      PrefetchHooks Function()
    >;
typedef $DjmdGenreCreateCompanionBuilder =
    DjmdGenreCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdGenreUpdateCompanionBuilder =
    DjmdGenreCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdGenreFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdGenre> {
  $DjmdGenreFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdGenreOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdGenre> {
  $DjmdGenreOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdGenreAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdGenre> {
  $DjmdGenreAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdGenreTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdGenre,
          DjmdGenreData,
          $DjmdGenreFilterComposer,
          $DjmdGenreOrderingComposer,
          $DjmdGenreAnnotationComposer,
          $DjmdGenreCreateCompanionBuilder,
          $DjmdGenreUpdateCompanionBuilder,
          (
            DjmdGenreData,
            BaseReferences<_$RekordboxDatabase, DjmdGenre, DjmdGenreData>,
          ),
          DjmdGenreData,
          PrefetchHooks Function()
        > {
  $DjmdGenreTableManager(_$RekordboxDatabase db, DjmdGenre table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdGenreFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdGenreOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdGenreAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdGenreCompanion(
                id: id,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdGenreCompanion.insert(
                id: id,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdGenreProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdGenre,
      DjmdGenreData,
      $DjmdGenreFilterComposer,
      $DjmdGenreOrderingComposer,
      $DjmdGenreAnnotationComposer,
      $DjmdGenreCreateCompanionBuilder,
      $DjmdGenreUpdateCompanionBuilder,
      (
        DjmdGenreData,
        BaseReferences<_$RekordboxDatabase, DjmdGenre, DjmdGenreData>,
      ),
      DjmdGenreData,
      PrefetchHooks Function()
    >;
typedef $DjmdHistoryCreateCompanionBuilder =
    DjmdHistoryCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> dateCreated,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdHistoryUpdateCompanionBuilder =
    DjmdHistoryCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> dateCreated,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdHistoryFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdHistory> {
  $DjmdHistoryFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdHistoryOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdHistory> {
  $DjmdHistoryOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdHistoryAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdHistory> {
  $DjmdHistoryAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get dateCreated => $composableBuilder(
    column: $table.dateCreated,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdHistoryTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdHistory,
          DjmdHistoryData,
          $DjmdHistoryFilterComposer,
          $DjmdHistoryOrderingComposer,
          $DjmdHistoryAnnotationComposer,
          $DjmdHistoryCreateCompanionBuilder,
          $DjmdHistoryUpdateCompanionBuilder,
          (
            DjmdHistoryData,
            BaseReferences<_$RekordboxDatabase, DjmdHistory, DjmdHistoryData>,
          ),
          DjmdHistoryData,
          PrefetchHooks Function()
        > {
  $DjmdHistoryTableManager(_$RekordboxDatabase db, DjmdHistory table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdHistoryFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdHistoryOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdHistoryAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> dateCreated = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdHistoryCompanion(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                dateCreated: dateCreated,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> dateCreated = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdHistoryCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                dateCreated: dateCreated,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdHistoryProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdHistory,
      DjmdHistoryData,
      $DjmdHistoryFilterComposer,
      $DjmdHistoryOrderingComposer,
      $DjmdHistoryAnnotationComposer,
      $DjmdHistoryCreateCompanionBuilder,
      $DjmdHistoryUpdateCompanionBuilder,
      (
        DjmdHistoryData,
        BaseReferences<_$RekordboxDatabase, DjmdHistory, DjmdHistoryData>,
      ),
      DjmdHistoryData,
      PrefetchHooks Function()
    >;
typedef $DjmdHotCueBanklistCreateCompanionBuilder =
    DjmdHotCueBanklistCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<String?> imagePath,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdHotCueBanklistUpdateCompanionBuilder =
    DjmdHotCueBanklistCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<String?> imagePath,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdHotCueBanklistFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdHotCueBanklist> {
  $DjmdHotCueBanklistFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdHotCueBanklistOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdHotCueBanklist> {
  $DjmdHotCueBanklistOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdHotCueBanklistAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdHotCueBanklist> {
  $DjmdHotCueBanklistAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get imagePath =>
      $composableBuilder(column: $table.imagePath, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdHotCueBanklistTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdHotCueBanklist,
          DjmdHotCueBanklistData,
          $DjmdHotCueBanklistFilterComposer,
          $DjmdHotCueBanklistOrderingComposer,
          $DjmdHotCueBanklistAnnotationComposer,
          $DjmdHotCueBanklistCreateCompanionBuilder,
          $DjmdHotCueBanklistUpdateCompanionBuilder,
          (
            DjmdHotCueBanklistData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdHotCueBanklist,
              DjmdHotCueBanklistData
            >,
          ),
          DjmdHotCueBanklistData,
          PrefetchHooks Function()
        > {
  $DjmdHotCueBanklistTableManager(
    _$RekordboxDatabase db,
    DjmdHotCueBanklist table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdHotCueBanklistFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdHotCueBanklistOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdHotCueBanklistAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdHotCueBanklistCompanion(
                id: id,
                seq: seq,
                name: name,
                imagePath: imagePath,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdHotCueBanklistCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                imagePath: imagePath,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdHotCueBanklistProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdHotCueBanklist,
      DjmdHotCueBanklistData,
      $DjmdHotCueBanklistFilterComposer,
      $DjmdHotCueBanklistOrderingComposer,
      $DjmdHotCueBanklistAnnotationComposer,
      $DjmdHotCueBanklistCreateCompanionBuilder,
      $DjmdHotCueBanklistUpdateCompanionBuilder,
      (
        DjmdHotCueBanklistData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdHotCueBanklist,
          DjmdHotCueBanklistData
        >,
      ),
      DjmdHotCueBanklistData,
      PrefetchHooks Function()
    >;
typedef $DjmdKeyCreateCompanionBuilder =
    DjmdKeyCompanion Function({
      Value<String?> id,
      Value<String?> scaleName,
      Value<int?> seq,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdKeyUpdateCompanionBuilder =
    DjmdKeyCompanion Function({
      Value<String?> id,
      Value<String?> scaleName,
      Value<int?> seq,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdKeyFilterComposer extends Composer<_$RekordboxDatabase, DjmdKey> {
  $DjmdKeyFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get scaleName => $composableBuilder(
    column: $table.scaleName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdKeyOrderingComposer extends Composer<_$RekordboxDatabase, DjmdKey> {
  $DjmdKeyOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get scaleName => $composableBuilder(
    column: $table.scaleName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdKeyAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdKey> {
  $DjmdKeyAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get scaleName =>
      $composableBuilder(column: $table.scaleName, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdKeyTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdKey,
          DjmdKeyData,
          $DjmdKeyFilterComposer,
          $DjmdKeyOrderingComposer,
          $DjmdKeyAnnotationComposer,
          $DjmdKeyCreateCompanionBuilder,
          $DjmdKeyUpdateCompanionBuilder,
          (
            DjmdKeyData,
            BaseReferences<_$RekordboxDatabase, DjmdKey, DjmdKeyData>,
          ),
          DjmdKeyData,
          PrefetchHooks Function()
        > {
  $DjmdKeyTableManager(_$RekordboxDatabase db, DjmdKey table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdKeyFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdKeyOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdKeyAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> scaleName = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdKeyCompanion(
                id: id,
                scaleName: scaleName,
                seq: seq,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> scaleName = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdKeyCompanion.insert(
                id: id,
                scaleName: scaleName,
                seq: seq,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdKeyProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdKey,
      DjmdKeyData,
      $DjmdKeyFilterComposer,
      $DjmdKeyOrderingComposer,
      $DjmdKeyAnnotationComposer,
      $DjmdKeyCreateCompanionBuilder,
      $DjmdKeyUpdateCompanionBuilder,
      (DjmdKeyData, BaseReferences<_$RekordboxDatabase, DjmdKey, DjmdKeyData>),
      DjmdKeyData,
      PrefetchHooks Function()
    >;
typedef $DjmdLabelCreateCompanionBuilder =
    DjmdLabelCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdLabelUpdateCompanionBuilder =
    DjmdLabelCompanion Function({
      Value<String?> id,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdLabelFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdLabel> {
  $DjmdLabelFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdLabelOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdLabel> {
  $DjmdLabelOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdLabelAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdLabel> {
  $DjmdLabelAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdLabelTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdLabel,
          DjmdLabelData,
          $DjmdLabelFilterComposer,
          $DjmdLabelOrderingComposer,
          $DjmdLabelAnnotationComposer,
          $DjmdLabelCreateCompanionBuilder,
          $DjmdLabelUpdateCompanionBuilder,
          (
            DjmdLabelData,
            BaseReferences<_$RekordboxDatabase, DjmdLabel, DjmdLabelData>,
          ),
          DjmdLabelData,
          PrefetchHooks Function()
        > {
  $DjmdLabelTableManager(_$RekordboxDatabase db, DjmdLabel table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdLabelFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdLabelOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdLabelAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdLabelCompanion(
                id: id,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdLabelCompanion.insert(
                id: id,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdLabelProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdLabel,
      DjmdLabelData,
      $DjmdLabelFilterComposer,
      $DjmdLabelOrderingComposer,
      $DjmdLabelAnnotationComposer,
      $DjmdLabelCreateCompanionBuilder,
      $DjmdLabelUpdateCompanionBuilder,
      (
        DjmdLabelData,
        BaseReferences<_$RekordboxDatabase, DjmdLabel, DjmdLabelData>,
      ),
      DjmdLabelData,
      PrefetchHooks Function()
    >;
typedef $DjmdMenuItemsCreateCompanionBuilder =
    DjmdMenuItemsCompanion Function({
      Value<String?> id,
      Value<int?> itemClass,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdMenuItemsUpdateCompanionBuilder =
    DjmdMenuItemsCompanion Function({
      Value<String?> id,
      Value<int?> itemClass,
      Value<String?> name,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdMenuItemsFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdMenuItems> {
  $DjmdMenuItemsFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get itemClass => $composableBuilder(
    column: $table.itemClass,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdMenuItemsOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdMenuItems> {
  $DjmdMenuItemsOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get itemClass => $composableBuilder(
    column: $table.itemClass,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdMenuItemsAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdMenuItems> {
  $DjmdMenuItemsAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get itemClass =>
      $composableBuilder(column: $table.itemClass, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdMenuItemsTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdMenuItems,
          DjmdMenuItem,
          $DjmdMenuItemsFilterComposer,
          $DjmdMenuItemsOrderingComposer,
          $DjmdMenuItemsAnnotationComposer,
          $DjmdMenuItemsCreateCompanionBuilder,
          $DjmdMenuItemsUpdateCompanionBuilder,
          (
            DjmdMenuItem,
            BaseReferences<_$RekordboxDatabase, DjmdMenuItems, DjmdMenuItem>,
          ),
          DjmdMenuItem,
          PrefetchHooks Function()
        > {
  $DjmdMenuItemsTableManager(_$RekordboxDatabase db, DjmdMenuItems table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdMenuItemsFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdMenuItemsOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdMenuItemsAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> itemClass = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdMenuItemsCompanion(
                id: id,
                itemClass: itemClass,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> itemClass = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdMenuItemsCompanion.insert(
                id: id,
                itemClass: itemClass,
                name: name,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdMenuItemsProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdMenuItems,
      DjmdMenuItem,
      $DjmdMenuItemsFilterComposer,
      $DjmdMenuItemsOrderingComposer,
      $DjmdMenuItemsAnnotationComposer,
      $DjmdMenuItemsCreateCompanionBuilder,
      $DjmdMenuItemsUpdateCompanionBuilder,
      (
        DjmdMenuItem,
        BaseReferences<_$RekordboxDatabase, DjmdMenuItems, DjmdMenuItem>,
      ),
      DjmdMenuItem,
      PrefetchHooks Function()
    >;
typedef $DjmdMixerParamCreateCompanionBuilder =
    DjmdMixerParamCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> gainHigh,
      Value<int?> gainLow,
      Value<int?> peakHigh,
      Value<int?> peakLow,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdMixerParamUpdateCompanionBuilder =
    DjmdMixerParamCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> gainHigh,
      Value<int?> gainLow,
      Value<int?> peakHigh,
      Value<int?> peakLow,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdMixerParamFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdMixerParam> {
  $DjmdMixerParamFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get gainHigh => $composableBuilder(
    column: $table.gainHigh,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get gainLow => $composableBuilder(
    column: $table.gainLow,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get peakHigh => $composableBuilder(
    column: $table.peakHigh,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get peakLow => $composableBuilder(
    column: $table.peakLow,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdMixerParamOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdMixerParam> {
  $DjmdMixerParamOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get gainHigh => $composableBuilder(
    column: $table.gainHigh,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get gainLow => $composableBuilder(
    column: $table.gainLow,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get peakHigh => $composableBuilder(
    column: $table.peakHigh,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get peakLow => $composableBuilder(
    column: $table.peakLow,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdMixerParamAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdMixerParam> {
  $DjmdMixerParamAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get gainHigh =>
      $composableBuilder(column: $table.gainHigh, builder: (column) => column);

  GeneratedColumn<int> get gainLow =>
      $composableBuilder(column: $table.gainLow, builder: (column) => column);

  GeneratedColumn<int> get peakHigh =>
      $composableBuilder(column: $table.peakHigh, builder: (column) => column);

  GeneratedColumn<int> get peakLow =>
      $composableBuilder(column: $table.peakLow, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdMixerParamTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdMixerParam,
          DjmdMixerParamData,
          $DjmdMixerParamFilterComposer,
          $DjmdMixerParamOrderingComposer,
          $DjmdMixerParamAnnotationComposer,
          $DjmdMixerParamCreateCompanionBuilder,
          $DjmdMixerParamUpdateCompanionBuilder,
          (
            DjmdMixerParamData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdMixerParam,
              DjmdMixerParamData
            >,
          ),
          DjmdMixerParamData,
          PrefetchHooks Function()
        > {
  $DjmdMixerParamTableManager(_$RekordboxDatabase db, DjmdMixerParam table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdMixerParamFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdMixerParamOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdMixerParamAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> gainHigh = const Value.absent(),
                Value<int?> gainLow = const Value.absent(),
                Value<int?> peakHigh = const Value.absent(),
                Value<int?> peakLow = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdMixerParamCompanion(
                id: id,
                contentID: contentID,
                gainHigh: gainHigh,
                gainLow: gainLow,
                peakHigh: peakHigh,
                peakLow: peakLow,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> gainHigh = const Value.absent(),
                Value<int?> gainLow = const Value.absent(),
                Value<int?> peakHigh = const Value.absent(),
                Value<int?> peakLow = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdMixerParamCompanion.insert(
                id: id,
                contentID: contentID,
                gainHigh: gainHigh,
                gainLow: gainLow,
                peakHigh: peakHigh,
                peakLow: peakLow,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdMixerParamProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdMixerParam,
      DjmdMixerParamData,
      $DjmdMixerParamFilterComposer,
      $DjmdMixerParamOrderingComposer,
      $DjmdMixerParamAnnotationComposer,
      $DjmdMixerParamCreateCompanionBuilder,
      $DjmdMixerParamUpdateCompanionBuilder,
      (
        DjmdMixerParamData,
        BaseReferences<_$RekordboxDatabase, DjmdMixerParam, DjmdMixerParamData>,
      ),
      DjmdMixerParamData,
      PrefetchHooks Function()
    >;
typedef $DjmdMyTagCreateCompanionBuilder =
    DjmdMyTagCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdMyTagUpdateCompanionBuilder =
    DjmdMyTagCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdMyTagFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdMyTag> {
  $DjmdMyTagFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdMyTagOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdMyTag> {
  $DjmdMyTagOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdMyTagAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdMyTag> {
  $DjmdMyTagAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdMyTagTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdMyTag,
          DjmdMyTagData,
          $DjmdMyTagFilterComposer,
          $DjmdMyTagOrderingComposer,
          $DjmdMyTagAnnotationComposer,
          $DjmdMyTagCreateCompanionBuilder,
          $DjmdMyTagUpdateCompanionBuilder,
          (
            DjmdMyTagData,
            BaseReferences<_$RekordboxDatabase, DjmdMyTag, DjmdMyTagData>,
          ),
          DjmdMyTagData,
          PrefetchHooks Function()
        > {
  $DjmdMyTagTableManager(_$RekordboxDatabase db, DjmdMyTag table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdMyTagFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdMyTagOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdMyTagAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdMyTagCompanion(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdMyTagCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdMyTagProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdMyTag,
      DjmdMyTagData,
      $DjmdMyTagFilterComposer,
      $DjmdMyTagOrderingComposer,
      $DjmdMyTagAnnotationComposer,
      $DjmdMyTagCreateCompanionBuilder,
      $DjmdMyTagUpdateCompanionBuilder,
      (
        DjmdMyTagData,
        BaseReferences<_$RekordboxDatabase, DjmdMyTag, DjmdMyTagData>,
      ),
      DjmdMyTagData,
      PrefetchHooks Function()
    >;
typedef $DjmdPlaylistCreateCompanionBuilder =
    DjmdPlaylistCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<String?> imagePath,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> smartList,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdPlaylistUpdateCompanionBuilder =
    DjmdPlaylistCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<String?> imagePath,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> smartList,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdPlaylistFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdPlaylist> {
  $DjmdPlaylistFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get smartList => $composableBuilder(
    column: $table.smartList,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdPlaylistOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdPlaylist> {
  $DjmdPlaylistOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get imagePath => $composableBuilder(
    column: $table.imagePath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get smartList => $composableBuilder(
    column: $table.smartList,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdPlaylistAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdPlaylist> {
  $DjmdPlaylistAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<String> get imagePath =>
      $composableBuilder(column: $table.imagePath, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get smartList =>
      $composableBuilder(column: $table.smartList, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdPlaylistTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdPlaylist,
          DjmdPlaylistData,
          $DjmdPlaylistFilterComposer,
          $DjmdPlaylistOrderingComposer,
          $DjmdPlaylistAnnotationComposer,
          $DjmdPlaylistCreateCompanionBuilder,
          $DjmdPlaylistUpdateCompanionBuilder,
          (
            DjmdPlaylistData,
            BaseReferences<_$RekordboxDatabase, DjmdPlaylist, DjmdPlaylistData>,
          ),
          DjmdPlaylistData,
          PrefetchHooks Function()
        > {
  $DjmdPlaylistTableManager(_$RekordboxDatabase db, DjmdPlaylist table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdPlaylistFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdPlaylistOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdPlaylistAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> smartList = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdPlaylistCompanion(
                id: id,
                seq: seq,
                name: name,
                imagePath: imagePath,
                attribute: attribute,
                parentID: parentID,
                smartList: smartList,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<String?> imagePath = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> smartList = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdPlaylistCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                imagePath: imagePath,
                attribute: attribute,
                parentID: parentID,
                smartList: smartList,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdPlaylistProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdPlaylist,
      DjmdPlaylistData,
      $DjmdPlaylistFilterComposer,
      $DjmdPlaylistOrderingComposer,
      $DjmdPlaylistAnnotationComposer,
      $DjmdPlaylistCreateCompanionBuilder,
      $DjmdPlaylistUpdateCompanionBuilder,
      (
        DjmdPlaylistData,
        BaseReferences<_$RekordboxDatabase, DjmdPlaylist, DjmdPlaylistData>,
      ),
      DjmdPlaylistData,
      PrefetchHooks Function()
    >;
typedef $DjmdPropertyCreateCompanionBuilder =
    DjmdPropertyCompanion Function({
      Value<String?> dbid,
      Value<String?> dBVersion,
      Value<String?> baseDBDrive,
      Value<String?> currentDBDrive,
      Value<String?> deviceID,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> reserved5,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdPropertyUpdateCompanionBuilder =
    DjmdPropertyCompanion Function({
      Value<String?> dbid,
      Value<String?> dBVersion,
      Value<String?> baseDBDrive,
      Value<String?> currentDBDrive,
      Value<String?> deviceID,
      Value<String?> reserved1,
      Value<String?> reserved2,
      Value<String?> reserved3,
      Value<String?> reserved4,
      Value<String?> reserved5,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdPropertyFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdProperty> {
  $DjmdPropertyFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get dbid => $composableBuilder(
    column: $table.dbid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get dBVersion => $composableBuilder(
    column: $table.dBVersion,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get baseDBDrive => $composableBuilder(
    column: $table.baseDBDrive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get currentDBDrive => $composableBuilder(
    column: $table.currentDBDrive,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get deviceID => $composableBuilder(
    column: $table.deviceID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get reserved5 => $composableBuilder(
    column: $table.reserved5,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdPropertyOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdProperty> {
  $DjmdPropertyOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get dbid => $composableBuilder(
    column: $table.dbid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get dBVersion => $composableBuilder(
    column: $table.dBVersion,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get baseDBDrive => $composableBuilder(
    column: $table.baseDBDrive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get currentDBDrive => $composableBuilder(
    column: $table.currentDBDrive,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get deviceID => $composableBuilder(
    column: $table.deviceID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved1 => $composableBuilder(
    column: $table.reserved1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved2 => $composableBuilder(
    column: $table.reserved2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved3 => $composableBuilder(
    column: $table.reserved3,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved4 => $composableBuilder(
    column: $table.reserved4,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get reserved5 => $composableBuilder(
    column: $table.reserved5,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdPropertyAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdProperty> {
  $DjmdPropertyAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get dbid =>
      $composableBuilder(column: $table.dbid, builder: (column) => column);

  GeneratedColumn<String> get dBVersion =>
      $composableBuilder(column: $table.dBVersion, builder: (column) => column);

  GeneratedColumn<String> get baseDBDrive => $composableBuilder(
    column: $table.baseDBDrive,
    builder: (column) => column,
  );

  GeneratedColumn<String> get currentDBDrive => $composableBuilder(
    column: $table.currentDBDrive,
    builder: (column) => column,
  );

  GeneratedColumn<String> get deviceID =>
      $composableBuilder(column: $table.deviceID, builder: (column) => column);

  GeneratedColumn<String> get reserved1 =>
      $composableBuilder(column: $table.reserved1, builder: (column) => column);

  GeneratedColumn<String> get reserved2 =>
      $composableBuilder(column: $table.reserved2, builder: (column) => column);

  GeneratedColumn<String> get reserved3 =>
      $composableBuilder(column: $table.reserved3, builder: (column) => column);

  GeneratedColumn<String> get reserved4 =>
      $composableBuilder(column: $table.reserved4, builder: (column) => column);

  GeneratedColumn<String> get reserved5 =>
      $composableBuilder(column: $table.reserved5, builder: (column) => column);

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdPropertyTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdProperty,
          DjmdPropertyData,
          $DjmdPropertyFilterComposer,
          $DjmdPropertyOrderingComposer,
          $DjmdPropertyAnnotationComposer,
          $DjmdPropertyCreateCompanionBuilder,
          $DjmdPropertyUpdateCompanionBuilder,
          (
            DjmdPropertyData,
            BaseReferences<_$RekordboxDatabase, DjmdProperty, DjmdPropertyData>,
          ),
          DjmdPropertyData,
          PrefetchHooks Function()
        > {
  $DjmdPropertyTableManager(_$RekordboxDatabase db, DjmdProperty table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdPropertyFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdPropertyOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdPropertyAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> dbid = const Value.absent(),
                Value<String?> dBVersion = const Value.absent(),
                Value<String?> baseDBDrive = const Value.absent(),
                Value<String?> currentDBDrive = const Value.absent(),
                Value<String?> deviceID = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> reserved5 = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdPropertyCompanion(
                dbid: dbid,
                dBVersion: dBVersion,
                baseDBDrive: baseDBDrive,
                currentDBDrive: currentDBDrive,
                deviceID: deviceID,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                reserved5: reserved5,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> dbid = const Value.absent(),
                Value<String?> dBVersion = const Value.absent(),
                Value<String?> baseDBDrive = const Value.absent(),
                Value<String?> currentDBDrive = const Value.absent(),
                Value<String?> deviceID = const Value.absent(),
                Value<String?> reserved1 = const Value.absent(),
                Value<String?> reserved2 = const Value.absent(),
                Value<String?> reserved3 = const Value.absent(),
                Value<String?> reserved4 = const Value.absent(),
                Value<String?> reserved5 = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdPropertyCompanion.insert(
                dbid: dbid,
                dBVersion: dBVersion,
                baseDBDrive: baseDBDrive,
                currentDBDrive: currentDBDrive,
                deviceID: deviceID,
                reserved1: reserved1,
                reserved2: reserved2,
                reserved3: reserved3,
                reserved4: reserved4,
                reserved5: reserved5,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdPropertyProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdProperty,
      DjmdPropertyData,
      $DjmdPropertyFilterComposer,
      $DjmdPropertyOrderingComposer,
      $DjmdPropertyAnnotationComposer,
      $DjmdPropertyCreateCompanionBuilder,
      $DjmdPropertyUpdateCompanionBuilder,
      (
        DjmdPropertyData,
        BaseReferences<_$RekordboxDatabase, DjmdProperty, DjmdPropertyData>,
      ),
      DjmdPropertyData,
      PrefetchHooks Function()
    >;
typedef $DjmdRecommendLikeCreateCompanionBuilder =
    DjmdRecommendLikeCompanion Function({
      Value<String?> id,
      Value<String?> contentID1,
      Value<String?> contentID2,
      Value<int?> likeRate,
      Value<int?> dataCreatedH,
      Value<int?> dataCreatedL,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdRecommendLikeUpdateCompanionBuilder =
    DjmdRecommendLikeCompanion Function({
      Value<String?> id,
      Value<String?> contentID1,
      Value<String?> contentID2,
      Value<int?> likeRate,
      Value<int?> dataCreatedH,
      Value<int?> dataCreatedL,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdRecommendLikeFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdRecommendLike> {
  $DjmdRecommendLikeFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID1 => $composableBuilder(
    column: $table.contentID1,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID2 => $composableBuilder(
    column: $table.contentID2,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get likeRate => $composableBuilder(
    column: $table.likeRate,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get dataCreatedH => $composableBuilder(
    column: $table.dataCreatedH,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get dataCreatedL => $composableBuilder(
    column: $table.dataCreatedL,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdRecommendLikeOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdRecommendLike> {
  $DjmdRecommendLikeOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID1 => $composableBuilder(
    column: $table.contentID1,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID2 => $composableBuilder(
    column: $table.contentID2,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get likeRate => $composableBuilder(
    column: $table.likeRate,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get dataCreatedH => $composableBuilder(
    column: $table.dataCreatedH,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get dataCreatedL => $composableBuilder(
    column: $table.dataCreatedL,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdRecommendLikeAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdRecommendLike> {
  $DjmdRecommendLikeAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID1 => $composableBuilder(
    column: $table.contentID1,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentID2 => $composableBuilder(
    column: $table.contentID2,
    builder: (column) => column,
  );

  GeneratedColumn<int> get likeRate =>
      $composableBuilder(column: $table.likeRate, builder: (column) => column);

  GeneratedColumn<int> get dataCreatedH => $composableBuilder(
    column: $table.dataCreatedH,
    builder: (column) => column,
  );

  GeneratedColumn<int> get dataCreatedL => $composableBuilder(
    column: $table.dataCreatedL,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdRecommendLikeTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdRecommendLike,
          DjmdRecommendLikeData,
          $DjmdRecommendLikeFilterComposer,
          $DjmdRecommendLikeOrderingComposer,
          $DjmdRecommendLikeAnnotationComposer,
          $DjmdRecommendLikeCreateCompanionBuilder,
          $DjmdRecommendLikeUpdateCompanionBuilder,
          (
            DjmdRecommendLikeData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdRecommendLike,
              DjmdRecommendLikeData
            >,
          ),
          DjmdRecommendLikeData,
          PrefetchHooks Function()
        > {
  $DjmdRecommendLikeTableManager(
    _$RekordboxDatabase db,
    DjmdRecommendLike table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdRecommendLikeFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdRecommendLikeOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdRecommendLikeAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID1 = const Value.absent(),
                Value<String?> contentID2 = const Value.absent(),
                Value<int?> likeRate = const Value.absent(),
                Value<int?> dataCreatedH = const Value.absent(),
                Value<int?> dataCreatedL = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdRecommendLikeCompanion(
                id: id,
                contentID1: contentID1,
                contentID2: contentID2,
                likeRate: likeRate,
                dataCreatedH: dataCreatedH,
                dataCreatedL: dataCreatedL,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID1 = const Value.absent(),
                Value<String?> contentID2 = const Value.absent(),
                Value<int?> likeRate = const Value.absent(),
                Value<int?> dataCreatedH = const Value.absent(),
                Value<int?> dataCreatedL = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdRecommendLikeCompanion.insert(
                id: id,
                contentID1: contentID1,
                contentID2: contentID2,
                likeRate: likeRate,
                dataCreatedH: dataCreatedH,
                dataCreatedL: dataCreatedL,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdRecommendLikeProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdRecommendLike,
      DjmdRecommendLikeData,
      $DjmdRecommendLikeFilterComposer,
      $DjmdRecommendLikeOrderingComposer,
      $DjmdRecommendLikeAnnotationComposer,
      $DjmdRecommendLikeCreateCompanionBuilder,
      $DjmdRecommendLikeUpdateCompanionBuilder,
      (
        DjmdRecommendLikeData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdRecommendLike,
          DjmdRecommendLikeData
        >,
      ),
      DjmdRecommendLikeData,
      PrefetchHooks Function()
    >;
typedef $DjmdRelatedTracksCreateCompanionBuilder =
    DjmdRelatedTracksCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> criteria,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdRelatedTracksUpdateCompanionBuilder =
    DjmdRelatedTracksCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> criteria,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdRelatedTracksFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdRelatedTracks> {
  $DjmdRelatedTracksFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get criteria => $composableBuilder(
    column: $table.criteria,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdRelatedTracksOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdRelatedTracks> {
  $DjmdRelatedTracksOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get criteria => $composableBuilder(
    column: $table.criteria,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdRelatedTracksAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdRelatedTracks> {
  $DjmdRelatedTracksAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get criteria =>
      $composableBuilder(column: $table.criteria, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdRelatedTracksTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdRelatedTracks,
          DjmdRelatedTrack,
          $DjmdRelatedTracksFilterComposer,
          $DjmdRelatedTracksOrderingComposer,
          $DjmdRelatedTracksAnnotationComposer,
          $DjmdRelatedTracksCreateCompanionBuilder,
          $DjmdRelatedTracksUpdateCompanionBuilder,
          (
            DjmdRelatedTrack,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdRelatedTracks,
              DjmdRelatedTrack
            >,
          ),
          DjmdRelatedTrack,
          PrefetchHooks Function()
        > {
  $DjmdRelatedTracksTableManager(
    _$RekordboxDatabase db,
    DjmdRelatedTracks table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdRelatedTracksFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdRelatedTracksOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdRelatedTracksAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> criteria = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdRelatedTracksCompanion(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                criteria: criteria,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> criteria = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdRelatedTracksCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                criteria: criteria,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdRelatedTracksProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdRelatedTracks,
      DjmdRelatedTrack,
      $DjmdRelatedTracksFilterComposer,
      $DjmdRelatedTracksOrderingComposer,
      $DjmdRelatedTracksAnnotationComposer,
      $DjmdRelatedTracksCreateCompanionBuilder,
      $DjmdRelatedTracksUpdateCompanionBuilder,
      (
        DjmdRelatedTrack,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdRelatedTracks,
          DjmdRelatedTrack
        >,
      ),
      DjmdRelatedTrack,
      PrefetchHooks Function()
    >;
typedef $DjmdSamplerCreateCompanionBuilder =
    DjmdSamplerCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSamplerUpdateCompanionBuilder =
    DjmdSamplerCompanion Function({
      Value<String?> id,
      Value<int?> seq,
      Value<String?> name,
      Value<int?> attribute,
      Value<String?> parentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSamplerFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSampler> {
  $DjmdSamplerFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSamplerOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSampler> {
  $DjmdSamplerOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get attribute => $composableBuilder(
    column: $table.attribute,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get parentID => $composableBuilder(
    column: $table.parentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSamplerAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSampler> {
  $DjmdSamplerAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<String> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<int> get attribute =>
      $composableBuilder(column: $table.attribute, builder: (column) => column);

  GeneratedColumn<String> get parentID =>
      $composableBuilder(column: $table.parentID, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSamplerTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSampler,
          DjmdSamplerData,
          $DjmdSamplerFilterComposer,
          $DjmdSamplerOrderingComposer,
          $DjmdSamplerAnnotationComposer,
          $DjmdSamplerCreateCompanionBuilder,
          $DjmdSamplerUpdateCompanionBuilder,
          (
            DjmdSamplerData,
            BaseReferences<_$RekordboxDatabase, DjmdSampler, DjmdSamplerData>,
          ),
          DjmdSamplerData,
          PrefetchHooks Function()
        > {
  $DjmdSamplerTableManager(_$RekordboxDatabase db, DjmdSampler table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSamplerFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSamplerOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSamplerAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSamplerCompanion(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<String?> name = const Value.absent(),
                Value<int?> attribute = const Value.absent(),
                Value<String?> parentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSamplerCompanion.insert(
                id: id,
                seq: seq,
                name: name,
                attribute: attribute,
                parentID: parentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSamplerProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSampler,
      DjmdSamplerData,
      $DjmdSamplerFilterComposer,
      $DjmdSamplerOrderingComposer,
      $DjmdSamplerAnnotationComposer,
      $DjmdSamplerCreateCompanionBuilder,
      $DjmdSamplerUpdateCompanionBuilder,
      (
        DjmdSamplerData,
        BaseReferences<_$RekordboxDatabase, DjmdSampler, DjmdSamplerData>,
      ),
      DjmdSamplerData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongHistoryCreateCompanionBuilder =
    DjmdSongHistoryCompanion Function({
      Value<String?> id,
      Value<String?> historyID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongHistoryUpdateCompanionBuilder =
    DjmdSongHistoryCompanion Function({
      Value<String?> id,
      Value<String?> historyID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongHistoryFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHistory> {
  $DjmdSongHistoryFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get historyID => $composableBuilder(
    column: $table.historyID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongHistoryOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHistory> {
  $DjmdSongHistoryOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get historyID => $composableBuilder(
    column: $table.historyID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongHistoryAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHistory> {
  $DjmdSongHistoryAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get historyID =>
      $composableBuilder(column: $table.historyID, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongHistoryTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongHistory,
          DjmdSongHistoryData,
          $DjmdSongHistoryFilterComposer,
          $DjmdSongHistoryOrderingComposer,
          $DjmdSongHistoryAnnotationComposer,
          $DjmdSongHistoryCreateCompanionBuilder,
          $DjmdSongHistoryUpdateCompanionBuilder,
          (
            DjmdSongHistoryData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongHistory,
              DjmdSongHistoryData
            >,
          ),
          DjmdSongHistoryData,
          PrefetchHooks Function()
        > {
  $DjmdSongHistoryTableManager(_$RekordboxDatabase db, DjmdSongHistory table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongHistoryFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongHistoryOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongHistoryAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> historyID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongHistoryCompanion(
                id: id,
                historyID: historyID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> historyID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongHistoryCompanion.insert(
                id: id,
                historyID: historyID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongHistoryProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongHistory,
      DjmdSongHistoryData,
      $DjmdSongHistoryFilterComposer,
      $DjmdSongHistoryOrderingComposer,
      $DjmdSongHistoryAnnotationComposer,
      $DjmdSongHistoryCreateCompanionBuilder,
      $DjmdSongHistoryUpdateCompanionBuilder,
      (
        DjmdSongHistoryData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongHistory,
          DjmdSongHistoryData
        >,
      ),
      DjmdSongHistoryData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongHotCueBanklistCreateCompanionBuilder =
    DjmdSongHotCueBanklistCompanion Function({
      Value<String?> id,
      Value<String?> hotCueBanklistID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> cueID,
      Value<int?> inMsec,
      Value<int?> inFrame,
      Value<int?> inMpegFrame,
      Value<int?> inMpegAbs,
      Value<int?> outMsec,
      Value<int?> outFrame,
      Value<int?> outMpegFrame,
      Value<int?> outMpegAbs,
      Value<int?> color,
      Value<int?> colorTableIndex,
      Value<int?> activeLoop,
      Value<String?> comment,
      Value<int?> beatLoopSize,
      Value<int?> cueMicrosec,
      Value<String?> inPointSeekInfo,
      Value<String?> outPointSeekInfo,
      Value<String?> hotCueBanklistUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongHotCueBanklistUpdateCompanionBuilder =
    DjmdSongHotCueBanklistCompanion Function({
      Value<String?> id,
      Value<String?> hotCueBanklistID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> cueID,
      Value<int?> inMsec,
      Value<int?> inFrame,
      Value<int?> inMpegFrame,
      Value<int?> inMpegAbs,
      Value<int?> outMsec,
      Value<int?> outFrame,
      Value<int?> outMpegFrame,
      Value<int?> outMpegAbs,
      Value<int?> color,
      Value<int?> colorTableIndex,
      Value<int?> activeLoop,
      Value<String?> comment,
      Value<int?> beatLoopSize,
      Value<int?> cueMicrosec,
      Value<String?> inPointSeekInfo,
      Value<String?> outPointSeekInfo,
      Value<String?> hotCueBanklistUUID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongHotCueBanklistFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHotCueBanklist> {
  $DjmdSongHotCueBanklistFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cueID => $composableBuilder(
    column: $table.cueID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inFrame => $composableBuilder(
    column: $table.inFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get inMpegAbs => $composableBuilder(
    column: $table.inMpegAbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outFrame => $composableBuilder(
    column: $table.outFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get comment => $composableBuilder(
    column: $table.comment,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hotCueBanklistUUID => $composableBuilder(
    column: $table.hotCueBanklistUUID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongHotCueBanklistOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHotCueBanklist> {
  $DjmdSongHotCueBanklistOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cueID => $composableBuilder(
    column: $table.cueID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMsec => $composableBuilder(
    column: $table.inMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inFrame => $composableBuilder(
    column: $table.inFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get inMpegAbs => $composableBuilder(
    column: $table.inMpegAbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMsec => $composableBuilder(
    column: $table.outMsec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outFrame => $composableBuilder(
    column: $table.outFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get color => $composableBuilder(
    column: $table.color,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get comment => $composableBuilder(
    column: $table.comment,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hotCueBanklistUUID => $composableBuilder(
    column: $table.hotCueBanklistUUID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongHotCueBanklistAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongHotCueBanklist> {
  $DjmdSongHotCueBanklistAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get cueID =>
      $composableBuilder(column: $table.cueID, builder: (column) => column);

  GeneratedColumn<int> get inMsec =>
      $composableBuilder(column: $table.inMsec, builder: (column) => column);

  GeneratedColumn<int> get inFrame =>
      $composableBuilder(column: $table.inFrame, builder: (column) => column);

  GeneratedColumn<int> get inMpegFrame => $composableBuilder(
    column: $table.inMpegFrame,
    builder: (column) => column,
  );

  GeneratedColumn<int> get inMpegAbs =>
      $composableBuilder(column: $table.inMpegAbs, builder: (column) => column);

  GeneratedColumn<int> get outMsec =>
      $composableBuilder(column: $table.outMsec, builder: (column) => column);

  GeneratedColumn<int> get outFrame =>
      $composableBuilder(column: $table.outFrame, builder: (column) => column);

  GeneratedColumn<int> get outMpegFrame => $composableBuilder(
    column: $table.outMpegFrame,
    builder: (column) => column,
  );

  GeneratedColumn<int> get outMpegAbs => $composableBuilder(
    column: $table.outMpegAbs,
    builder: (column) => column,
  );

  GeneratedColumn<int> get color =>
      $composableBuilder(column: $table.color, builder: (column) => column);

  GeneratedColumn<int> get colorTableIndex => $composableBuilder(
    column: $table.colorTableIndex,
    builder: (column) => column,
  );

  GeneratedColumn<int> get activeLoop => $composableBuilder(
    column: $table.activeLoop,
    builder: (column) => column,
  );

  GeneratedColumn<String> get comment =>
      $composableBuilder(column: $table.comment, builder: (column) => column);

  GeneratedColumn<int> get beatLoopSize => $composableBuilder(
    column: $table.beatLoopSize,
    builder: (column) => column,
  );

  GeneratedColumn<int> get cueMicrosec => $composableBuilder(
    column: $table.cueMicrosec,
    builder: (column) => column,
  );

  GeneratedColumn<String> get inPointSeekInfo => $composableBuilder(
    column: $table.inPointSeekInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get outPointSeekInfo => $composableBuilder(
    column: $table.outPointSeekInfo,
    builder: (column) => column,
  );

  GeneratedColumn<String> get hotCueBanklistUUID => $composableBuilder(
    column: $table.hotCueBanklistUUID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongHotCueBanklistTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongHotCueBanklist,
          DjmdSongHotCueBanklistData,
          $DjmdSongHotCueBanklistFilterComposer,
          $DjmdSongHotCueBanklistOrderingComposer,
          $DjmdSongHotCueBanklistAnnotationComposer,
          $DjmdSongHotCueBanklistCreateCompanionBuilder,
          $DjmdSongHotCueBanklistUpdateCompanionBuilder,
          (
            DjmdSongHotCueBanklistData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongHotCueBanklist,
              DjmdSongHotCueBanklistData
            >,
          ),
          DjmdSongHotCueBanklistData,
          PrefetchHooks Function()
        > {
  $DjmdSongHotCueBanklistTableManager(
    _$RekordboxDatabase db,
    DjmdSongHotCueBanklist table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongHotCueBanklistFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongHotCueBanklistOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongHotCueBanklistAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> hotCueBanklistID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> cueID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> inFrame = const Value.absent(),
                Value<int?> inMpegFrame = const Value.absent(),
                Value<int?> inMpegAbs = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> outFrame = const Value.absent(),
                Value<int?> outMpegFrame = const Value.absent(),
                Value<int?> outMpegAbs = const Value.absent(),
                Value<int?> color = const Value.absent(),
                Value<int?> colorTableIndex = const Value.absent(),
                Value<int?> activeLoop = const Value.absent(),
                Value<String?> comment = const Value.absent(),
                Value<int?> beatLoopSize = const Value.absent(),
                Value<int?> cueMicrosec = const Value.absent(),
                Value<String?> inPointSeekInfo = const Value.absent(),
                Value<String?> outPointSeekInfo = const Value.absent(),
                Value<String?> hotCueBanklistUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongHotCueBanklistCompanion(
                id: id,
                hotCueBanklistID: hotCueBanklistID,
                contentID: contentID,
                trackNo: trackNo,
                cueID: cueID,
                inMsec: inMsec,
                inFrame: inFrame,
                inMpegFrame: inMpegFrame,
                inMpegAbs: inMpegAbs,
                outMsec: outMsec,
                outFrame: outFrame,
                outMpegFrame: outMpegFrame,
                outMpegAbs: outMpegAbs,
                color: color,
                colorTableIndex: colorTableIndex,
                activeLoop: activeLoop,
                comment: comment,
                beatLoopSize: beatLoopSize,
                cueMicrosec: cueMicrosec,
                inPointSeekInfo: inPointSeekInfo,
                outPointSeekInfo: outPointSeekInfo,
                hotCueBanklistUUID: hotCueBanklistUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> hotCueBanklistID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> cueID = const Value.absent(),
                Value<int?> inMsec = const Value.absent(),
                Value<int?> inFrame = const Value.absent(),
                Value<int?> inMpegFrame = const Value.absent(),
                Value<int?> inMpegAbs = const Value.absent(),
                Value<int?> outMsec = const Value.absent(),
                Value<int?> outFrame = const Value.absent(),
                Value<int?> outMpegFrame = const Value.absent(),
                Value<int?> outMpegAbs = const Value.absent(),
                Value<int?> color = const Value.absent(),
                Value<int?> colorTableIndex = const Value.absent(),
                Value<int?> activeLoop = const Value.absent(),
                Value<String?> comment = const Value.absent(),
                Value<int?> beatLoopSize = const Value.absent(),
                Value<int?> cueMicrosec = const Value.absent(),
                Value<String?> inPointSeekInfo = const Value.absent(),
                Value<String?> outPointSeekInfo = const Value.absent(),
                Value<String?> hotCueBanklistUUID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongHotCueBanklistCompanion.insert(
                id: id,
                hotCueBanklistID: hotCueBanklistID,
                contentID: contentID,
                trackNo: trackNo,
                cueID: cueID,
                inMsec: inMsec,
                inFrame: inFrame,
                inMpegFrame: inMpegFrame,
                inMpegAbs: inMpegAbs,
                outMsec: outMsec,
                outFrame: outFrame,
                outMpegFrame: outMpegFrame,
                outMpegAbs: outMpegAbs,
                color: color,
                colorTableIndex: colorTableIndex,
                activeLoop: activeLoop,
                comment: comment,
                beatLoopSize: beatLoopSize,
                cueMicrosec: cueMicrosec,
                inPointSeekInfo: inPointSeekInfo,
                outPointSeekInfo: outPointSeekInfo,
                hotCueBanklistUUID: hotCueBanklistUUID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongHotCueBanklistProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongHotCueBanklist,
      DjmdSongHotCueBanklistData,
      $DjmdSongHotCueBanklistFilterComposer,
      $DjmdSongHotCueBanklistOrderingComposer,
      $DjmdSongHotCueBanklistAnnotationComposer,
      $DjmdSongHotCueBanklistCreateCompanionBuilder,
      $DjmdSongHotCueBanklistUpdateCompanionBuilder,
      (
        DjmdSongHotCueBanklistData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongHotCueBanklist,
          DjmdSongHotCueBanklistData
        >,
      ),
      DjmdSongHotCueBanklistData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongMyTagCreateCompanionBuilder =
    DjmdSongMyTagCompanion Function({
      Value<String?> id,
      Value<String?> myTagID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongMyTagUpdateCompanionBuilder =
    DjmdSongMyTagCompanion Function({
      Value<String?> id,
      Value<String?> myTagID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongMyTagFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongMyTag> {
  $DjmdSongMyTagFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get myTagID => $composableBuilder(
    column: $table.myTagID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongMyTagOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongMyTag> {
  $DjmdSongMyTagOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get myTagID => $composableBuilder(
    column: $table.myTagID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongMyTagAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongMyTag> {
  $DjmdSongMyTagAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get myTagID =>
      $composableBuilder(column: $table.myTagID, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongMyTagTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongMyTag,
          DjmdSongMyTagData,
          $DjmdSongMyTagFilterComposer,
          $DjmdSongMyTagOrderingComposer,
          $DjmdSongMyTagAnnotationComposer,
          $DjmdSongMyTagCreateCompanionBuilder,
          $DjmdSongMyTagUpdateCompanionBuilder,
          (
            DjmdSongMyTagData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongMyTag,
              DjmdSongMyTagData
            >,
          ),
          DjmdSongMyTagData,
          PrefetchHooks Function()
        > {
  $DjmdSongMyTagTableManager(_$RekordboxDatabase db, DjmdSongMyTag table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongMyTagFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongMyTagOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongMyTagAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> myTagID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongMyTagCompanion(
                id: id,
                myTagID: myTagID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> myTagID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongMyTagCompanion.insert(
                id: id,
                myTagID: myTagID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongMyTagProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongMyTag,
      DjmdSongMyTagData,
      $DjmdSongMyTagFilterComposer,
      $DjmdSongMyTagOrderingComposer,
      $DjmdSongMyTagAnnotationComposer,
      $DjmdSongMyTagCreateCompanionBuilder,
      $DjmdSongMyTagUpdateCompanionBuilder,
      (
        DjmdSongMyTagData,
        BaseReferences<_$RekordboxDatabase, DjmdSongMyTag, DjmdSongMyTagData>,
      ),
      DjmdSongMyTagData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongPlaylistCreateCompanionBuilder =
    DjmdSongPlaylistCompanion Function({
      Value<String?> id,
      Value<String?> playlistID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongPlaylistUpdateCompanionBuilder =
    DjmdSongPlaylistCompanion Function({
      Value<String?> id,
      Value<String?> playlistID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongPlaylistFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongPlaylist> {
  $DjmdSongPlaylistFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get playlistID => $composableBuilder(
    column: $table.playlistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongPlaylistOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongPlaylist> {
  $DjmdSongPlaylistOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get playlistID => $composableBuilder(
    column: $table.playlistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongPlaylistAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongPlaylist> {
  $DjmdSongPlaylistAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get playlistID => $composableBuilder(
    column: $table.playlistID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongPlaylistTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongPlaylist,
          DjmdSongPlaylistData,
          $DjmdSongPlaylistFilterComposer,
          $DjmdSongPlaylistOrderingComposer,
          $DjmdSongPlaylistAnnotationComposer,
          $DjmdSongPlaylistCreateCompanionBuilder,
          $DjmdSongPlaylistUpdateCompanionBuilder,
          (
            DjmdSongPlaylistData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongPlaylist,
              DjmdSongPlaylistData
            >,
          ),
          DjmdSongPlaylistData,
          PrefetchHooks Function()
        > {
  $DjmdSongPlaylistTableManager(_$RekordboxDatabase db, DjmdSongPlaylist table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongPlaylistFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongPlaylistOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongPlaylistAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> playlistID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongPlaylistCompanion(
                id: id,
                playlistID: playlistID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> playlistID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongPlaylistCompanion.insert(
                id: id,
                playlistID: playlistID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongPlaylistProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongPlaylist,
      DjmdSongPlaylistData,
      $DjmdSongPlaylistFilterComposer,
      $DjmdSongPlaylistOrderingComposer,
      $DjmdSongPlaylistAnnotationComposer,
      $DjmdSongPlaylistCreateCompanionBuilder,
      $DjmdSongPlaylistUpdateCompanionBuilder,
      (
        DjmdSongPlaylistData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongPlaylist,
          DjmdSongPlaylistData
        >,
      ),
      DjmdSongPlaylistData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongRelatedTracksCreateCompanionBuilder =
    DjmdSongRelatedTracksCompanion Function({
      Value<String?> id,
      Value<String?> relatedTracksID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongRelatedTracksUpdateCompanionBuilder =
    DjmdSongRelatedTracksCompanion Function({
      Value<String?> id,
      Value<String?> relatedTracksID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongRelatedTracksFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongRelatedTracks> {
  $DjmdSongRelatedTracksFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get relatedTracksID => $composableBuilder(
    column: $table.relatedTracksID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongRelatedTracksOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongRelatedTracks> {
  $DjmdSongRelatedTracksOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get relatedTracksID => $composableBuilder(
    column: $table.relatedTracksID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongRelatedTracksAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongRelatedTracks> {
  $DjmdSongRelatedTracksAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get relatedTracksID => $composableBuilder(
    column: $table.relatedTracksID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongRelatedTracksTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongRelatedTracks,
          DjmdSongRelatedTrack,
          $DjmdSongRelatedTracksFilterComposer,
          $DjmdSongRelatedTracksOrderingComposer,
          $DjmdSongRelatedTracksAnnotationComposer,
          $DjmdSongRelatedTracksCreateCompanionBuilder,
          $DjmdSongRelatedTracksUpdateCompanionBuilder,
          (
            DjmdSongRelatedTrack,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongRelatedTracks,
              DjmdSongRelatedTrack
            >,
          ),
          DjmdSongRelatedTrack,
          PrefetchHooks Function()
        > {
  $DjmdSongRelatedTracksTableManager(
    _$RekordboxDatabase db,
    DjmdSongRelatedTracks table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongRelatedTracksFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongRelatedTracksOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongRelatedTracksAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> relatedTracksID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongRelatedTracksCompanion(
                id: id,
                relatedTracksID: relatedTracksID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> relatedTracksID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongRelatedTracksCompanion.insert(
                id: id,
                relatedTracksID: relatedTracksID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongRelatedTracksProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongRelatedTracks,
      DjmdSongRelatedTrack,
      $DjmdSongRelatedTracksFilterComposer,
      $DjmdSongRelatedTracksOrderingComposer,
      $DjmdSongRelatedTracksAnnotationComposer,
      $DjmdSongRelatedTracksCreateCompanionBuilder,
      $DjmdSongRelatedTracksUpdateCompanionBuilder,
      (
        DjmdSongRelatedTrack,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongRelatedTracks,
          DjmdSongRelatedTrack
        >,
      ),
      DjmdSongRelatedTrack,
      PrefetchHooks Function()
    >;
typedef $DjmdSongSamplerCreateCompanionBuilder =
    DjmdSongSamplerCompanion Function({
      Value<String?> id,
      Value<String?> samplerID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongSamplerUpdateCompanionBuilder =
    DjmdSongSamplerCompanion Function({
      Value<String?> id,
      Value<String?> samplerID,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongSamplerFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongSampler> {
  $DjmdSongSamplerFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get samplerID => $composableBuilder(
    column: $table.samplerID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongSamplerOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongSampler> {
  $DjmdSongSamplerOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get samplerID => $composableBuilder(
    column: $table.samplerID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongSamplerAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongSampler> {
  $DjmdSongSamplerAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get samplerID =>
      $composableBuilder(column: $table.samplerID, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongSamplerTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongSampler,
          DjmdSongSamplerData,
          $DjmdSongSamplerFilterComposer,
          $DjmdSongSamplerOrderingComposer,
          $DjmdSongSamplerAnnotationComposer,
          $DjmdSongSamplerCreateCompanionBuilder,
          $DjmdSongSamplerUpdateCompanionBuilder,
          (
            DjmdSongSamplerData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongSampler,
              DjmdSongSamplerData
            >,
          ),
          DjmdSongSamplerData,
          PrefetchHooks Function()
        > {
  $DjmdSongSamplerTableManager(_$RekordboxDatabase db, DjmdSongSampler table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongSamplerFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongSamplerOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongSamplerAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> samplerID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongSamplerCompanion(
                id: id,
                samplerID: samplerID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> samplerID = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongSamplerCompanion.insert(
                id: id,
                samplerID: samplerID,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongSamplerProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongSampler,
      DjmdSongSamplerData,
      $DjmdSongSamplerFilterComposer,
      $DjmdSongSamplerOrderingComposer,
      $DjmdSongSamplerAnnotationComposer,
      $DjmdSongSamplerCreateCompanionBuilder,
      $DjmdSongSamplerUpdateCompanionBuilder,
      (
        DjmdSongSamplerData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongSampler,
          DjmdSongSamplerData
        >,
      ),
      DjmdSongSamplerData,
      PrefetchHooks Function()
    >;
typedef $DjmdSongTagListCreateCompanionBuilder =
    DjmdSongTagListCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSongTagListUpdateCompanionBuilder =
    DjmdSongTagListCompanion Function({
      Value<String?> id,
      Value<String?> contentID,
      Value<int?> trackNo,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSongTagListFilterComposer
    extends Composer<_$RekordboxDatabase, DjmdSongTagList> {
  $DjmdSongTagListFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSongTagListOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSongTagList> {
  $DjmdSongTagListOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get contentID => $composableBuilder(
    column: $table.contentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get trackNo => $composableBuilder(
    column: $table.trackNo,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSongTagListAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSongTagList> {
  $DjmdSongTagListAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get contentID =>
      $composableBuilder(column: $table.contentID, builder: (column) => column);

  GeneratedColumn<int> get trackNo =>
      $composableBuilder(column: $table.trackNo, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSongTagListTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSongTagList,
          DjmdSongTagListData,
          $DjmdSongTagListFilterComposer,
          $DjmdSongTagListOrderingComposer,
          $DjmdSongTagListAnnotationComposer,
          $DjmdSongTagListCreateCompanionBuilder,
          $DjmdSongTagListUpdateCompanionBuilder,
          (
            DjmdSongTagListData,
            BaseReferences<
              _$RekordboxDatabase,
              DjmdSongTagList,
              DjmdSongTagListData
            >,
          ),
          DjmdSongTagListData,
          PrefetchHooks Function()
        > {
  $DjmdSongTagListTableManager(_$RekordboxDatabase db, DjmdSongTagList table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSongTagListFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSongTagListOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSongTagListAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongTagListCompanion(
                id: id,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> contentID = const Value.absent(),
                Value<int?> trackNo = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSongTagListCompanion.insert(
                id: id,
                contentID: contentID,
                trackNo: trackNo,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSongTagListProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSongTagList,
      DjmdSongTagListData,
      $DjmdSongTagListFilterComposer,
      $DjmdSongTagListOrderingComposer,
      $DjmdSongTagListAnnotationComposer,
      $DjmdSongTagListCreateCompanionBuilder,
      $DjmdSongTagListUpdateCompanionBuilder,
      (
        DjmdSongTagListData,
        BaseReferences<
          _$RekordboxDatabase,
          DjmdSongTagList,
          DjmdSongTagListData
        >,
      ),
      DjmdSongTagListData,
      PrefetchHooks Function()
    >;
typedef $DjmdSortCreateCompanionBuilder =
    DjmdSortCompanion Function({
      Value<String?> id,
      Value<String?> menuItemID,
      Value<int?> seq,
      Value<int?> disable,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $DjmdSortUpdateCompanionBuilder =
    DjmdSortCompanion Function({
      Value<String?> id,
      Value<String?> menuItemID,
      Value<int?> seq,
      Value<int?> disable,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $DjmdSortFilterComposer extends Composer<_$RekordboxDatabase, DjmdSort> {
  $DjmdSortFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get disable => $composableBuilder(
    column: $table.disable,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $DjmdSortOrderingComposer
    extends Composer<_$RekordboxDatabase, DjmdSort> {
  $DjmdSortOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get disable => $composableBuilder(
    column: $table.disable,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $DjmdSortAnnotationComposer
    extends Composer<_$RekordboxDatabase, DjmdSort> {
  $DjmdSortAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get menuItemID => $composableBuilder(
    column: $table.menuItemID,
    builder: (column) => column,
  );

  GeneratedColumn<int> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);

  GeneratedColumn<int> get disable =>
      $composableBuilder(column: $table.disable, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $DjmdSortTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          DjmdSort,
          DjmdSortData,
          $DjmdSortFilterComposer,
          $DjmdSortOrderingComposer,
          $DjmdSortAnnotationComposer,
          $DjmdSortCreateCompanionBuilder,
          $DjmdSortUpdateCompanionBuilder,
          (
            DjmdSortData,
            BaseReferences<_$RekordboxDatabase, DjmdSort, DjmdSortData>,
          ),
          DjmdSortData,
          PrefetchHooks Function()
        > {
  $DjmdSortTableManager(_$RekordboxDatabase db, DjmdSort table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $DjmdSortFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $DjmdSortOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $DjmdSortAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> menuItemID = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<int?> disable = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => DjmdSortCompanion(
                id: id,
                menuItemID: menuItemID,
                seq: seq,
                disable: disable,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> menuItemID = const Value.absent(),
                Value<int?> seq = const Value.absent(),
                Value<int?> disable = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => DjmdSortCompanion.insert(
                id: id,
                menuItemID: menuItemID,
                seq: seq,
                disable: disable,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $DjmdSortProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      DjmdSort,
      DjmdSortData,
      $DjmdSortFilterComposer,
      $DjmdSortOrderingComposer,
      $DjmdSortAnnotationComposer,
      $DjmdSortCreateCompanionBuilder,
      $DjmdSortUpdateCompanionBuilder,
      (
        DjmdSortData,
        BaseReferences<_$RekordboxDatabase, DjmdSort, DjmdSortData>,
      ),
      DjmdSortData,
      PrefetchHooks Function()
    >;
typedef $HotCueBanklistCueCreateCompanionBuilder =
    HotCueBanklistCueCompanion Function({
      Value<String?> id,
      Value<String?> hotCueBanklistID,
      Value<String?> cues,
      Value<int?> rbCueCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $HotCueBanklistCueUpdateCompanionBuilder =
    HotCueBanklistCueCompanion Function({
      Value<String?> id,
      Value<String?> hotCueBanklistID,
      Value<String?> cues,
      Value<int?> rbCueCount,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $HotCueBanklistCueFilterComposer
    extends Composer<_$RekordboxDatabase, HotCueBanklistCue> {
  $HotCueBanklistCueFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get cues => $composableBuilder(
    column: $table.cues,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $HotCueBanklistCueOrderingComposer
    extends Composer<_$RekordboxDatabase, HotCueBanklistCue> {
  $HotCueBanklistCueOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get cues => $composableBuilder(
    column: $table.cues,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $HotCueBanklistCueAnnotationComposer
    extends Composer<_$RekordboxDatabase, HotCueBanklistCue> {
  $HotCueBanklistCueAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get hotCueBanklistID => $composableBuilder(
    column: $table.hotCueBanklistID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get cues =>
      $composableBuilder(column: $table.cues, builder: (column) => column);

  GeneratedColumn<int> get rbCueCount => $composableBuilder(
    column: $table.rbCueCount,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $HotCueBanklistCueTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          HotCueBanklistCue,
          HotCueBanklistCueData,
          $HotCueBanklistCueFilterComposer,
          $HotCueBanklistCueOrderingComposer,
          $HotCueBanklistCueAnnotationComposer,
          $HotCueBanklistCueCreateCompanionBuilder,
          $HotCueBanklistCueUpdateCompanionBuilder,
          (
            HotCueBanklistCueData,
            BaseReferences<
              _$RekordboxDatabase,
              HotCueBanklistCue,
              HotCueBanklistCueData
            >,
          ),
          HotCueBanklistCueData,
          PrefetchHooks Function()
        > {
  $HotCueBanklistCueTableManager(
    _$RekordboxDatabase db,
    HotCueBanklistCue table,
  ) : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $HotCueBanklistCueFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $HotCueBanklistCueOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $HotCueBanklistCueAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> hotCueBanklistID = const Value.absent(),
                Value<String?> cues = const Value.absent(),
                Value<int?> rbCueCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => HotCueBanklistCueCompanion(
                id: id,
                hotCueBanklistID: hotCueBanklistID,
                cues: cues,
                rbCueCount: rbCueCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> hotCueBanklistID = const Value.absent(),
                Value<String?> cues = const Value.absent(),
                Value<int?> rbCueCount = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => HotCueBanklistCueCompanion.insert(
                id: id,
                hotCueBanklistID: hotCueBanklistID,
                cues: cues,
                rbCueCount: rbCueCount,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $HotCueBanklistCueProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      HotCueBanklistCue,
      HotCueBanklistCueData,
      $HotCueBanklistCueFilterComposer,
      $HotCueBanklistCueOrderingComposer,
      $HotCueBanklistCueAnnotationComposer,
      $HotCueBanklistCueCreateCompanionBuilder,
      $HotCueBanklistCueUpdateCompanionBuilder,
      (
        HotCueBanklistCueData,
        BaseReferences<
          _$RekordboxDatabase,
          HotCueBanklistCue,
          HotCueBanklistCueData
        >,
      ),
      HotCueBanklistCueData,
      PrefetchHooks Function()
    >;
typedef $ImageFileCreateCompanionBuilder =
    ImageFileCompanion Function({
      Value<String?> id,
      Value<String?> entityTableName,
      Value<String?> targetUUID,
      Value<String?> targetID,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbLocalFileStatus,
      Value<int?> rbInProgress,
      Value<int?> rbProcessType,
      Value<String?> rbTempPath,
      Value<int?> rbPriority,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $ImageFileUpdateCompanionBuilder =
    ImageFileCompanion Function({
      Value<String?> id,
      Value<String?> entityTableName,
      Value<String?> targetUUID,
      Value<String?> targetID,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbLocalFileStatus,
      Value<int?> rbInProgress,
      Value<int?> rbProcessType,
      Value<String?> rbTempPath,
      Value<int?> rbPriority,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $ImageFileFilterComposer
    extends Composer<_$RekordboxDatabase, ImageFile> {
  $ImageFileFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get targetID => $composableBuilder(
    column: $table.targetID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $ImageFileOrderingComposer
    extends Composer<_$RekordboxDatabase, ImageFile> {
  $ImageFileOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get targetID => $composableBuilder(
    column: $table.targetID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $ImageFileAnnotationComposer
    extends Composer<_$RekordboxDatabase, ImageFile> {
  $ImageFileAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get targetID =>
      $composableBuilder(column: $table.targetID, builder: (column) => column);

  GeneratedColumn<String> get path =>
      $composableBuilder(column: $table.path, builder: (column) => column);

  GeneratedColumn<String> get hash =>
      $composableBuilder(column: $table.hash, builder: (column) => column);

  GeneratedColumn<int> get size =>
      $composableBuilder(column: $table.size, builder: (column) => column);

  GeneratedColumn<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalFileStatus => $composableBuilder(
    column: $table.rbLocalFileStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbInProgress => $composableBuilder(
    column: $table.rbInProgress,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbProcessType => $composableBuilder(
    column: $table.rbProcessType,
    builder: (column) => column,
  );

  GeneratedColumn<String> get rbTempPath => $composableBuilder(
    column: $table.rbTempPath,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbPriority => $composableBuilder(
    column: $table.rbPriority,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $ImageFileTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          ImageFile,
          ImageFileData,
          $ImageFileFilterComposer,
          $ImageFileOrderingComposer,
          $ImageFileAnnotationComposer,
          $ImageFileCreateCompanionBuilder,
          $ImageFileUpdateCompanionBuilder,
          (
            ImageFileData,
            BaseReferences<_$RekordboxDatabase, ImageFile, ImageFileData>,
          ),
          ImageFileData,
          PrefetchHooks Function()
        > {
  $ImageFileTableManager(_$RekordboxDatabase db, ImageFile table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $ImageFileFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $ImageFileOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $ImageFileAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> entityTableName = const Value.absent(),
                Value<String?> targetUUID = const Value.absent(),
                Value<String?> targetID = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbLocalFileStatus = const Value.absent(),
                Value<int?> rbInProgress = const Value.absent(),
                Value<int?> rbProcessType = const Value.absent(),
                Value<String?> rbTempPath = const Value.absent(),
                Value<int?> rbPriority = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => ImageFileCompanion(
                id: id,
                entityTableName: entityTableName,
                targetUUID: targetUUID,
                targetID: targetID,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbLocalFileStatus: rbLocalFileStatus,
                rbInProgress: rbInProgress,
                rbProcessType: rbProcessType,
                rbTempPath: rbTempPath,
                rbPriority: rbPriority,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> entityTableName = const Value.absent(),
                Value<String?> targetUUID = const Value.absent(),
                Value<String?> targetID = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbLocalFileStatus = const Value.absent(),
                Value<int?> rbInProgress = const Value.absent(),
                Value<int?> rbProcessType = const Value.absent(),
                Value<String?> rbTempPath = const Value.absent(),
                Value<int?> rbPriority = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => ImageFileCompanion.insert(
                id: id,
                entityTableName: entityTableName,
                targetUUID: targetUUID,
                targetID: targetID,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbLocalFileStatus: rbLocalFileStatus,
                rbInProgress: rbInProgress,
                rbProcessType: rbProcessType,
                rbTempPath: rbTempPath,
                rbPriority: rbPriority,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $ImageFileProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      ImageFile,
      ImageFileData,
      $ImageFileFilterComposer,
      $ImageFileOrderingComposer,
      $ImageFileAnnotationComposer,
      $ImageFileCreateCompanionBuilder,
      $ImageFileUpdateCompanionBuilder,
      (
        ImageFileData,
        BaseReferences<_$RekordboxDatabase, ImageFile, ImageFileData>,
      ),
      ImageFileData,
      PrefetchHooks Function()
    >;
typedef $SettingFileCreateCompanionBuilder =
    SettingFileCompanion Function({
      Value<String?> id,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $SettingFileUpdateCompanionBuilder =
    SettingFileCompanion Function({
      Value<String?> id,
      Value<String?> path,
      Value<String?> hash,
      Value<int?> size,
      Value<String?> rbLocalPath,
      Value<String?> rbInsyncHash,
      Value<int?> rbInsyncLocalUsn,
      Value<int?> rbFileHashDirty,
      Value<int?> rbFileSizeDirty,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $SettingFileFilterComposer
    extends Composer<_$RekordboxDatabase, SettingFile> {
  $SettingFileFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $SettingFileOrderingComposer
    extends Composer<_$RekordboxDatabase, SettingFile> {
  $SettingFileOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get path => $composableBuilder(
    column: $table.path,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get hash => $composableBuilder(
    column: $table.hash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get size => $composableBuilder(
    column: $table.size,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $SettingFileAnnotationComposer
    extends Composer<_$RekordboxDatabase, SettingFile> {
  $SettingFileAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get path =>
      $composableBuilder(column: $table.path, builder: (column) => column);

  GeneratedColumn<String> get hash =>
      $composableBuilder(column: $table.hash, builder: (column) => column);

  GeneratedColumn<int> get size =>
      $composableBuilder(column: $table.size, builder: (column) => column);

  GeneratedColumn<String> get rbLocalPath => $composableBuilder(
    column: $table.rbLocalPath,
    builder: (column) => column,
  );

  GeneratedColumn<String> get rbInsyncHash => $composableBuilder(
    column: $table.rbInsyncHash,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbInsyncLocalUsn => $composableBuilder(
    column: $table.rbInsyncLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileHashDirty => $composableBuilder(
    column: $table.rbFileHashDirty,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbFileSizeDirty => $composableBuilder(
    column: $table.rbFileSizeDirty,
    builder: (column) => column,
  );

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $SettingFileTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          SettingFile,
          SettingFileData,
          $SettingFileFilterComposer,
          $SettingFileOrderingComposer,
          $SettingFileAnnotationComposer,
          $SettingFileCreateCompanionBuilder,
          $SettingFileUpdateCompanionBuilder,
          (
            SettingFileData,
            BaseReferences<_$RekordboxDatabase, SettingFile, SettingFileData>,
          ),
          SettingFileData,
          PrefetchHooks Function()
        > {
  $SettingFileTableManager(_$RekordboxDatabase db, SettingFile table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $SettingFileFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $SettingFileOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $SettingFileAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SettingFileCompanion(
                id: id,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> path = const Value.absent(),
                Value<String?> hash = const Value.absent(),
                Value<int?> size = const Value.absent(),
                Value<String?> rbLocalPath = const Value.absent(),
                Value<String?> rbInsyncHash = const Value.absent(),
                Value<int?> rbInsyncLocalUsn = const Value.absent(),
                Value<int?> rbFileHashDirty = const Value.absent(),
                Value<int?> rbFileSizeDirty = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => SettingFileCompanion.insert(
                id: id,
                path: path,
                hash: hash,
                size: size,
                rbLocalPath: rbLocalPath,
                rbInsyncHash: rbInsyncHash,
                rbInsyncLocalUsn: rbInsyncLocalUsn,
                rbFileHashDirty: rbFileHashDirty,
                rbFileSizeDirty: rbFileSizeDirty,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $SettingFileProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      SettingFile,
      SettingFileData,
      $SettingFileFilterComposer,
      $SettingFileOrderingComposer,
      $SettingFileAnnotationComposer,
      $SettingFileCreateCompanionBuilder,
      $SettingFileUpdateCompanionBuilder,
      (
        SettingFileData,
        BaseReferences<_$RekordboxDatabase, SettingFile, SettingFileData>,
      ),
      SettingFileData,
      PrefetchHooks Function()
    >;
typedef $SqliteSequenceCreateCompanionBuilder =
    SqliteSequenceCompanion Function({
      Value<Uint8List?> name,
      Value<Uint8List?> seq,
      Value<int> rowid,
    });
typedef $SqliteSequenceUpdateCompanionBuilder =
    SqliteSequenceCompanion Function({
      Value<Uint8List?> name,
      Value<Uint8List?> seq,
      Value<int> rowid,
    });

class $SqliteSequenceFilterComposer
    extends Composer<_$RekordboxDatabase, SqliteSequence> {
  $SqliteSequenceFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<Uint8List> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<Uint8List> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnFilters(column),
  );
}

class $SqliteSequenceOrderingComposer
    extends Composer<_$RekordboxDatabase, SqliteSequence> {
  $SqliteSequenceOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<Uint8List> get name => $composableBuilder(
    column: $table.name,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<Uint8List> get seq => $composableBuilder(
    column: $table.seq,
    builder: (column) => ColumnOrderings(column),
  );
}

class $SqliteSequenceAnnotationComposer
    extends Composer<_$RekordboxDatabase, SqliteSequence> {
  $SqliteSequenceAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<Uint8List> get name =>
      $composableBuilder(column: $table.name, builder: (column) => column);

  GeneratedColumn<Uint8List> get seq =>
      $composableBuilder(column: $table.seq, builder: (column) => column);
}

class $SqliteSequenceTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          SqliteSequence,
          SqliteSequenceData,
          $SqliteSequenceFilterComposer,
          $SqliteSequenceOrderingComposer,
          $SqliteSequenceAnnotationComposer,
          $SqliteSequenceCreateCompanionBuilder,
          $SqliteSequenceUpdateCompanionBuilder,
          (
            SqliteSequenceData,
            BaseReferences<
              _$RekordboxDatabase,
              SqliteSequence,
              SqliteSequenceData
            >,
          ),
          SqliteSequenceData,
          PrefetchHooks Function()
        > {
  $SqliteSequenceTableManager(_$RekordboxDatabase db, SqliteSequence table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $SqliteSequenceFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $SqliteSequenceOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $SqliteSequenceAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<Uint8List?> name = const Value.absent(),
                Value<Uint8List?> seq = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SqliteSequenceCompanion(name: name, seq: seq, rowid: rowid),
          createCompanionCallback:
              ({
                Value<Uint8List?> name = const Value.absent(),
                Value<Uint8List?> seq = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => SqliteSequenceCompanion.insert(
                name: name,
                seq: seq,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $SqliteSequenceProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      SqliteSequence,
      SqliteSequenceData,
      $SqliteSequenceFilterComposer,
      $SqliteSequenceOrderingComposer,
      $SqliteSequenceAnnotationComposer,
      $SqliteSequenceCreateCompanionBuilder,
      $SqliteSequenceUpdateCompanionBuilder,
      (
        SqliteSequenceData,
        BaseReferences<_$RekordboxDatabase, SqliteSequence, SqliteSequenceData>,
      ),
      SqliteSequenceData,
      PrefetchHooks Function()
    >;
typedef $UuidIDMapCreateCompanionBuilder =
    UuidIDMapCompanion Function({
      Value<String?> id,
      Value<String?> entityTableName,
      Value<String?> targetUUID,
      Value<String?> currentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      required String createdAt,
      required String updatedAt,
      Value<int> rowid,
    });
typedef $UuidIDMapUpdateCompanionBuilder =
    UuidIDMapCompanion Function({
      Value<String?> id,
      Value<String?> entityTableName,
      Value<String?> targetUUID,
      Value<String?> currentID,
      Value<String?> uuid,
      Value<int?> rbDataStatus,
      Value<int?> rbLocalDataStatus,
      Value<int?> rbLocalDeleted,
      Value<int?> rbLocalSynced,
      Value<int?> usn,
      Value<int?> rbLocalUsn,
      Value<String> createdAt,
      Value<String> updatedAt,
      Value<int> rowid,
    });

class $UuidIDMapFilterComposer
    extends Composer<_$RekordboxDatabase, UuidIDMap> {
  $UuidIDMapFilterComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnFilters<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get currentID => $composableBuilder(
    column: $table.currentID,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnFilters(column),
  );

  ColumnFilters<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnFilters(column),
  );
}

class $UuidIDMapOrderingComposer
    extends Composer<_$RekordboxDatabase, UuidIDMap> {
  $UuidIDMapOrderingComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  ColumnOrderings<String> get id => $composableBuilder(
    column: $table.id,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get currentID => $composableBuilder(
    column: $table.currentID,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get uuid => $composableBuilder(
    column: $table.uuid,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get usn => $composableBuilder(
    column: $table.usn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get createdAt => $composableBuilder(
    column: $table.createdAt,
    builder: (column) => ColumnOrderings(column),
  );

  ColumnOrderings<String> get updatedAt => $composableBuilder(
    column: $table.updatedAt,
    builder: (column) => ColumnOrderings(column),
  );
}

class $UuidIDMapAnnotationComposer
    extends Composer<_$RekordboxDatabase, UuidIDMap> {
  $UuidIDMapAnnotationComposer({
    required super.$db,
    required super.$table,
    super.joinBuilder,
    super.$addJoinBuilderToRootComposer,
    super.$removeJoinBuilderFromRootComposer,
  });
  GeneratedColumn<String> get id =>
      $composableBuilder(column: $table.id, builder: (column) => column);

  GeneratedColumn<String> get entityTableName => $composableBuilder(
    column: $table.entityTableName,
    builder: (column) => column,
  );

  GeneratedColumn<String> get targetUUID => $composableBuilder(
    column: $table.targetUUID,
    builder: (column) => column,
  );

  GeneratedColumn<String> get currentID =>
      $composableBuilder(column: $table.currentID, builder: (column) => column);

  GeneratedColumn<String> get uuid =>
      $composableBuilder(column: $table.uuid, builder: (column) => column);

  GeneratedColumn<int> get rbDataStatus => $composableBuilder(
    column: $table.rbDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDataStatus => $composableBuilder(
    column: $table.rbLocalDataStatus,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalDeleted => $composableBuilder(
    column: $table.rbLocalDeleted,
    builder: (column) => column,
  );

  GeneratedColumn<int> get rbLocalSynced => $composableBuilder(
    column: $table.rbLocalSynced,
    builder: (column) => column,
  );

  GeneratedColumn<int> get usn =>
      $composableBuilder(column: $table.usn, builder: (column) => column);

  GeneratedColumn<int> get rbLocalUsn => $composableBuilder(
    column: $table.rbLocalUsn,
    builder: (column) => column,
  );

  GeneratedColumn<String> get createdAt =>
      $composableBuilder(column: $table.createdAt, builder: (column) => column);

  GeneratedColumn<String> get updatedAt =>
      $composableBuilder(column: $table.updatedAt, builder: (column) => column);
}

class $UuidIDMapTableManager
    extends
        RootTableManager<
          _$RekordboxDatabase,
          UuidIDMap,
          UuidIDMapData,
          $UuidIDMapFilterComposer,
          $UuidIDMapOrderingComposer,
          $UuidIDMapAnnotationComposer,
          $UuidIDMapCreateCompanionBuilder,
          $UuidIDMapUpdateCompanionBuilder,
          (
            UuidIDMapData,
            BaseReferences<_$RekordboxDatabase, UuidIDMap, UuidIDMapData>,
          ),
          UuidIDMapData,
          PrefetchHooks Function()
        > {
  $UuidIDMapTableManager(_$RekordboxDatabase db, UuidIDMap table)
    : super(
        TableManagerState(
          db: db,
          table: table,
          createFilteringComposer: () =>
              $UuidIDMapFilterComposer($db: db, $table: table),
          createOrderingComposer: () =>
              $UuidIDMapOrderingComposer($db: db, $table: table),
          createComputedFieldComposer: () =>
              $UuidIDMapAnnotationComposer($db: db, $table: table),
          updateCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> entityTableName = const Value.absent(),
                Value<String?> targetUUID = const Value.absent(),
                Value<String?> currentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                Value<String> createdAt = const Value.absent(),
                Value<String> updatedAt = const Value.absent(),
                Value<int> rowid = const Value.absent(),
              }) => UuidIDMapCompanion(
                id: id,
                entityTableName: entityTableName,
                targetUUID: targetUUID,
                currentID: currentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          createCompanionCallback:
              ({
                Value<String?> id = const Value.absent(),
                Value<String?> entityTableName = const Value.absent(),
                Value<String?> targetUUID = const Value.absent(),
                Value<String?> currentID = const Value.absent(),
                Value<String?> uuid = const Value.absent(),
                Value<int?> rbDataStatus = const Value.absent(),
                Value<int?> rbLocalDataStatus = const Value.absent(),
                Value<int?> rbLocalDeleted = const Value.absent(),
                Value<int?> rbLocalSynced = const Value.absent(),
                Value<int?> usn = const Value.absent(),
                Value<int?> rbLocalUsn = const Value.absent(),
                required String createdAt,
                required String updatedAt,
                Value<int> rowid = const Value.absent(),
              }) => UuidIDMapCompanion.insert(
                id: id,
                entityTableName: entityTableName,
                targetUUID: targetUUID,
                currentID: currentID,
                uuid: uuid,
                rbDataStatus: rbDataStatus,
                rbLocalDataStatus: rbLocalDataStatus,
                rbLocalDeleted: rbLocalDeleted,
                rbLocalSynced: rbLocalSynced,
                usn: usn,
                rbLocalUsn: rbLocalUsn,
                createdAt: createdAt,
                updatedAt: updatedAt,
                rowid: rowid,
              ),
          withReferenceMapper: (p0) => p0
              .map((e) => (e.readTable(table), BaseReferences(db, table, e)))
              .toList(),
          prefetchHooksCallback: null,
        ),
      );
}

typedef $UuidIDMapProcessedTableManager =
    ProcessedTableManager<
      _$RekordboxDatabase,
      UuidIDMap,
      UuidIDMapData,
      $UuidIDMapFilterComposer,
      $UuidIDMapOrderingComposer,
      $UuidIDMapAnnotationComposer,
      $UuidIDMapCreateCompanionBuilder,
      $UuidIDMapUpdateCompanionBuilder,
      (
        UuidIDMapData,
        BaseReferences<_$RekordboxDatabase, UuidIDMap, UuidIDMapData>,
      ),
      UuidIDMapData,
      PrefetchHooks Function()
    >;

class $RekordboxDatabaseManager {
  final _$RekordboxDatabase _db;
  $RekordboxDatabaseManager(this._db);
  $AgentNotificationTableManager get agentNotification =>
      $AgentNotificationTableManager(_db, _db.agentNotification);
  $AgentNotificationLogTableManager get agentNotificationLog =>
      $AgentNotificationLogTableManager(_db, _db.agentNotificationLog);
  $AgentRegistryTableManager get agentRegistry =>
      $AgentRegistryTableManager(_db, _db.agentRegistry);
  $CloudAgentRegistryTableManager get cloudAgentRegistry =>
      $CloudAgentRegistryTableManager(_db, _db.cloudAgentRegistry);
  $ContentActiveCensorTableManager get contentActiveCensor =>
      $ContentActiveCensorTableManager(_db, _db.contentActiveCensor);
  $ContentCueTableManager get contentCue =>
      $ContentCueTableManager(_db, _db.contentCue);
  $ContentFileTableManager get contentFile =>
      $ContentFileTableManager(_db, _db.contentFile);
  $DjmdActiveCensorTableManager get djmdActiveCensor =>
      $DjmdActiveCensorTableManager(_db, _db.djmdActiveCensor);
  $DjmdAlbumTableManager get djmdAlbum =>
      $DjmdAlbumTableManager(_db, _db.djmdAlbum);
  $DjmdArtistTableManager get djmdArtist =>
      $DjmdArtistTableManager(_db, _db.djmdArtist);
  $DjmdCategoryTableManager get djmdCategory =>
      $DjmdCategoryTableManager(_db, _db.djmdCategory);
  $DjmdCloudPropertyTableManager get djmdCloudProperty =>
      $DjmdCloudPropertyTableManager(_db, _db.djmdCloudProperty);
  $DjmdColorTableManager get djmdColor =>
      $DjmdColorTableManager(_db, _db.djmdColor);
  $DjmdContentTableManager get djmdContent =>
      $DjmdContentTableManager(_db, _db.djmdContent);
  $DjmdCueTableManager get djmdCue => $DjmdCueTableManager(_db, _db.djmdCue);
  $DjmdDeviceTableManager get djmdDevice =>
      $DjmdDeviceTableManager(_db, _db.djmdDevice);
  $DjmdGenreTableManager get djmdGenre =>
      $DjmdGenreTableManager(_db, _db.djmdGenre);
  $DjmdHistoryTableManager get djmdHistory =>
      $DjmdHistoryTableManager(_db, _db.djmdHistory);
  $DjmdHotCueBanklistTableManager get djmdHotCueBanklist =>
      $DjmdHotCueBanklistTableManager(_db, _db.djmdHotCueBanklist);
  $DjmdKeyTableManager get djmdKey => $DjmdKeyTableManager(_db, _db.djmdKey);
  $DjmdLabelTableManager get djmdLabel =>
      $DjmdLabelTableManager(_db, _db.djmdLabel);
  $DjmdMenuItemsTableManager get djmdMenuItems =>
      $DjmdMenuItemsTableManager(_db, _db.djmdMenuItems);
  $DjmdMixerParamTableManager get djmdMixerParam =>
      $DjmdMixerParamTableManager(_db, _db.djmdMixerParam);
  $DjmdMyTagTableManager get djmdMyTag =>
      $DjmdMyTagTableManager(_db, _db.djmdMyTag);
  $DjmdPlaylistTableManager get djmdPlaylist =>
      $DjmdPlaylistTableManager(_db, _db.djmdPlaylist);
  $DjmdPropertyTableManager get djmdProperty =>
      $DjmdPropertyTableManager(_db, _db.djmdProperty);
  $DjmdRecommendLikeTableManager get djmdRecommendLike =>
      $DjmdRecommendLikeTableManager(_db, _db.djmdRecommendLike);
  $DjmdRelatedTracksTableManager get djmdRelatedTracks =>
      $DjmdRelatedTracksTableManager(_db, _db.djmdRelatedTracks);
  $DjmdSamplerTableManager get djmdSampler =>
      $DjmdSamplerTableManager(_db, _db.djmdSampler);
  $DjmdSongHistoryTableManager get djmdSongHistory =>
      $DjmdSongHistoryTableManager(_db, _db.djmdSongHistory);
  $DjmdSongHotCueBanklistTableManager get djmdSongHotCueBanklist =>
      $DjmdSongHotCueBanklistTableManager(_db, _db.djmdSongHotCueBanklist);
  $DjmdSongMyTagTableManager get djmdSongMyTag =>
      $DjmdSongMyTagTableManager(_db, _db.djmdSongMyTag);
  $DjmdSongPlaylistTableManager get djmdSongPlaylist =>
      $DjmdSongPlaylistTableManager(_db, _db.djmdSongPlaylist);
  $DjmdSongRelatedTracksTableManager get djmdSongRelatedTracks =>
      $DjmdSongRelatedTracksTableManager(_db, _db.djmdSongRelatedTracks);
  $DjmdSongSamplerTableManager get djmdSongSampler =>
      $DjmdSongSamplerTableManager(_db, _db.djmdSongSampler);
  $DjmdSongTagListTableManager get djmdSongTagList =>
      $DjmdSongTagListTableManager(_db, _db.djmdSongTagList);
  $DjmdSortTableManager get djmdSort =>
      $DjmdSortTableManager(_db, _db.djmdSort);
  $HotCueBanklistCueTableManager get hotCueBanklistCue =>
      $HotCueBanklistCueTableManager(_db, _db.hotCueBanklistCue);
  $ImageFileTableManager get imageFile =>
      $ImageFileTableManager(_db, _db.imageFile);
  $SettingFileTableManager get settingFile =>
      $SettingFileTableManager(_db, _db.settingFile);
  $SqliteSequenceTableManager get sqliteSequence =>
      $SqliteSequenceTableManager(_db, _db.sqliteSequence);
  $UuidIDMapTableManager get uuidIDMap =>
      $UuidIDMapTableManager(_db, _db.uuidIDMap);
}
